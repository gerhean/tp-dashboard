[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-T14-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-T14-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Travel inspirations come in bits and pieces."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "At the start of every travel planning, we often only have a vague idea of the activities we are interested in and not a concrete schedule that optimises our travel time and satisfaction."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "As a result, travel planning is often a hot mess with little structure."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "WanderLust aims to create an efficient and organised way for travellers to plan out their trips."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Every pinned destination, travel plan and schedule can be quickly added, modified and retrieved right from the CLI -- an extremely streamlined and quick process for the CLI-proficient traveller."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Relevant information can be retrieved right when and where you need them. With WanderLust, creating a travel plan and schedule will be simple and hassle-free."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Site Map"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* [User Guide](/docs/UserGuide.md)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* [Developer Guide](/docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* [About Us](/docs/AboutUs.md)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* [Contact Us](/docs/ContactUs.md)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Acknowledgement"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "This project is based on the AddressBook-Level3 project created by the [SE-EDU](https://se-education.org) initiative."
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 27,
      "-": 3
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Wanderlust was developed by [Team CS2103-T14-3](https://github.com/orgs/AY2021S1-CS2103-T14-3/people)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Prof. Damith C. Rajapakse"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003cimg src\u003d\"images/damith.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "[[homepage](http://www.comp.nus.edu.sg/~damithch)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "[[github](https://github.com/damithc)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Project Advisor"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Lim Hai Shan"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003cimg src\u003d\"images/underthehai.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "[[github](http://github.com/underthehai)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Role: Developer (In charge of Model)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Lye Yi Xian"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003cimg src\u003d\"images/lyeyixian.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "[[github](http://github.com/lyeyixian)]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Role: Team Lead (In charge of Storage)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Responsibilities: Integration, Deliverables and deadlines"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Teo Jia wei"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003cimg src\u003d\"images/jiaweiteo.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "[[github](https://github.com/jiaweiteo)]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Role: Developer (In charge of Model)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Responsibilities: Scheduling and tracking, Documentation, Integration"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Timothy Ong Jing Kai"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003cimg src\u003d\"images/timjkong.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "[[github](http://github.com/timjkong)]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Role:  Developer (In charge of Logic)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Responsibilities: Code quality"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "### Toh Xuan Ning Jeanne"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "\u003cimg src\u003d\"images/jeannetoh99.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "[[github](http://github.com/jeannetoh99)]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Role: Developer (In charge of Ui)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* Responsibilities: Documentation"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 20,
      "lyeyixian": 10,
      "-": 34
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/se-edu/addressbook-level3/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "[`Ui.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[`Logic.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a person)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Model.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the address book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `AddressBook`, which `Person` references. This allows `AddressBook` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "**API** : [`Storage.java`](https://github.com/se-edu/addressbook-level3/tree/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the address book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "#### Proposed Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedAddressBook`. It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` — Saves the current address book state in its history."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` — Restores the previous address book state from its history."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` — Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new person. The `add` command also calls `Model#commitAddressBook()`, causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "Step 4. The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial AddressBook state, then there are no previous AddressBook states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone AddressBook states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the address book, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "##### Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "### \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Need a place to their store travel plans in an organised manner"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* CLI proficient"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Value proposition**:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "* Manage travel plans faster and wishlist faster than using Excel sheets/Mouse-driven Apps"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                     | So that I can…​                                                        |"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "| -------- | ------------------------------------------ | ------------------------------ | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | new user                                   | read the user guide            | be familiar with the usages and features                |"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | user                                       | save travel activities in a wishlist               | use it for future travel plans      |"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | user                                       | add items to a travel plan             | note down important items related to my travel plan      |"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | user                                       | delete an item       | remove unwanted items              |"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | user                                       | modify an item       | edit any last minute changes              |"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | frequent user                                       | have a list of items    | easily see my travel plans              |"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* * *`  | user                                       | be able to switch between travel plans   | navigate to travel plans easily              |"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | add notes to each travel plan  | refer to them while travelling                          |"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | input accommodation details         | easily remember where I am going to stay           |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | input cost of activity  | track the price of each activities easily                      |"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | input timing to an activity         | create a schedule for my travel plan               |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | record essential personal details         | have a easy time in making bookings using these details             |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | sort items  | view my items in a preferred manner            |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `* *`    | user                                       | create priority levels for activities | rank the level of importance of each activities    |"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `*`      | advanced user                              | have shortcuts for commands  | execute commands faster proficiently    |"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "| `*`      | user                                       | have a feature to search  | find and filter my desired items efficiently  |"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "(For all use cases below, the **System** is the `Wanderlust` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC01 - Navigate to a specific travel plan**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1.  User requests to navigate to a specific travel plan"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "2.  Wanderlust shows that the current directory is on that travel plan"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1a. The specific travel plan doesn\u0027t exist."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC02 - Navigate to the wishlist**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1.  User requests to navigate to the wishlist"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "2.  Wanderlust shows that the current directory is on the wishlist"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC03 - Add a travel plan**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1.  User requests to add a travel plan"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "2.  Wanderlust shows the newly created travel plan"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1a. The input command format is invalid."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC04 - Add an activity**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "2.  User requests to add an activity"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "3.  Wanderlust shows the added activities in the current directory"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1a. User is at the top directory."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. User requests to add an activity."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1b. User \u003cins\u003enavigates to the wishlist (UC2)\u003c/ins\u003e."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC05 - Add an accommodation**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "2.  User requests to add an accommodation"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "3.  Wanderlust shows the added accommodation in the current travel plan"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1a. User is at the top directory."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. User requests to add accommodation."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC06 - Add a person**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "2.  User requests to add a person"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "3.  Wanderlust shows the added person in the current travel plan"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1a. User is at the top directory."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. User requests to add a person."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC07 - Delete a travel plan**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1.  User requests to delete a travel plan"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "2.  Wanderlust shows that the travel plan has been deleted."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1a. The input command format is invalid."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1b. The travel plan specified does not exist."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC08 - Delete an activity**"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "2.  User requests to delete an activity"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "3.  Wanderlust shows that the activity has been deleted"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1a. User is at the top directory."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. User requests to delete an activity."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1b. User \u003cins\u003enavigates to the wishlist (UC2)\u003c/ins\u003e."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2b. The activity specified does not exist."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC09 - Delete an accommodation**"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "2.  User requests to delete an accommodation"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "3.  Wanderlust shows that the accommodation has been deleted"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1a. User is at the top directory."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. User requests to delete accommodation."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2b. The accommodation specified does not exist."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Use case: UC10 - Delete a person**"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "2.  User requests to delete a person"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "3.  Wanderlust shows that the person has been deleted"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 1a. User is at the top directory."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a1. User requests to delete a person."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "* 2b. The person specified does not exist."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "**Use case: UC11 - Edit a travel plan**"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "1. User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "2. User requests to edit travel plan"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "3. Wanderlust shows that the travel plan has been edited"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "*  1a. User is at the top directory."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "     Use case resumes at step 2."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "* 2b. The travel plan specified does not exist."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "**Use case: UC12 - Edit an activity**"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "2.  User requests to edit an activity"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "3.  Wanderlust shows that the activity has been edited"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User is at the top directory."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1a1. User requests to edit an activity."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "     Use case ends."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "* 1b. User \u003cins\u003enavigates to the wishlist (UC2)\u003c/ins\u003e."
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "     Use case resumes at step 2."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "* 2b. The activity specified does not exist."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "**Use case: UC13 - Edit an accommodation**"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "2.  User requests to edit an accommodation"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "3.  Wanderlust shows that the accommodation has been edited"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User is at the top directory."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1a1. User requests to edit accommodation."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "* 2b. The accommodation specified does not exist."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "**Use case: UC14 - Edit a person**"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "2.  User requests to edit a person"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "3.  Wanderlust shows that the person has been edited"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User is at the top directory."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1a1. User requests to edit a person."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "* 2b. The person specified does not exist."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "    * 2b1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "**Use case: UC15 - View activities**"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "2.  User requests to view activities"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "3.  Wanderlust shows the list of activities"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User is at the top directory."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1a1. User requests to view activities."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "* 1b. User \u003cins\u003enavigates to the wishlist (UC2)\u003c/ins\u003e."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case resumes at step 2."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "**Use case: UC16 - View contacts in travel plan**"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "2.  User requests to view contacts"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "3.  Wanderlust shows the list of contacts"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User is at the top directory."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1a1. User requests to view contacts."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "**Use case: UC17 - View accommodation in travel plan**"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User \u003cins\u003enavigates to a specific travel plan (UC1)\u003c/ins\u003e"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "2.  User requests to view accommodation"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "3.  Wanderlust shows the list of accommodation"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. User is at the top directory."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1a1. User requests to view accommodation."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "    * 1a2. Wanderlust shows an error message."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The input command format is invalid."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "    * 2a1. Wanderlust shows an error message."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "### Non-Functional Requirements"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "timjkong"
        },
        "content": "1.  Should work on any mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "timjkong"
        },
        "content": "2.  The travel planner should be able to hold up to 1000 activities without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "timjkong"
        },
        "content": "3.  Should be able to respond to user commands within 1 second."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "timjkong"
        },
        "content": "4.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "timjkong"
        },
        "content": "5.  Should be a single-user product."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "timjkong"
        },
        "content": "6.  Users familiar with JSON should be able to read and edit the storage file."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "timjkong"
        },
        "content": "7.  Should work without internet connection."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "* **Private contact detail**: A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "* **Wishlist**: A list of potential activities"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "* **Travel plan**: A list of accommodations and activities in a specified location that can include `start_date` and `end_date`"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "* **Activity**: Minimally includes the `name`, we can add information about level of importance, `cost`, `location`, `timestamp` and `tags` to it"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "* **Accommodation**: Minimally includes the `name`, we can add information about `location`, `cost` and `nights` to it"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "* **Person**: Contains information about a given person `name`, `mobile number` and `passport number`"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "* **Directory**: The three possible directories are `top`, `travelplan`, `wishlist`"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "* **Navigate**: Use the `goto` command to move between directories"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "* **View**: Use the `show` command to provide a list of specified items"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "### Deleting a person"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "1. Deleting a person while all persons are being shown"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "1. _{ more test cases …​ }_"
      }
    ],
    "authorContributionMap": {
      "timjkong": 7,
      "jiaweiteo": 20,
      "lyeyixian": 205,
      "-": 534
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "# Wanderlust v1.2 User Guide"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Introduction"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "WanderLust helps tech-savvy travellers to plan their trips in a structured and efficient manner by providing them with a holistic travel planner."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "It is optimized for CLI users so that destinations and details can be added faster by typing in commands."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* [Introduction](#introduction)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* [Setting Up \\[Coming soon\\]](#setting-up-coming-soon)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* [Command Summary](#command-summary)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* [Tags](#tags)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Activity Tag](#activity-tag)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Accommodation Tag](#accommodation-tag)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Person Tag](#person-tag)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Travel Plan Tag](#travel-plan-tag)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Wishlist Tag](#wishlist-tag)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* [Features](#features)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Goto](#goto)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        1. [Goto a Travel Plan (G)](#1-goto-a-travel-plan-g)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        2. [Goto Wishlist (G)](#2-goto-wishlist-g)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Add](#add)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        1. [Adding a Travel Plan (G)](#1-adding-a-travel-plan-g)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        2. [Adding an Activity (L)](#2-adding-an-activity-l)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        3. [Adding an Accommodation (L)](#3-adding-an-accommodation-l)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        4. [Adding a Person (L)](#4-adding-a-person-l)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Delete](#delete)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        1. [Deleting a Travel Plan (G)](#1-deleting-a-travel-plan-g)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        2. [Deleting an Activity (L)](#2-deleting-an-activity-l)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        3. [Deleting an Accommodation (L)](#3-deleting-an-accommodation-l)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        4. [Deleting a Person (L)](#4-deleting-a-person-l)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Edit](#edit)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        1. [Editing a Travel Plan (G)](#1-editing-a-travel-plan-g)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        2. [Editing an Activity (L)](#2-editing-an-activity-l)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        3. [Editing an Accommodation (L)](#3-editing-an-accommodation-l)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        4. [Editing a Person (L)](#4-editing-a-person-l)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    * [Show](#show)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        1. [Viewing the Wishlist (G)](#1-viewing-the-wishlist-g)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        2. [Viewing Activities in a Travel Plan (G)](#2-viewing-activities-in-a-travel-plan-g)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        3. [Viewing Contacts in a Travel Plan (L)](#3-viewing-contacts-in-a-travel-plan-l)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        4. [Viewing Accommodations in a Travel Plan (L)](#4-viewing-accommodations-in-a-travel-plan-l)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        5. [Viewing Activities in current directory (L)](#5-viewing-activities-in-current-directory-l)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "* [FAQ \\[Coming soon\\]](#faq-coming-soon)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Setting up [Coming soon]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Command Summary"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "There are a total of 5 general commands."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The table briefly describes the commands and its usage. Full details will be given in the next section."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Command | Parameters | Description"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "------------ | ------------- | -------------"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`add -OBJECT` | `OBJECT` activity/ accommodation/ person/ travelplan | Creates the given object type"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`delete -OBJECT` | `OBJECT` activity/ accommodation/ person/ travelplan | Deletes the given object type"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`edit -OBJECT` | `OBJECT` activity/ accommodation/ person/ travelplan | Edits the details of the given object type"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`goto PLAN_NAME` | `PLAN_NAME` nameOfTravelPlan/ wishlist | Navigate to the specific travel plan/ wishlist"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "`show LIST_OF_OBJECTS` | `LIST_OF_OBJECTS` wishlist / nameOfTravelPlan / contacts / accommodation / \\\u003cempty\\\u003e / | Show the specific list of objects given. If \\\u003clistOfObjects\\\u003e is empty, WanderLust will show the current travel plan the user is at."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Tags"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "The table below shows the type of tag each different object can be assigned to."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Do note that tags are optional when creating the object."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Activity Tag"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Name of Tag | Description"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`l/LOCATION` | Location/ Address of the activity."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`i/LEVEL_OF_IMPORTANCE` | The priority assigned to the activity."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`c/cost` | Cost of the activity, if any."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`d/DATE_AND_TIME` | Date and Time intended to do the activity. Format of date is in DD-MM-YYYY and format of time is HHMM (24h clock)."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Accommodation Tag"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Name of Tag | Description"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`l/LOCATION` | Location/ Address of the accommodation."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`n/NIGHTS` | Number of nights to be spent in the accommodation."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`c/cost` | Cost of the accommodation, if any."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Person Tag"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Name of Tag | Description"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`m/MOBILE_NUMBER` | Mobile number of the person cell phone"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`p/PASSPORT_NUMBER` | Passport number of the person passport"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Travel Plan Tag"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Name of Tag | Description"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`sd/START_DATE` | Start date of travel in the format of DD-MM-YYYY"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`ed/END_DATE | End date of travel in the format of DD-MM-YYYY"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "#### Wishlist Tag"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Name of Tag | Description"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "------------ | -------------"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`l/LOCATION` | Location/ Address of the activity."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`i/LEVEL_OF_IMPORTANCE` | The priority assigned to the activity."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "`c/cost` | Cost of the activity, if any."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-info\"\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "**Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  e.g. in `add -activity n/NAME`, `NAME` is a parameter which can be used as `add -activity n/Cultural Visit`."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "  e.g `n/NAME [l/LOCATION]` can be used as `n/Cultural Visit l/Lourve Museum` or as `n/Cultural Visit`."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "## Goto"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "The goto command is used to navigate to various directories within the travel planner. The GUI display depends on the"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "state of the current directory, which is changed using the goto command. On start, the default directory of the program"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "is `wishlist`.\u003cbr/\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003eDirectories in Wanderlust include:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003e1. `wishlist`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003e2. `NAME_OF_TRAVEL_PLAN`\u003cbr/\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "This allows users to easily add, delete, view and edit information within the wishlist or a specific travel plan without"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "having to type their names in each command. This also means that **some commands can only be used locally within a"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "certain directory, and responses to these commands will depend on the current directory.** Commands that can be used"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "globally and locally are tagged (G) and (L) respectively in the **features section** of this user guide. \u003cbr/\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### 1. Goto a Travel Plan (G)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Navigates the UI to a specific travel plan.\u003cbr/\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Format: `goto NAME_OF_TRAVEL_PLAN`\u003cbr/\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Example: `goto Europe`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "### 2. Goto Wishlist (G)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Navigates the UI to the wishlist.\u003cbr/\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Format: `goto wishlist`\u003cbr/\u003e"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "Example: `goto wishlist`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## Add"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### 1. Adding a Travel Plan (G)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Creates a new travel plan and adds it to Wanderlust’s travel planner."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Start and end date can be optional, but they must exist as a pair. Format of date is in DD-MM-YYYY."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `add -travelplan n/NAME [sd/START_DATE ed/END_DATE]`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Example: `add -travelplan n/France sd/15-09-2020 ed/30-09-2020`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### 2. Adding an Activity (L)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Creates a new activity and adds it to the travel plan/wishlist in the current directory.  Date and time can be optional, but they must exist as a pair."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format of date is in DD-MM-YYYY and format of time is HHMM (24h clock)."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add -activity n/NAME [i/LEVEL_OF_IMPORTANCE] [l/LOCATION] [c/COST] [d/DATE_AND_TIME] [t/tags]`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Example: `add -activity n/Universal Studios Singapore i/5 l/Sentosa c/SGD88 d/16-09-2020 t/1000`"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### 3. Adding an Accommodation (L)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Creates new accommodation that contains information about the place of stay and adds it to the travel plan in the current directory."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "This command can only be used within a travel plan. Use goto NAME_OF_TRAVEL_PLAN before adding accommodations."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `add -accommodation n/NAME [l/LOCATION] [c/COST] [n/NIGHTS]`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "### 4. Adding a Person (L)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Creates a person object that contains basic information about the user and"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "other travellers and adds it to the travel plan in the current directory."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Format: `add -person n/NAME [m/MOBILE_NUMBER] [p/PASSPORT_NUMBER]`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "Example: `add -person n/John m/81234567 p/E1234567H`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "timjkong"
        },
        "content": "## Delete"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 1. Deleting a Travel Plan (G)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Deletes a TravelPlan object. Users must include either the name or the index of the travel plan."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Format: `delete -travelplan n/NAME​`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example: `delete -travelplan n/France`"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 2. Deleting an Activity (L)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Deletes an Activity object from the travel plan/wishlist in the current directory.  Users must include the name of activity or the corresponding index."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Format: `delete -activity n/NAME`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example: `delete -activity n/Universal Studios Singapore`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 3. Deleting an Accommodation (L)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Deletes an Accommodation object from the travel plan in the current directory. Command must include the name of the accommodation or the corresponding index."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "timjkong"
        },
        "content": "_This command can only be used within a travel plan. Use goto NAME_OF_TRAVEL_PLAN before deleting accommodations._"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Format: `delete -accommodation n/NAME​`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example: `delete -accommodation n/Hard Rock Hotel`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "timjkong"
        },
        "content": "### 4. Deleting a Person (L)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Deletes a Person object from the travel plan in the current directory. Command must include the name of the Person object or the corresponding index."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "timjkong"
        },
        "content": "_This command can only be used within a travel plan. Use goto NAME_OF_TRAVEL_PLAN before deleting a person._"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Format: `delete -person n/NAME`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "timjkong"
        },
        "content": "Example: `delete -person n/John`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "## Edit"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "#### 1. Editing a TravelPlan (G)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing TravelPlan in the address book."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit -travelplan INDEX n/NAME [sd/START_DATE ed/END_DATE]​`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the TravelPlan at the specified `INDEX` or name."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Users must include the name of the travel plan or the corresponding index."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "* Format of date is in DD-MM-YYYY"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit -travelplan n/France sd/15-09-2020 ed/30-09-2020` Edits the start date and end date of the `France` TravelPlan."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "#### 2. Editing an Activity (L)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing Activity in the address book and updates the travel plan/wishlist in the current directory"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit -activity INDEX n/NAME [i/LEVEL_OF_IMPORTANCE] [l/LOCATION] [c/COST] [d/DATE_AND_TIME]​`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* Navigate to specified travel plan or wishlist."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the Activity at the specified `INDEX` or name."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed activity list. The index **must be a positive integer** 1, 2, 3, ,,,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "* Users must include the name of activity or the corresponding index."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* Format of date is in DD-MM-YYYY and format of time is HHMM (24h clock)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit -activity n/Universal Studios Singapore i/5 l/Sentosa d/16-09-2020` Edits the location and date of the `Universal Studios Singapore` activity"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit -activity 2 n/Singapore Zoo t/Animals` Edits the tag of the 2nd Activity to be `Animals` and clears all existing tags."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "#### 3. Editing an Accommodation (L)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "Edits existing Accommodation in the address book. This command can only be used within a travel plan."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit -accommodation INDEX n/NAME [l/LOCATION] [c/COST] [n/NIGHTS]​`"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* User navigates to specified travel plan."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the Accommodation at the specified `INDEX` or name."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "* Users must include the name of Accommodation, or an index"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed accommodation list. The index **must be a positive integer** 1, 2, 3, ,,,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit -accommodation n/Hard Rock Hotel c/SGD500 n/2` Edits the cost and nights of `Hard Rock Hotel` Accommodation"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit -accomodation 2 c/SGD250` Edits the cost of the 2nd Accommodation to be `SGD250`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "#### 4. Editing a Person (L)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Edits existing Person in the address book. This command can only be used within a travel plan."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit -person n/NAME [m/MOBILE_NUMBER] [p/PASSPORT_NUMBER]​`"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "* Navigate to specified travel plan."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits an existing person object’s information and updates the corresponding travel plan in the current directory"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list. The index **must be a positive integer** 1, 2, 3, …​"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit -person n/John m/81234567 p/E1234567H` Edits the mobile number and passport number of `John` Person"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "*  `edit 2 m/87452183` Edits the mobile number of the 2nd person\\"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "Example: `add -accommodation n/Hard Rock Hotel l/Sentosa c/SGD500 n/2`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "## Show"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### 1. Viewing the Wishlist (G)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Shows the list of activities added to the wishlist, in the order they were added."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Format: `show wishlist`"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Example: `show wishlist`"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### 2. Viewing Activities in a Travel Plan (G)"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Shows the list of activities added to a travel plan, in the order they were added."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Format: `show NAME_OF_TRAVEL_PLAN`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Example: `show Europe Plan`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### 3. Viewing Contacts in a Travel Plan (L)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Shows the list of contacts added to the travel plan, in order they were added. \u003cbr /\u003e"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "_This command can only be used within a travel plan. Use `goto NAME_OF_TRAVEL_PLAN` before accessing contacts._"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "```"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "goto NAME_OF_TRAVEL_PLAN"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "show contacts"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "```"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "```"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "goto Europe Plan"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "show contacts"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "```"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### 4. Viewing Accommodations in a Travel Plan (L)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Shows the list of accommodations added to the travel plan, in order they were added."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "_This command can only be used within a travel plan. Use `goto NAME_OF_TRAVEL_PLAN` before accessing accommodations._"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Format:"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "```"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "goto NAME_OF_TRAVEL_PLAN"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "show accommodations"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "```"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "```"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "goto Europe Plan"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "show accommodations"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "```"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "#### 5. Viewing Activities in current directory (L)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Shows the list of activities added to the wishlist / travel plan of the current directory, in order they were added."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Format: `show`"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "Example: `show`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "## FAQ [Coming soon]"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      }
    ],
    "authorContributionMap": {
      "timjkong": 30,
      "jeannetoh99": 79,
      "jiaweiteo": 74,
      "lyeyixian": 26,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.logic.wanderlustlogic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.logic.wanderlustlogic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.TravelPlanner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.util.SampleWanderlustDataUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.storage.travelplanner.JsonTravelPlannerStorage;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.storage.travelplanner.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.storage.travelplanner.Storage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.storage.travelplanner.StorageManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.storage.travelplanner.TravelPlannerStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.storage.travelplanner.UserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing Wanderlust ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlannerStorage travelPlannerStorage \u003d new JsonTravelPlannerStorage(userPrefs.getTravelPlannerFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        storage \u003d new StorageManager(travelPlannerStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s travel planner and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The data from the sample travel planner will be used instead if {@code storage}\u0027s travel planner is not found,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * or an empty travel planner will be used instead if errors occur when reading {@code storage}\u0027s travel planner."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Optional\u003cReadOnlyTravelPlanner\u003e travelPlannerOptional;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ReadOnlyTravelPlanner initialData;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            travelPlannerOptional \u003d storage.readTravelPlanner();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (!travelPlannerOptional.isPresent()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample TravelPlanner\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            initialData \u003d travelPlannerOptional.orElseGet(SampleWanderlustDataUtil::getSampleTravelPlanner);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty TravelPlanner\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            initialData \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TravelPlanner\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            initialData \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty TravelPlanner\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        logger.info(\"Starting Wanderlust \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Wanderlust ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 34,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_INVALID_ACCOMMODATION_DISPLAYED_INDEX \u003d \"The accommodation index \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX \u003d \"The activity index provided is invalid\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_INVALID_FRIEND_DISPLAYED_INDEX \u003d \"The friend index provided is invalid\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX \u003d \"The travel plan index provided is invalid\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 6,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_IMPORTANCE \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_MOBILE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_PASSPORT \u003d new Prefix(\"P/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_START \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_END \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 8,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.Directory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the TravelPlanner."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @see seedu.address.model.travelplanner.Model#getTravelPlanner()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    ReadOnlyTravelPlanner getTravelPlanner();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of travelPlans. */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cTravelPlan\u003e getFilteredTravelPlanList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of wishlist activities. */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredWishlist();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of activities. */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of accommodations. */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cAccommodation\u003e getFilteredAccommodationList();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of friends. */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cFriend\u003e getFilteredFriendList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the current directory."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    Directory getDirectory();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns the user prefs\u0027 address book file path."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    Path getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 25,
      "jiaweiteo": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustparser.WanderlustParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.Directory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.storage.travelplanner.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final WanderlustParser wanderlustParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        wanderlustParser \u003d new WanderlustParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Command command \u003d wanderlustParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            storage.saveTravelPlanner(model.getTravelPlanner());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public ReadOnlyTravelPlanner getTravelPlanner() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return model.getTravelPlanner();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlan\u003e getFilteredTravelPlanList() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return model.getFilteredTravelPlanList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredWishlist() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return model.getFilteredWishlist();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return model.getFilteredActivityList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getFilteredAccommodationList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return model.getFilteredAccommodationList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cFriend\u003e getFilteredFriendList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return model.getFilteredFriendList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Directory getDirectory() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return model.getDirectory();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Path getTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return model.getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 38,
      "jiaweiteo": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        //To add"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.setTravelPlan(new TravelPlan(new Name(\"Dummy\"), new WanderlustDate(\"0\"), new WanderlustDate(\"0\")),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                new TravelPlan(null, null, null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this(feedbackToUser, false, false);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"by the index number used in the displayed person list. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003c? extends TravelPlanObject\u003e lastShownList \u003d model.getFilteredActivityList(); //dummy code"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX); //dummy code"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        TravelPlanObject personToEdit \u003d lastShownList.get(index.getZeroBased()); //dummy code"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, personToEdit)); //dummy code"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "         */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "jiaweiteo": 218
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        //model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                //String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, 5)); //dummy code"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        //        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/delete/DeleteAccommodationCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DeleteAccommodationCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"accommodation\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \": Deletes the accommodation identified by the index number used in the displayed accommodation list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_DELETE_ACCOMMODATION_SUCCESS \u003d \"Deleted Accommodation: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for Delete Accommodation Command"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param targetIndex index to be deleted"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DeleteAccommodationCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003c? extends TravelPlanObject\u003e filteredAccommodationList \u003d model.getFilteredAccommodationList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredAccommodationList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACCOMMODATION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlanObject accommodationToDelete \u003d filteredAccommodationList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.deleteTravelPlanObject(accommodationToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACCOMMODATION_SUCCESS, accommodationToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof DeleteAccommodationCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteAccommodationCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "jiaweiteo": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/delete/DeleteActivityCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DeleteActivityCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"activity\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \": Deletes the activity identified by the index number used in the displayed travel plan list.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_DELETE_ACTIVITY_SUCCESS \u003d \"Deleted Activity: %1$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for DeleteActivityCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param targetIndex index to be deleted."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DeleteActivityCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003c? extends TravelPlanObject\u003e filteredActivityList \u003d model.getFilteredActivityList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredActivityList.size()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ACTIVITY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlanObject activityToDelete \u003d filteredActivityList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.deleteTravelPlanObject(activityToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ACTIVITY_SUCCESS, activityToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof DeleteActivityCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteActivityCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "jiaweiteo": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/delete/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.Command;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.CommandResult;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Deletes a travel plan object identified using it\u0027s displayed index from the travel plans."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public abstract class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \": Deletes the person identified by the index number used in the displayed person list.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    protected final Index targetIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/delete/DeleteFriendCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DeleteFriendCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"friend\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \": Deletes the friend identified by the index number used in the displayed travel plan list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_DELETE_FRIEND_SUCCESS \u003d \"Deleted Friend: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for delete friend command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param targetIndex index to be deleted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DeleteFriendCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003c? extends TravelPlanObject\u003e filteredFriendList \u003d model.getFilteredFriendList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredFriendList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_FRIEND_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlanObject friendToDelete \u003d filteredFriendList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.deleteTravelPlanObject(friendToDelete);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_FRIEND_SUCCESS, friendToDelete));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof DeleteFriendCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteFriendCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "jiaweiteo": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/delete/DeleteTravelPlanCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands.delete;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.travelplanner.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DeleteTravelPlanCommand extends DeleteCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"travelplan\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \": Deletes the travel plan identified by the index number used in the displayed travel planner list.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_DELETE_TRAVELPLAN_SUCCESS \u003d \"Deleted Travel Plan: %1$s\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructor for delete travel plan command."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param targetIndex index to be deleted."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DeleteTravelPlanCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(targetIndex);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cTravelPlan\u003e lastShownList \u003d model.getFilteredTravelPlanList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TRAVELPLAN_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        TravelPlan travelPlanToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        model.deleteTravelPlan(travelPlanToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_TRAVELPLAN_SUCCESS, travelPlanToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof DeleteTravelPlanCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteTravelPlanCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustcommands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustparser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustparser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 148
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustparser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_IMPORTANCE \u003d new Prefix(\"i/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_DATETIME \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_MOBILE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_PASSPORT \u003d new Prefix(\"P/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_START \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final Prefix PREFIX_END \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustparser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustparser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!(obj instanceof seedu.address.logic.parser.Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        seedu.address.logic.parser.Prefix otherPrefix \u003d (seedu.address.logic.parser.Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustparser/WanderlustAddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.wanderlustlogic.wanderlustparser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.wanderlustlogic.wanderlustparser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.wanderlustlogic.wanderlustparser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.wanderlustlogic.wanderlustparser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.wanderlustlogic.wanderlustparser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class WanderlustAddCommandParser implements WanderlustParserInterface\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Person person \u003d new Person(name, phone, email, address, tagList);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new AddCommand(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustparser/WanderlustDeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.delete.DeleteAccommodationCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.delete.DeleteActivityCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.delete.DeleteFriendCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.delete.DeleteTravelPlanCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class WanderlustDeleteCommandParser implements WanderlustParserInterface\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            String[] keywords \u003d args.split(\" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            String deleteType \u003d keywords[1].substring(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(keywords[2]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            switch (deleteType) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case DeleteActivityCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new DeleteActivityCommand(index);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case DeleteAccommodationCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new DeleteAccommodationCommand(index);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case DeleteFriendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new DeleteFriendCommand(index);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            case DeleteTravelPlanCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                return new DeleteTravelPlanCommand(index);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "jiaweiteo": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustparser/WanderlustEditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.wanderlustlogic.wanderlustparser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.wanderlustlogic.wanderlustparser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.wanderlustlogic.wanderlustparser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.wanderlustlogic.wanderlustparser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.logic.wanderlustlogic.wanderlustparser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class WanderlustEditCommandParser implements WanderlustParserInterface\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            editPersonDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            editPersonDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            editPersonDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            editPersonDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustparser/WanderlustFindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class WanderlustFindCommandParser implements WanderlustParserInterface\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustparser/WanderlustParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.HelpCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.ListCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.delete.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class WanderlustParser {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new WanderlustAddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new WanderlustEditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new WanderlustDeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new WanderlustFindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustparser/WanderlustParserInterface.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustparser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public interface WanderlustParserInterface\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/wanderlustlogic/wanderlustparser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.logic.wanderlustlogic.wanderlustparser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/accommodation/Accommodation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.model.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Represents an Accommodation in the travel plan."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Accommodation extends TravelPlanObject {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // identity fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final WanderlustDate startDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final WanderlustDate endDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // attributes"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Cost cost;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Accommodation(Name name, WanderlustDate startDate, WanderlustDate endDate, Cost cost, Location location) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireAllNonNull(name, startDate, endDate, cost, location);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public WanderlustDate getStartDate() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public WanderlustDate getEndDate() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Cost getCost() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /** Returns true if both accommodations have the same name, startDate and endDate fields. */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean isSameAccommodation(Accommodation otherAccommodation) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (otherAccommodation \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return otherAccommodation !\u003d null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getName().equals(getName())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getEndDate().equals(getEndDate());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Returns true if both accommodations have identical fields."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * This defines a stronger notion of equality between two accommodations."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!(other instanceof Accommodation)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        Accommodation otherAccommodation \u003d (Accommodation) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return otherAccommodation.getName().equals(getName())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getCost().equals(getCost())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                \u0026\u0026 otherAccommodation.getLocation().equals(getLocation());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return Objects.hash(name, startDate, endDate, cost, location);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(\" - \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(getEndDate())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(\" Cost: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                .append(getCost());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 105,
      "jeannetoh99": 4,
      "lyeyixian": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/accommodation/UniqueAccommodationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.model.accommodation;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.accommodation.exceptions.AccommodationNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "timjkong"
        },
        "content": "import seedu.address.model.accommodation.exceptions.DuplicateAccommodationException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * A list of accommodations that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * An accommodation is considered unique by comparing using {@code Accommodation#isSameAccommodation(Accommodation)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * As such, adding and updating of accommodation uses Accommodation#isSameAccommodation(Accommodation) for equality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * so as to ensure that the accommodation being added or updated is unique in terms of identity in the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * UniqueAccommodationList. However, the removal of an accommodation uses Accommodation#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * as to ensure that the accommodation with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "timjkong"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "timjkong"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * @see Accommodation#isSameAccommodation(Accommodation)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class UniqueAccommodationList implements Iterable\u003cAccommodation\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final ObservableList\u003cAccommodation\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private final ObservableList\u003cAccommodation\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Returns true if the list contains an equivalent accommodation as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean contains(Accommodation toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAccommodation);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Adds an accommodation to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * The accommodation must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void add(Accommodation toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DuplicateAccommodationException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Replaces the accommodation {@code target} in the list with {@code editedAccommodation}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * The accommodation identity of {@code editedAccommodation} must not be the same as"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * another existing accommodation in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodation(Accommodation target, Accommodation editedAccommodation) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireAllNonNull(target, editedAccommodation);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new AccommodationNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!target.isSameAccommodation(editedAccommodation) \u0026\u0026 contains(editedAccommodation)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DuplicateAccommodationException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        internalList.set(index, editedAccommodation);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Removes the equivalent accommodation from the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * The accommodation must exist in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void remove(Accommodation toRemove) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new AccommodationNotFoundException();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodations(UniqueAccommodationList replacement) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Replaces the contents of this list with {@code accommodations}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * {@code accommodations} must not contain duplicate accommodations."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public void setAccommodations(List\u003cAccommodation\u003e accommodations) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        requireAllNonNull(accommodations);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        if (!accommodationsAreUnique(accommodations)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            throw new DuplicateAccommodationException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        internalList.setAll(accommodations);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}, with each Accommodation object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * typecast to TravelPlanObject (TPO)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlanObject\u003e asUnmodifiableObservableTpoList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return internalList.stream().map(item -\u003e (TravelPlanObject) item)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .collect(Collectors.collectingAndThen(Collectors.toList(), l -\u003e FXCollections.observableArrayList(l)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public Iterator\u003cAccommodation\u003e iterator() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                || (other instanceof UniqueAccommodationList // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueAccommodationList) other).internalList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     * Returns true if {@code accommodations} contains only unique accommodations."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "timjkong"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    private boolean accommodationsAreUnique(List\u003cAccommodation\u003e accommodations) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        for (int i \u003d 0; i \u003c accommodations.size() - 1; i++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            for (int j \u003d i + 1; j \u003c accommodations.size(); j++) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                if (accommodations.get(i).isSameAccommodation(accommodations.get(j))) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "timjkong"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "timjkong"
        },
        "content": "            }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 135,
      "jeannetoh99": 11,
      "lyeyixian": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/accommodation/exceptions/AccommodationNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.model.accommodation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Signals that the operation is unable to find the specified accommodation."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class AccommodationNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/accommodation/exceptions/DuplicateAccommodationException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "timjkong"
        },
        "content": "package seedu.address.model.accommodation.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "timjkong"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "timjkong"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Signals that the operation will result in duplicate Accommodations"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "timjkong"
        },
        "content": " * Accommodations are considered duplicates if they have the same identity."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "timjkong"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "timjkong"
        },
        "content": "public class DuplicateAccommodationException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    public DuplicateAccommodationException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "timjkong"
        },
        "content": "        super(\"Operation would result in duplicate accommodations\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "timjkong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "timjkong"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "timjkong": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Activity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Represents an Activity in the travel plan."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Activity extends TravelPlanObject {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    //Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    //Data fields"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Cost cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final Importance levelOfImportance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final WanderlustDateTime activityDateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Activity(Name name, Location location, Cost cost, Importance levelOfImportance,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    WanderlustDateTime activityDateTime) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(name, location, cost, levelOfImportance, activityDateTime);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.levelOfImportance \u003d levelOfImportance;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.activityDateTime \u003d activityDateTime;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Cost getCost() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Importance getLevelOfImportance() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return levelOfImportance;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public WanderlustDateTime getActivityDateTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return activityDateTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if both activities are of the same name."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * This defines a weaker notion of equality between two activities."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean isSameActivity(Activity otherActivity) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (otherActivity \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return otherActivity !\u003d null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 otherActivity.getName().equals(getName());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if both activities have the same identity and data fields."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * This defines a stronger notion of equality between two activities."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!(other instanceof Activity)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Activity otherActivity \u003d (Activity) other;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return otherActivity.getName().equals(getName())"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 otherActivity.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 otherActivity.getCost().equals(getCost())"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 otherActivity.getLevelOfImportance().equals(getLevelOfImportance())"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 otherActivity.getActivityDateTime().equals(getActivityDateTime());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return Objects.hash(name, location, cost, levelOfImportance, activityDateTime);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .append(\" Name: \")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .append(getLocation())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .append(\" Location: \")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .append(getLevelOfImportance())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .append(\" Importance Level: \")"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .append(getCost())"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .append(\" Cost: \")"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .append(getActivityDateTime())"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .append(\" Date and time: \");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "jiaweiteo": 108,
      "lyeyixian": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/Importance.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Represents an Activity\u0027s level of Importance in the travel plan."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidImportance(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class Importance {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            \"Importance Level should only contain numbers, and it should range from 1 - 5, with 5 being\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    + \"the most important while 1 being the least important\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[1-5]\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs a {@code Importance}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param importanceLevel A valid importance level."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Importance(String importanceLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(importanceLevel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        checkArgument(isValidImportance(importanceLevel), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        value \u003d importanceLevel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if a given string is a valid importance level."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static boolean isValidImportance(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof Importance // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 value \u003d\u003d (((Importance) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/UniqueActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * A list of activities that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * An activity is considered unique by comparing using {@code Activity#isSameActivity(Activity)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * As such, adding and updating of Activity uses Activity#isSameActivity(Activity) for equality"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * so as to ensure that the activity being added or updated is unique in terms of identity in the UniqueActivityList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * However, the removal of a activity uses Activity#equals(Object) so"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * as to ensure that the Activity with exactly the same fields will be removed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * @see Activity#isSameActivity(Activity)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class UniqueActivityList implements Iterable\u003cActivity\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final ObservableList\u003cActivity\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final ObservableList\u003cActivity\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if the list contains an equivalent activity as the given argument."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean contains(Activity toCheck) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameActivity);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Adds an activity to the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * The activity must not already exist in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void add(Activity toAdd) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Replaces the activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!target.isSameActivity(editedActivity) \u0026\u0026 contains(editedActivity)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        internalList.set(index, editedActivity);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Removes the equivalent activity from the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * The activity must exist in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void remove(Activity toRemove) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new ActivityNotFoundException();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivities(UniqueActivityList replacement) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Replaces the contents of this list with {@code activities}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireAllNonNull(activities);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        if (!activitiesAreUnique(activities)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            throw new DuplicateActivityException();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        internalList.setAll(activities);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public ObservableList\u003cActivity\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}, with each Activity object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * typecast to TravelPlanObject (TPO)."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlanObject\u003e asUnmodifiableObservableTpoList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return internalList.stream().map(item -\u003e (TravelPlanObject) item)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .collect(Collectors.collectingAndThen(Collectors.toList(), l -\u003e FXCollections.observableArrayList(l)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Iterator\u003cActivity\u003e iterator() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof UniqueActivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueActivityList) other).internalList));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if {@code persons} contains only unique activities."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private boolean activitiesAreUnique(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        for (int i \u003d 0; i \u003c activities.size() - 1; i++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            for (int j \u003d i + 1; j \u003c activities.size(); j++) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                if (activities.get(i).isSameActivity(activities.get(j))) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 13,
      "jiaweiteo": 135,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/WanderlustDateTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents a Activity\u0027s date time in a travel plan."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWanderlustDateTime(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class WanderlustDateTime {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date Time should be of the format YYYY-MM-DD HH:mm.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Date time must be in the format YYYY-MM-DD HH:mm."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final DateFormat VALID_DATE_STRING \u003d new SimpleDateFormat(\"yyyy-MM-dd HH:mm\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public final String dateTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final LocalDateTime value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructs a {@code WanderlustDateTime}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @param dateTime A valid date and time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public WanderlustDateTime(String dateTime) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(dateTime);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        checkArgument(isValidWanderlustDateTime(dateTime), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        value \u003d LocalDateTime.parse(dateTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns if a given string is a valid activity date time."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static boolean isValidWanderlustDateTime(String test) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            VALID_DATE_STRING.parse(test);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public LocalDateTime getValue() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return value.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                || (other instanceof WanderlustDateTime // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 dateTime.equals(((WanderlustDateTime) other).dateTime)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "lyeyixian": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/exceptions/ActivityNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Signals that the operation is unable to find the specified activity."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ActivityNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/activity/exceptions/DuplicateActivityException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Signals that the operation will result in duplicate Activities"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * (Activities are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class DuplicateActivityException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public DuplicateActivityException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(\"Operation would result in duplicate activities\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "jiaweiteo": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Cost.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents activity\u0027s or accommodation\u0027s cost in the travel plan."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCost(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class Cost {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            \"Cost should only contain numbers, and it should be a positive integer\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Digit}+(.\\\\p{Digit}\\\\p{Digit})?\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs a {@code Cost}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param cost A valid cost."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Cost(String cost) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        checkArgument(isValidCost(cost), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        value \u003d cost;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if a given string is a valid cost."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static boolean isValidCost(String test) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof Cost // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 value.equals(((Cost) other).value)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 53,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Represents Activity\u0027s or Accommodation\u0027s location in the Travel plan."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Location can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(\\\\p{Graph}+\\\\p{Space}?)+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param location A valid address."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "jiaweiteo": 54,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents activity\u0027s or accommodation\u0027s or friend\u0027s name in the Travel Plan and also travel plan\u0027s name."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \"Names should only contain alphanumeric characters, punctuations and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * The first character of the Name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(\\\\p{Alnum}(\\\\p{Alnum}|\u0027|,)*\\\\p{Space}?)+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                \u0026\u0026 name.equals(((Name) other).name)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return name.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "jiaweiteo": 52,
      "lyeyixian": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/NameContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Tests that a {@code TravelPlanObject}\u0027s or {@code TravelPlan}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cObject\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean test(Object obj) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (obj instanceof TravelPlan) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(((TravelPlan) obj).getName().name, keyword));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } else if (obj instanceof TravelPlanObject) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return keywords.stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    .anyMatch(keyword -\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                            StringUtil.containsWordIgnoreCase(((TravelPlanObject) obj).getName().name, keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                \u0026\u0026 keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 27,
      "lyeyixian": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/ReadOnlyActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public interface ReadOnlyActivityList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns an unmodifiable view of the activities list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * This list will not contain any duplicate activities."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableList\u003cActivity\u003e getActivityList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 8,
      "lyeyixian": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/TravelPlanObject.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public abstract class TravelPlanObject {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public abstract Name getName();"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/WanderlustDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Represents a TravelPlan\u0027s start/end date in the travel planner."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidWanderlustDate(String)}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class WanderlustDate {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should be of the format YYYY-MM-DD.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Dates must be in the format YYYY-MM-DD."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{4}-[01]\\\\d-[0-3]\\\\d\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final DateFormat VALID_DATE_STRING \u003d new SimpleDateFormat(\"yyyy-MM-dd\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final LocalDate value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Constructs a {@code WanderlustDate}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @param date A valid travel date."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public WanderlustDate(String date) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        checkArgument(isValidWanderlustDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        value \u003d LocalDate.parse(date);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns if a given string is a valid travel date."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static boolean isValidWanderlustDate(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            VALID_DATE_STRING.parse(test);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } catch (ParseException ex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public LocalDate getValue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return value.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof WanderlustDate // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 value.equals(((WanderlustDate) other).value)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 73,
      "lyeyixian": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/friend/Friend.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.friend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents a Friend in the travel plan."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Friend extends TravelPlanObject {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Passport passport;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Friend(Name name, Passport passport, Phone phone) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, passport, phone);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.passport \u003d passport;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public Passport getPassport() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return passport;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both friends are of the same name"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSameFriend(Friend otherFriend) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherFriend \u003d\u003d this) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherFriend !\u003d null"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherFriend.getName().equals(getName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if both friends have the same identity and data fields."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * This defines a stronger notion of equality between two friends."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Friend)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Friend otherFriend \u003d (Friend) other;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherFriend.getName().equals(getName())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherFriend.getPassport().equals(getPassport())"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherFriend.getPhone().equals(getPhone());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, passport, phone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Passport number: \")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPassport())"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Mobile phone: \")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "lyeyixian": 4,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/model/friend/Passport.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.friend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents a Person\u0027s passport in the travel plan."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPassport(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Passport {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Passport numbers should only contain 1 character and 7 numbers\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\w\\\\d{7}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Passport}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param passport A valid passport."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Passport(String passport) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(passport);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPassport(passport), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d passport;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if a given string is a valid passport."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPassport(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof Passport // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 value.equals(((Passport) other).value)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "lyeyixian": 2,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/friend/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.friend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents a Friend\u0027s phone number in the travel plan."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 8 digits long\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{8,}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/model/friend/UniqueFriendList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.friend;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.friend.exceptions.DuplicateFriendException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.friend.exceptions.FriendNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of friends that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A friend is considered unique by comparing using {@code Friend#isSameFriend(Friend)}. As such, adding and updating of"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * friends uses Friend#isSameFriend(Friend) for equality so as to ensure that the friend being added or updated is"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * unique in terms of identity in the UniqueFriendList. However, the removal of a person uses Friend#equals(Object) so"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * as to ensure that the friend with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Friend#isSameFriend(Friend)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueFriendList implements Iterable\u003cFriend\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cFriend\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cFriend\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent friend as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Friend toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameFriend);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a friend to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The friend must not already exist in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Friend toAdd) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateFriendException();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the friend {@code target} in the list with {@code editedFriend}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * The friend identity of {@code editedFriend} must not be the same as another existing friend in the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFriend(Friend target, Friend editedFriend) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedFriend);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FriendNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.isSameFriend(editedFriend) \u0026\u0026 contains(editedFriend)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateFriendException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedFriend);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent friend from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * The friend must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove(Friend toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new FriendNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFriends(UniqueFriendList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of this list with {@code friends}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code friends} must not contain duplicate friends."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFriends(List\u003cFriend\u003e friends) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(friends);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!friendsAreUnique(friends)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateFriendException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(friends);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cFriend\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}, with each Friend object"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * typecast to TravelPlanObject (TPO)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlanObject\u003e asUnmodifiableObservableTpoList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return internalList.stream().map(item -\u003e (TravelPlanObject) item)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .collect(Collectors.collectingAndThen(Collectors.toList(), l -\u003e FXCollections.observableArrayList(l)));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cFriend\u003e iterator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueFriendList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueFriendList) other).internalList));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code friends} contains only unique friends."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private boolean friendsAreUnique(List\u003cFriend\u003e friends) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c friends.size() - 1; i++) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int j \u003d i + 1; j \u003c friends.size(); j++) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                if (friends.get(i).isSameFriend(friends.get(j))) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 13,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/model/friend/exceptions/DuplicateFriendException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.friend.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Friends (Friends are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicateFriendException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicateFriendException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(\"This operation will result in duplicate friends\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/AccommodationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.UniqueAccommodationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents the list of Accommodations in a travel plan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Duplicates are not allowed (by .isSameAccommodation comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class AccommodationList implements ReadOnlyAccommodationList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final ObservableList\u003cAccommodation\u003e EMPTY_ACCOMMODATION_LIST \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new AccommodationList().getAccommodationList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final UniqueAccommodationList accommodations;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodations \u003d new UniqueAccommodationList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public AccommodationList() {}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Creates an AccommodationList using the Accommodations in the {@code toBeCopied}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public AccommodationList(ReadOnlyAccommodationList toBeCopied) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the contents of the accommodation list with {@code accommodations}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code accommodations} must not contain duplicate accommodations."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setAccommodations(List\u003cAccommodation\u003e accommodations) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.accommodations.setAccommodations(accommodations);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Resets the existing data of this {@code AccommodationList} with {@code newData}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData(ReadOnlyAccommodationList newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        setAccommodations(newData.getAccommodationList());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// accommodation-level operations"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if a accommodation with the same identity as {@code accommodation} exists in the accommodation list."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean hasAccommodation(Accommodation accommodation) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(accommodation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return accommodations.contains(accommodation);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Adds a accommodation to the accommodation list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The accommodation must not already exist in the accommodation list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addAccommodation(Accommodation p) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodations.add(p);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the given accommodation {@code target} in the list with {@code editedAccommodation}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code target} must exist in the accommodation list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The accommodation identity of {@code editedAccommodation} must not be the same as another existing accommodation"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * in the accommodation list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setAccommodation(Accommodation target, Accommodation editedAccommodation) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(editedAccommodation);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodations.setAccommodation(target, editedAccommodation);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Removes {@code key} from this {@code AccommodationList}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code key} must exist in the accommodation list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void removeAccommodation(Accommodation key) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodations.remove(key);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(\" Accommodations: \");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        getAccommodationList().forEach(builder::append);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getAccommodationList() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return accommodations.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlanObject\u003e getTpoList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return accommodations.asUnmodifiableObservableTpoList();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof AccommodationList // instanceof handles nulls"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 accommodations.equals(((AccommodationList) other).accommodations));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return accommodations.hashCode();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 126,
      "lyeyixian": 4,
      "jiaweiteo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/ActivityList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.ReadOnlyActivityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents the list of activities in a travel plan"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Duplicates are not allowed (by .isSameTravelPlan comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class ActivityList implements ReadOnlyActivityList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final ObservableList\u003cActivity\u003e EMPTY_ACTIVITY_LIST \u003d new ActivityList().getActivityList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final UniqueActivityList activities;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityList() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an ActivityList using the Activities in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityList(ReadOnlyActivityList toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the contents of the activity list with {@code activities}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.activities.setActivities(activities);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Resets the existing data of this {@code ActvityList} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData(ReadOnlyActivityList newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        setActivities(newData.getActivityList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// activity-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if an activity with the same identity as {@code activity} exists in the activity list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.contains(activity);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Adds an activity to the activity list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The activity must not already exist in the activity list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.add(activity);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the given activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code target} must exist in the activity list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * activity list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(editedActivity);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Removes {@code key} from this {@code ActivityList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code key} must exist in the activity list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void removeActivity(Activity key) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.remove(key);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(\" Activities: \");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        getActivityList().forEach(builder::append);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlanObject\u003e getTpoList() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.asUnmodifiableObservableTpoList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof ActivityList // instanceof handles nulls"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 activities.equals(((ActivityList) other).activities));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.hashCode();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 129,
      "lyeyixian": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/FriendList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.UniqueFriendList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents the list of friends in a travel plan"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Duplicates are not allowed (by .isSameFriend comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class FriendList implements ReadOnlyFriendList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final ObservableList\u003cFriend\u003e EMPTY_FRIEND_LIST \u003d new FriendList().getFriendList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final UniqueFriendList friends;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friends \u003d new UniqueFriendList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public FriendList() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an seedu.address.model.FriendList using the Friends in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public FriendList(ReadOnlyFriendList toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the contents of the friend list with {@code friends}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code friends} must not contain duplicate friends."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setFriends(List\u003cFriend\u003e friends) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.friends.setFriends(friends);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Resets the existing data of this {@code seedu.address.model.FriendList} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData(ReadOnlyFriendList newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        setFriends(newData.getFriendList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// friend-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if a friend with the same identity as {@code friend} exists in the friend list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean hasFriend(Friend friend) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(friend);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return friends.contains(friend);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Adds a friend to the friend list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The friend must not already exist in the friend list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addFriend(Friend p) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friends.add(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the given friend {@code target} in the list with {@code editedFriend}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code target} must exist in the friend list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The friend identity of {@code editedFriend} must not be the same as another existing friend in the friend list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setFriend(Friend target, Friend editedFriend) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(editedFriend);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friends.setFriend(target, editedFriend);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Removes {@code key} from this {@code seedu.address.model.FriendList}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code key} must exist in the friend list."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void removeFriend(Friend key) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friends.remove(key);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(\" Friends: \");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        getFriendList().forEach(builder::append);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cFriend\u003e getFriendList() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return friends.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlanObject\u003e getTpoList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return friends.asUnmodifiableObservableTpoList();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof FriendList // instanceof handles nulls"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 friends.equals(((FriendList) other).friends));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return friends.hashCode();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 126,
      "lyeyixian": 1,
      "jiaweiteo": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/ReadOnlyAccommodationList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public interface ReadOnlyAccommodationList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns an unmodifiable view of the accommodation list."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * This list will not contain any duplicate accommodations."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableList\u003cAccommodation\u003e getAccommodationList();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 10,
      "lyeyixian": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/ReadOnlyFriendList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public interface ReadOnlyFriendList {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns an unmodifiable view of the friend list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * This list will not contain any duplicate friends."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableList\u003cFriend\u003e getFriendList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 8,
      "lyeyixian": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/TravelPlan.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.Directory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents a travel plan in the travel planner"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Duplicates are not allowed (by .isSameTravelPlan comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class TravelPlan extends Directory {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Start Date should be before or on the same date as End Date.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final WanderlustDate startDate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final WanderlustDate endDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final ActivityList activities \u003d new ActivityList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final AccommodationList accommodations \u003d new AccommodationList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final FriendList friends \u003d new FriendList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an empty TravelPlan with only the name, startDate and endDate."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlan(Name name, WanderlustDate startDate, WanderlustDate endDate) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        checkArgument(isValidStartAndEndDate(startDate, endDate), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an TravelPlan using the Accommodations, Activities and Friends in the {@code accommodationsToBeCopied},"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code activitiesToBeCopied} and {@code friendsTobeCopied}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlan(Name name, WanderlustDate startDate, WanderlustDate endDate,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                      ActivityList activitiesToBeCopied,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                      AccommodationList accommodationsToBeCopied,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                      FriendList friendsTobeCopied) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodations.resetData(accommodationsToBeCopied);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.resetData(activitiesToBeCopied);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friends.resetData(friendsTobeCopied);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if the start date is before or on the same day as end date."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static boolean isValidStartAndEndDate(WanderlustDate startDate, WanderlustDate endDate) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return startDate.getValue().compareTo(endDate.getValue()) \u003c\u003d 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// travel plan object-level operations"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if a travel plan object with the same identity as {@code travelPlanObject} exists in the travel plan"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * object\u0027s list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean hasTravelPlanObject(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (travelPlanObject instanceof Accommodation) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return accommodations.hasAccommodation((Accommodation) travelPlanObject);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (travelPlanObject instanceof Activity) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return activities.hasActivity((Activity) travelPlanObject);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else { // if travelPlanObject instanceof Friend"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return friends.hasFriend((Friend) travelPlanObject);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Adds a travel plan object to its corresponding list."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The travel plan object must not already exist in its corresponding list."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addTravelPlanObject(TravelPlanObject travelPlanObject) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (travelPlanObject instanceof Accommodation) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            accommodations.addAccommodation((Accommodation) travelPlanObject);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (travelPlanObject instanceof Activity) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            activities.addActivity((Activity) travelPlanObject);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else { // if travelPlanObject instanceof Friend"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            friends.addFriend((Friend) travelPlanObject);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the given travel plan object {@code target} in the list with {@code editedTravelPlanObject}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code target} must exist in the corresponding travel plan object list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The travel plan object identity of {@code editedTravelPlanObject} must not be the same as another existing"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * travel plan object in the corresponding travel plan object list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlanObject(TravelPlanObject target, TravelPlanObject editedTravelPlanObject) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (editedTravelPlanObject instanceof Accommodation) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            accommodations.setAccommodation((Accommodation) target, (Accommodation) editedTravelPlanObject);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (editedTravelPlanObject instanceof Activity) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            activities.setActivity((Activity) target, (Activity) editedTravelPlanObject);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else { // if editedTravelPlanObject instanceof Friend"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            friends.setFriend((Friend) target, (Friend) editedTravelPlanObject);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Removes {@code key} from the corresponding travel plan object list."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code key} must exist in the corresponding travel plan object list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void removeTravelPlanObject(TravelPlanObject key) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (key instanceof Accommodation) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            accommodations.removeAccommodation((Accommodation) key);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else if (key instanceof Activity) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            activities.removeActivity((Activity) key);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        } else { // if key instanceof Friend"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            friends.removeFriend((Friend) key);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// travel plan identity methods"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public WanderlustDate getStartDate() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public WanderlustDate getEndDate() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if both travel plans of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * This defines a weaker notion of equality between two travel plans."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean isSameTravelPlan(TravelPlan otherTravelPlan) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (otherTravelPlan \u003d\u003d this) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return otherTravelPlan !\u003d null"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 otherTravelPlan.getName().equals(getName())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 (otherTravelPlan.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || otherTravelPlan.getEndDate().equals(getEndDate()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(\" End Date: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .append(getEndDate());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(accommodations)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(activities)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .append(friends);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// travel plan data methods"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public AccommodationList getAccommodations() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return accommodations;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getAccommodationList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return accommodations.getAccommodationList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlanObject\u003e getAccommodationTpoList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return accommodations.getTpoList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityList getActivities() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.getActivityList();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlanObject\u003e getActivityTpoList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.getTpoList();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public FriendList getFriends() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return friends;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cFriend\u003e getFriendList() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return friends.getFriendList();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cTravelPlanObject\u003e getFriendTpoList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return friends.getTpoList();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof TravelPlan // instanceof handles nulls"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 name.equals(((TravelPlan) other).name)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 startDate.equals(((TravelPlan) other).startDate)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 endDate.equals(((TravelPlan) other).endDate)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 accommodations.equals(((TravelPlan) other).accommodations)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 activities.equals(((TravelPlan) other).activities)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 friends.equals(((TravelPlan) other).friends));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return Objects.hash(name, startDate, endDate, accommodations, activities, friends);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 215,
      "lyeyixian": 11,
      "jiaweiteo": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/UniqueTravelPlanList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.exceptions.DuplicateTravelPlanException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.exceptions.TravelPlanNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * A list of travel plans that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * A travel plan is considered unique by comparing using {@code TravelPlan#isSameTravelPlan(TravelPlan)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * adding and updating of travel plans uses TravelPlan#isSameTravelPlan(TravelPlan) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * the travel plan being added or updated is unique in terms of identity in the UniqueTravelPlanList. However, the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * removal of a travel plan uses TravelPlan#equals(Object) so as to ensure that the travel plan with exactly the same"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * @see TravelPlan#isSameTravelPlan(TravelPlan)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class UniqueTravelPlanList implements Iterable\u003cTravelPlan\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final ObservableList\u003cTravelPlan\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final ObservableList\u003cTravelPlan\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if the list contains an equivalent travel plan as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean contains(TravelPlan toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameTravelPlan);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds a travel plan to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void add(TravelPlan toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new DuplicateTravelPlanException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the travel plan {@code target} in the list with {@code editedTravelPlan}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan identity of {@code editedTravelPlan} must not be the same as another existing travel plan in the"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlan(TravelPlan target, TravelPlan editedTravelPlan) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(target, editedTravelPlan);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new TravelPlanNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!target.isSameTravelPlan(editedTravelPlan) \u0026\u0026 contains(editedTravelPlan)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new DuplicateTravelPlanException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        internalList.set(index, editedTravelPlan);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Removes the equivalent travel plan from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void remove(TravelPlan toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new TravelPlanNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlans(UniqueTravelPlanList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the contents of this list with {@code travelPlans}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code travelPlans} must not contain duplicate travel plans."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlans(List\u003cTravelPlan\u003e travelPlans) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(travelPlans);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!travelPlansAreUnique(travelPlans)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new DuplicateTravelPlanException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        internalList.setAll(travelPlans);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cTravelPlan\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Iterator\u003cTravelPlan\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                || (other instanceof UniqueTravelPlanList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueTravelPlanList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if {@code travelPlans} contains only unique travel plans."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private boolean travelPlansAreUnique(List\u003cTravelPlan\u003e travelPlans) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        for (int i \u003d 0; i \u003c travelPlans.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            for (int j \u003d i + 1; j \u003c travelPlans.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                if (travelPlans.get(i).isSameTravelPlan(travelPlans.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/exceptions/DuplicateTravelPlanException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Signals that the operation will result in duplicate TravelPlans (TravelPlans are considered duplicates if they have"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * the same"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class DuplicateTravelPlanException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public DuplicateTravelPlanException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        super(\"Operation would result in duplicate persons\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplan/exceptions/TravelPlanNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplan.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Signals that the operation is unable to find the specified travel plan."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class TravelPlanNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplanner/Directory.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents the current directory of wanderlust, which can be instance of TravelPlan or Wishlist"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public abstract class Directory {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public abstract ObservableList\u003cActivity\u003e getActivityList();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 5,
      "lyeyixian": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplanner/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Predicate\u003cTravelPlan\u003e PREDICATE_SHOW_ALL_TRAVEL_PLAN \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Predicate\u003cActivity\u003e PREDICATE_SHOW_ALL_ACTIVITY \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the user prefs\u0027 travel planner file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Path getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Sets the user prefs\u0027 travel planner file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void setTravelPlannerFilePath(Path travelPlannerFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces travel planner data with the data in {@code travelPlanner}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void setTravelPlanner(ReadOnlyTravelPlanner travelPlanner);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /** Returns the TravelPlanner */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ReadOnlyTravelPlanner getTravelPlanner();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if a travel plan with the same identity as {@code travelPlan} exists in the travel planner."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    boolean hasTravelPlan(TravelPlan travelPlan);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if an activity with the same identity as {@code activity} exists in the wishlist."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    boolean hasActivity(Activity activity);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if a travel plan object with the same identity as {@code tPObj} exists in the travel plan."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    boolean hasTravelPlanObject(TravelPlanObject tPObj);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Deletes the given travel plan."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan must exist in the travel planner."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void deleteTravelPlan(TravelPlan target);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Deletes the given activity."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The activity must exist in the wishlist."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void deleteActivity(Activity target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Deletes the given travel plan object."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan object must exist in the travel plan."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void deleteTravelPlanObject(TravelPlanObject tPObj);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds the given travel plan."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code travelPlan} must not already exist in the travel planner."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void addTravelPlan(TravelPlan travelPlan);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds the given activity."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code activity} must not already exist in the wishlist."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void addActivity(Activity activity);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds the given travel plan object."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code tpObj} must not already exist in the travel plan."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void addTravelPlanObject(TravelPlanObject tPObj);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the given travel plan {@code target} with {@code editedTravelPlan}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the travel planner."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan identity of {@code editedTravelPlan} must not be the same as another existing travel plan in the"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * travel planner."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void setTravelPlan(TravelPlan target, TravelPlan editedTravelPlan);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the given activity {@code target} with {@code editedActivity}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the wishlist."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * wishlist."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void setActivity(Activity target, Activity editedActivity);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the given travel plan object {@code target} with {@code editedTravelPlanObject}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the travel plan."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan object identity of {@code editedTravelPlanObject} must not be the same as another existing travel"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * plan object in the travel plan."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void setTravelPlanObject(TravelPlanObject target, TravelPlanObject editedTravelPlanObject);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered travel plan list */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableList\u003cTravelPlan\u003e getFilteredTravelPlanList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /** Returns an unmodifiable view of the filtered wishlist */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredWishlist();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered activity list */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cActivity\u003e getFilteredActivityList();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered accommodation list */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cAccommodation\u003e getFilteredAccommodationList();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /** Returns an unmodifiable view of the filtered friend list */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    ObservableList\u003cFriend\u003e getFilteredFriendList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Updates the filter of the filtered travel plan list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void updateFilteredTravelPlanList(Predicate\u003cTravelPlan\u003e predicate);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Updates the filter of the filtered wishlist to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void updateFilteredWishlist(Predicate\u003cActivity\u003e predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Updates the filter of the filtered activity list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Updates the filter of the filtered accommodation list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    void updateFilteredAccommodationList(Predicate\u003cAccommodation\u003e predicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Updates the filter of the filtered friend list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    void updateFilteredFriendList(Predicate\u003cFriend\u003e predicate);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the directory with {@code dir}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code dir} must exist in the travel planner."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    void setDirectory(Directory dir);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the current directory that the wanderlust is currently in."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    Directory getDirectory();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 23,
      "lyeyixian": 170
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplanner/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.model.travelplan.AccommodationList.EMPTY_ACCOMMODATION_LIST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.model.travelplan.FriendList.EMPTY_FRIEND_LIST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.TravelPlanObject;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents the in-memory model of the travel planner data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final TravelPlanner travelPlanner;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final FilteredList\u003cTravelPlan\u003e filteredTravelPlans;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final FilteredList\u003cActivity\u003e filteredWishlist;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private Directory directory;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private FilteredList\u003cActivity\u003e filteredActivityList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private FilteredList\u003cAccommodation\u003e filteredAccommodationList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private FilteredList\u003cFriend\u003e filteredFriendList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Initializes a ModelManager with the given travelPlanner and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ModelManager(ReadOnlyTravelPlanner travelPlanner, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(travelPlanner, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        logger.fine(\"Initializing with travel planner: \" + travelPlanner + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlanner \u003d new TravelPlanner(travelPlanner);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        filteredTravelPlans \u003d new FilteredList\u003c\u003e(this.travelPlanner.getTravelPlanList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        filteredWishlist \u003d new FilteredList\u003c\u003e(this.travelPlanner.getWishlist());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        directory \u003d this.travelPlanner.getTravelPlanList().get(0);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        filteredActivityList \u003d new FilteredList\u003c\u003e(directory.getActivityList());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        filteredAccommodationList \u003d new FilteredList\u003c\u003e(directory instanceof TravelPlan"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                ? ((TravelPlan) directory).getAccommodationList() : EMPTY_ACCOMMODATION_LIST);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        filteredFriendList \u003d new FilteredList\u003c\u003e(directory instanceof TravelPlan"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                ? ((TravelPlan) directory).getFriendList() : EMPTY_FRIEND_LIST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this(new TravelPlanner(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Path getTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return userPrefs.getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlannerFilePath(Path travelPlannerFilePath) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(travelPlannerFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        userPrefs.setTravelPlannerFilePath(travelPlannerFilePath);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TravelPlanner \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlanner(ReadOnlyTravelPlanner travelPlanner) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlanner.resetData(travelPlanner);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ReadOnlyTravelPlanner getTravelPlanner() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean hasTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(travelPlan);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner.hasTravelPlan(travelPlan);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void deleteTravelPlan(TravelPlan target) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.removeTravelPlan(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void addTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.addTravelPlan(travelPlan);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        updateFilteredTravelPlanList(PREDICATE_SHOW_ALL_TRAVEL_PLAN);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlan(TravelPlan target, TravelPlan editedTravelPlan) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(target, editedTravelPlan);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.setTravelPlan(target, editedTravelPlan);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Wishlist \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner.hasActivity(activity);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void deleteActivity(Activity target) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.removeActivity(target);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.addActivity(activity);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        updateFilteredWishlist(PREDICATE_SHOW_ALL_ACTIVITY);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(target, editedActivity);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlanner.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Directory \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setDirectory(Directory dir) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        directory \u003d dir;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Directory getDirectory() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return directory;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d TravelPlanObject \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean hasTravelPlanObject(TravelPlanObject tPObj) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(tPObj);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assert directory instanceof TravelPlan : \"Directory must be set to a TravelPlan to call hasTravelPlanObject.\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan tp \u003d (TravelPlan) directory;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return tp.hasTravelPlanObject(tPObj);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void deleteTravelPlanObject(TravelPlanObject tPObj) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(tPObj);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assert directory instanceof TravelPlan"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                : \"Directory must be set to a TravelPlan to call deleteTravelPlanObject.\";"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan tp \u003d (TravelPlan) directory;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        tp.removeTravelPlanObject(tPObj);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void addTravelPlanObject(TravelPlanObject tPObj) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(tPObj);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assert directory instanceof TravelPlan : \"Directory must be set to a TravelPlan to call addTravelPlanObject.\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan tp \u003d (TravelPlan) directory;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        tp.addTravelPlanObject(tPObj);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlanObject(TravelPlanObject target, TravelPlanObject editedTravelPlanObject) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireAllNonNull(target, editedTravelPlanObject);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assert directory instanceof TravelPlan : \"Directory must be set to a TravelPlan to call setTravelPlanObject.\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan tp \u003d (TravelPlan) directory;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        tp.setTravelPlanObject(target, editedTravelPlanObject);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered TravelPlan List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code TravelPlan} backed by the internal list of"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code TravelPlanner}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cTravelPlan\u003e getFilteredTravelPlanList() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return filteredTravelPlans;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void updateFilteredTravelPlanList(Predicate\u003cTravelPlan\u003e predicate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        filteredTravelPlans.setPredicate(predicate);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Wishlist List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Activity} backed by the internal list of"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code Wishlist}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredWishlist() {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return filteredWishlist;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void updateFilteredWishlist(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        filteredWishlist.setPredicate(predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered TravelPLanObject List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code ? extends TravelPlanObject} backed by the internal list of"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code TravelPlan}"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cActivity\u003e getFilteredActivityList() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return filteredActivityList;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void updateFilteredActivityList(Predicate\u003cActivity\u003e predicate) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        filteredActivityList.setPredicate(predicate);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cFriend\u003e getFilteredFriendList() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return filteredFriendList;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void updateFilteredFriendList(Predicate\u003cFriend\u003e predicate) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        filteredFriendList.setPredicate(predicate);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cAccommodation\u003e getFilteredAccommodationList() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return filteredAccommodationList;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void updateFilteredAccommodationList(Predicate\u003cAccommodation\u003e predicate) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        filteredAccommodationList.setPredicate(predicate);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner.equals(other.travelPlanner)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                \u0026\u0026 filteredTravelPlans.equals(other.filteredTravelPlans);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 54,
      "lyeyixian": 244
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplanner/ReadOnlyTravelPlanner.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Unmodifiable view of a travel planner"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public interface ReadOnlyTravelPlanner {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns an unmodifiable view of the travel plans list."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * This list will not contain any duplicate travel plans."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableList\u003cTravelPlan\u003e getTravelPlanList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns an unmodifiable view of the wishlist."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * This list will not contain any duplicate activities."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    ObservableList\u003cActivity\u003e getWishlist();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplanner/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Path getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplanner/TravelPlanner.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.UniqueTravelPlanList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.wishlist.Wishlist;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Wraps all data at the travel planner level"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Duplicates are not allowed (by .isSameTravelPlan comparison)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class TravelPlanner implements ReadOnlyTravelPlanner {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final UniqueTravelPlanList travelPlans;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Wishlist wishlist;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlans \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist \u003d new Wishlist();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlanner() {}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Creates an TravelPlanner using the TravelPlans in the {@code toBeCopied}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlanner(ReadOnlyTravelPlanner toBeCopied) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the contents of the travel plan list with {@code travelPlans}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code travelPlans} must not contain duplicate travel plans."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlans(List\u003cTravelPlan\u003e travelPlans) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlans.setTravelPlans(travelPlans);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the contents of the wishlist with {@code activities}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setWishlist(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.wishlist.setActivities(activities);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Resets the existing data of this {@code TravelPlanner} with {@code newData}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void resetData(ReadOnlyTravelPlanner newData) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        setTravelPlans(newData.getTravelPlanList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        setWishlist(newData.getWishlist());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if a travel plan with the same identity as {@code travelPlan} exists in the travel planner."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean hasTravelPlan(TravelPlan travelPlan) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(travelPlan);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlans.contains(travelPlan);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns true if an activity with the same identity as {@code activity} exists in the wishlist."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return wishlist.hasActivity(activity);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds a travel plan to the travel planner."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan must not already exist in the travel planner."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void addTravelPlan(TravelPlan tP) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlans.add(tP);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Adds an activity to the wishlist."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void addActivity(Activity activity) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist.addActivity(activity);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the given travel plan {@code target} in the list with {@code editedTravelPlan}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the travel planner."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The travel plan identity of {@code editedTravelPlan} must not be the same as another existing travel plan in the"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * travel planner."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlan(TravelPlan target, TravelPlan editedTravelPlan) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(editedTravelPlan);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlans.setTravelPlan(target, editedTravelPlan);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Replaces the given activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code target} must exist in the wishlist."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * wishlist."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        wishlist.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Removes {@code key} from this {@code TravelPlanner}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code key} must exist in the travel planner."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void removeTravelPlan(TravelPlan key) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlans.remove(key);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Removes {@code key} from this {@code Wishlist}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * {@code key} must exist in the wishlist."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void removeActivity(Activity key) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist.removeActivity(key);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns the wishlist as a Wishlist."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Used to initialize the directory."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Wishlist getWishlistAsDirectory() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return wishlist;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlans.asUnmodifiableObservableList().size() + \" travel plans\\n\""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + wishlist.getActivityList().size() + \" activities\";"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cTravelPlan\u003e getTravelPlanList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlans.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public ObservableList\u003cActivity\u003e getWishlist() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return wishlist.getActivityList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                || (other instanceof TravelPlanner // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                \u0026\u0026 travelPlans.equals(((TravelPlanner) other).travelPlans)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                \u0026\u0026 wishlist.equals(((TravelPlanner) other).wishlist));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        // TODO: need consider wishlist\u0027s hashcode also"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return Objects.hash(travelPlans, wishlist);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 14,
      "lyeyixian": 168
    }
  },
  {
    "path": "src/main/java/seedu/address/model/travelplanner/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.model.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private Path travelPlannerFilePath \u003d Paths.get(\"data\" , \"travelplanner.json\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        setTravelPlannerFilePath(newUserPrefs.getTravelPlannerFilePath());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Path getTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlannerFilePath;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void setTravelPlannerFilePath(Path travelPlannerFilePath) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(travelPlannerFilePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlannerFilePath \u003d travelPlannerFilePath;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                \u0026\u0026 travelPlannerFilePath.equals(o.travelPlannerFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return Objects.hash(guiSettings, travelPlannerFilePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + travelPlannerFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 86
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleWanderlustDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Importance;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Passport;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.TravelPlanner;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class SampleWanderlustDataUtil {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static TravelPlan sampleTravelPlan1 \u003d new TravelPlan(new Name(\"Trip to Hawaii\"),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new WanderlustDate(\"2020-11-01\"), new WanderlustDate(\"2020-12-31\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static TravelPlan sampleTravelPlan2 \u003d new TravelPlan(new Name(\"Netherlands Getaway\"),"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new WanderlustDate(\"2021-01-01\"), new WanderlustDate(\"2021-12-31\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Friend[] getSampleFriends1() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Friend[] {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Friend(new Name(\"Alex Yeoh\"), new Passport(\"M1234567\"), new Phone(\"87438807\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Friend(new Name(\"Bernice Yu\"), new Passport(\"E1234567\"), new Phone(\"99272758\")),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Friend(new Name(\"Charlotte Oliveiro\"), new Passport(\"C1234567\"), new Phone(\"93210283\")),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Friend(new Name(\"David Li\"), new Passport(\"D1234567\"), new Phone(\"991031282\"))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Friend[] getSampleFriends2() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Friend[] {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Friend(new Name(\"Lye Yi Xian\"), new Passport(\"G7654321\"), new Phone(\"92421847\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Friend(new Name(\"Teo Jia Wei\"), new Passport(\"S7654321\"), new Phone(\"81238032\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Friend(new Name(\"Timothy Ong\"), new Passport(\"R7654321\"), new Phone(\"91274810\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Friend(new Name(\"Lim Hai Shan\"), new Passport(\"B7654321\"), new Phone(\"89002939\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Friend(new Name(\"Jeanne Toh\"), new Passport(\"J7654321\"), new Phone(\"88234200\"))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Accommodation[] getSampleAccommodations1() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Accommodation[] {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Accommodation(new Name(\"Pooh\u0027s House\"), new WanderlustDate(\"2020-12-12\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new WanderlustDate(\"2020-12-31\"), new Cost(\"50\"), new Location(\"100 Acre Woods\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Accommodation(new Name(\"Hogwarts\"), new WanderlustDate(\"2020-11-11\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new WanderlustDate(\"2020-11-25\"), new Cost(\"10000\"), new Location(\"London\"))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Accommodation[] getSampleAccommodations2() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Accommodation[] {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Accommodation(new Name(\"River Island\"), new WanderlustDate(\"2021-07-12\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new WanderlustDate(\"2021-08-31\"), new Cost(\"6000\"), new Location(\"Stardew Valley\")),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Accommodation(new Name(\"Snow Cabin\"), new WanderlustDate(\"2021-09-01\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new WanderlustDate(\"2020-09-25\"), new Cost(\"200\"), new Location(\"Ice Valley\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Activity[] getSampleActivities1() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Activity[] {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Bungee Jumping\"), new Location(\"Sentosa\"), new Cost(\"200\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"2\"), new WanderlustDateTime(\"2020-12-12 11:00\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Eat Bingsu\"), new Location(\"Snowflake Street\"), new Cost(\"5\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"3\"), new WanderlustDateTime(\"2020-12-23 17:00\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Cherry Picking\"), new Location(\"The Woods\"), new Cost(\"50\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"5\"), new WanderlustDateTime(\"2020-12-13 09:00\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Music Festival\"), new Location(\"Tomorrowland Avenue\"), new Cost(\"500\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"1\"), new WanderlustDateTime(\"2020-12-12 23:59\"))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Activity[] getSampleActivities2() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Activity[] {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Ice Fishing\"), new Location(\"Ice Park\"), new Cost(\"20\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"5\"), new WanderlustDateTime(\"2021-07-22 23:00\")),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Visit the National Museum\"), new Location(\"Museum Lane 5\"), new Cost(\"5\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"2\"), new WanderlustDateTime(\"2021-06-09 17:40\")),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Ice Skating\"), new Location(\"Skating Rink Avenue\"), new Cost(\"30\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"1\"), new WanderlustDateTime(\"2021-01-05 09:21\")),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            new Activity(new Name(\"Mountain Climbing\"), new Location(\"Tomorrowland\"), new Cost(\"100\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    new Importance(\"4\"), new WanderlustDateTime(\"2021-02-23 20:59\"))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static TravelPlan getSampleTravelPlan(TravelPlan sampleTravelPlan, Activity[] sampleActivities,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            Accommodation[] sampleAccommodations, Friend[] sampleFriends) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Friend sampleFriend : sampleFriends) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            sampleTravelPlan.addTravelPlanObject(sampleFriend);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity sampleActivity : sampleActivities) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            sampleTravelPlan.addTravelPlanObject(sampleActivity);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Accommodation sampleAccommodation : sampleAccommodations) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            sampleTravelPlan.addTravelPlanObject(sampleAccommodation);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return sampleTravelPlan;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static TravelPlan[] getSampleTravelPlans() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new TravelPlan[] {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            getSampleTravelPlan(sampleTravelPlan1, getSampleActivities1(), getSampleAccommodations1(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    getSampleFriends1()),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            getSampleTravelPlan(sampleTravelPlan2, getSampleActivities2(), getSampleAccommodations2(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    getSampleFriends2())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        };"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static ReadOnlyTravelPlanner getSampleTravelPlanner() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlanner tp \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (TravelPlan sampleTravelPlan: getSampleTravelPlans()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            tp.addTravelPlan(sampleTravelPlan);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity sampleActivity : getSampleActivities1()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            tp.addActivity(sampleActivity);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity sampleActivity : getSampleActivities2()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            tp.addActivity(sampleActivity);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return tp;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 123
    }
  },
  {
    "path": "src/main/java/seedu/address/model/wishlist/Wishlist.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.wishlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.UniqueActivityList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.ReadOnlyActivityList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.Directory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Wraps all data at the travel plan level"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Duplicates are not allowed (by .isSameTravelPlan comparison)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class Wishlist extends Directory implements ReadOnlyActivityList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final UniqueActivityList activities;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Wishlist() {}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an Wishlist using the Activitys in the {@code toBeCopied}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Wishlist(ReadOnlyActivityList toBeCopied) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the contents of the activity list with {@code activities}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code activities} must not contain duplicate activities."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setActivities(List\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.activities.setActivities(activities);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Resets the existing data of this {@code Wishlist} with {@code newData}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData(ReadOnlyActivityList newData) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        setActivities(newData.getActivityList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// activity-level operations"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns true if an activity with the same identity as {@code activity} exists in the wishlist."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean hasActivity(Activity activity) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(activity);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.contains(activity);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Adds an activity to the wishlist."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The activity must not already exist in the wishlist."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void addActivity(Activity p) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.add(p);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Replaces the given activity {@code target} in the list with {@code editedActivity}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code target} must exist in the wishlist."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * The activity identity of {@code editedActivity} must not be the same as another existing activity in the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * wishlist."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setActivity(Activity target, Activity editedActivity) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        requireNonNull(editedActivity);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.setActivity(target, editedActivity);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Removes {@code key} from this {@code Wishlist}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code key} must exist in the wishlist."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void removeActivity(Activity key) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activities.remove(key);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        builder.append(\" Wishlist: \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        getActivityList().forEach(builder::append);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                || (other instanceof Wishlist // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 activities.equals(((Wishlist) other).activities));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return activities.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 125
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/travelplanner/JsonAdaptedAccommodation.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Jackson-friendly version of {@link Accommodation}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonAdaptedAccommodation {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Accommodation\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructs a {@code JsonAdaptedAccommodation} with the given accommodation details."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedAccommodation(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                    @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                    @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                    @JsonProperty(\"cost\") String cost,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                    @JsonProperty(\"location\") String location) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts a given {@code Accommodation} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedAccommodation(Accommodation source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        startDate \u003d source.getStartDate().date;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        endDate \u003d source.getEndDate().date;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        cost \u003d source.getCost().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts this Jackson-friendly adapted accommodation object into the model\u0027s {@code Accommodation} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted accommodation."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Accommodation toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    WanderlustDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!WanderlustDate.isValidWanderlustDate(startDate)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(WanderlustDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final WanderlustDate modelStartDate \u003d new WanderlustDate(startDate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    WanderlustDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!WanderlustDate.isValidWanderlustDate(endDate)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(WanderlustDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final WanderlustDate modelEndDate \u003d new WanderlustDate(endDate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Cost.isValidCost(cost)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Cost modelCost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return new Accommodation(modelName, modelStartDate, modelEndDate, modelCost, modelLocation);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 105
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/travelplanner/JsonAdaptedActivity.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Importance;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Jackson-friendly version of {@link Activity}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonAdaptedActivity {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Activity\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String cost;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String importance;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String dateTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructs a {@code JsonAdaptedActivity} with the given activity details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedActivity(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                               @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                               @JsonProperty(\"cost\") String cost,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                               @JsonProperty(\"levelOfImportance\") String levelOfImportance,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                               @JsonProperty(\"dateTime\") String dateTime) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.importance \u003d levelOfImportance;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.dateTime \u003d dateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts a given {@code Activity} into this class for Jackson use."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedActivity(Activity source) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        cost \u003d source.getCost().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        importance \u003d source.getLevelOfImportance().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        dateTime \u003d source.getActivityDateTime().dateTime;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts this Jackson-friendly adapted activity object into the model\u0027s {@code Activity} object."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted activity."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Activity toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Location.isValidLocation(name)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Location modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Cost.isValidCost(cost)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Cost.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Cost modelCost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (importance \u003d\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    Importance.class.getSimpleName()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Importance.isValidImportance(importance)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Importance.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Importance modelImportance \u003d new Importance(importance);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (dateTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    WanderlustDateTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!WanderlustDateTime.isValidWanderlustDateTime(dateTime)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(WanderlustDateTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final WanderlustDateTime modelDateTime \u003d new WanderlustDateTime(dateTime);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return new Activity(modelName, modelLocation, modelCost, modelImportance, modelDateTime);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 106
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/travelplanner/JsonAdaptedFriend.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Passport;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Jackson-friendly version of {@link Friend}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonAdaptedFriend {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Friend\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String passport;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructs a {@code JsonAdaptedFriend} with the given friend details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedFriend(@JsonProperty(\"name\") String name, @JsonProperty(\"passport\") String passport,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                             @JsonProperty(\"phone\") String phone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.passport \u003d passport;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts a given {@code Friend} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedFriend(Friend source) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        passport \u003d source.getPassport().value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts this Jackson-friendly adapted friend object into the model\u0027s {@code Friend} object."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted friend."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Friend toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (passport \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    Passport.class.getSimpleName()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Passport.isValidPassport(passport)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Passport.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Passport modelPassport \u003d new Passport(passport);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return new Friend(modelName, modelPassport, modelPhone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/travelplanner/JsonAdaptedTravelPlan.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Jackson-friendly version of {@link TravelPlan}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonAdaptedTravelPlan {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"TravelPlan\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final List\u003cJsonAdaptedActivity\u003e activities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final List\u003cJsonAdaptedAccommodation\u003e accommodations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final List\u003cJsonAdaptedFriend\u003e friends \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructs a {@code JsonAdaptedTravelPlan} with the given TravelPlan details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedTravelPlan(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                 @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                 @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                 @JsonProperty(\"activities\") List\u003cJsonAdaptedActivity\u003e activities,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                 @JsonProperty(\"accommodations\") List\u003cJsonAdaptedAccommodation\u003e accommodations,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                 @JsonProperty(\"friends\") List\u003cJsonAdaptedFriend\u003e friends) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (activities !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            this.activities.addAll(activities);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (accommodations !\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            this.accommodations.addAll(accommodations);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (friends !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            this.friends.addAll(friends);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts a given {@code TravelPlan} into this class for Jackson use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonAdaptedTravelPlan(TravelPlan source) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        name \u003d source.getName().name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        startDate \u003d source.getStartDate().date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        endDate \u003d source.getEndDate().date;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        activities.addAll(source.getActivityList().stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .map(JsonAdaptedActivity::new)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        accommodations.addAll(source.getAccommodationList().stream()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .map(JsonAdaptedAccommodation::new)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        friends.addAll(source.getFriendList().stream()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .map(JsonAdaptedFriend::new)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts this Jackson-friendly adapted travel plan object into the model\u0027s {@code TravelPlan} object."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted travel plan."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlan toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final List\u003cActivity\u003e travelPlanActivities \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        for (JsonAdaptedActivity activity : activities) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            travelPlanActivities.add(activity.toModelType());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final List\u003cAccommodation\u003e travelPlanAccommodations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        for (JsonAdaptedAccommodation accommodation : accommodations) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            travelPlanAccommodations.add(accommodation.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final List\u003cFriend\u003e travelPlanFriends \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        for (JsonAdaptedFriend friend : friends) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            travelPlanFriends.add(friend.toModelType());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    WanderlustDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!WanderlustDate.isValidWanderlustDate(startDate)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(WanderlustDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final WanderlustDate modelStartDate \u003d new WanderlustDate(startDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                    WanderlustDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!WanderlustDate.isValidWanderlustDate(endDate)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new IllegalValueException(WanderlustDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final WanderlustDate modelEndDate \u003d new WanderlustDate(endDate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final ActivityList modelActivities \u003d new ActivityList();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        modelActivities.setActivities(travelPlanActivities);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final AccommodationList modelAccommodations \u003d new AccommodationList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        modelAccommodations.setAccommodations(travelPlanAccommodations);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        final FriendList modelFriends \u003d new FriendList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        modelFriends.setFriends(travelPlanFriends);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return new TravelPlan(modelName, modelStartDate, modelEndDate, modelActivities, modelAccommodations,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                modelFriends);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/travelplanner/JsonSerializableTravelPlanner.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.TravelPlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * An Immutable TravelPlanner that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "@JsonRootName(value \u003d \"travelplanner\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonSerializableTravelPlanner {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_TRAVEL_PLAN \u003d \"Travel plans list contains duplicate travel plan(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ACTIVITY \u003d \"Wishlist contains duplicate activity\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final List\u003cJsonAdaptedTravelPlan\u003e travelPlans \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private final List\u003cJsonAdaptedActivity\u003e wishlist \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Constructs a {@code JsonSerializableTravelPlanner} with the given travel plans and wishlist."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonSerializableTravelPlanner(@JsonProperty(\"travelPlans\") List\u003cJsonAdaptedTravelPlan\u003e travelPlans,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                                         @JsonProperty(\"wishlist\") List\u003cJsonAdaptedActivity\u003e wishlist) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlans.addAll(travelPlans);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.wishlist.addAll(wishlist);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts a given {@code ReadOnlyTravelPlanner} into this class for Jackson use."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableTravelPlanner}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonSerializableTravelPlanner(ReadOnlyTravelPlanner source) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlans.addAll(source.getTravelPlanList().stream().map(JsonAdaptedTravelPlan::new)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        wishlist.addAll(source.getWishlist().stream().map(JsonAdaptedActivity::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Converts this travel planner into the model\u0027s {@code TravelPlanner} object."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public TravelPlanner toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        TravelPlanner travelPlanner \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        for (JsonAdaptedTravelPlan jsonAdaptedTravelPlan : travelPlans) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            TravelPlan travelPlan \u003d jsonAdaptedTravelPlan.toModelType();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            if (travelPlanner.hasTravelPlan(travelPlan)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_TRAVEL_PLAN);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            travelPlanner.addTravelPlan(travelPlan);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        for (JsonAdaptedActivity jsonAdaptedActivity : wishlist) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            Activity activity \u003d jsonAdaptedActivity.toModelType();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            if (travelPlanner.hasActivity(activity)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ACTIVITY);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            travelPlanner.addActivity(activity);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlanner;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/travelplanner/JsonTravelPlannerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * A class to access TravelPlanner data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonTravelPlannerStorage implements TravelPlannerStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonTravelPlannerStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonTravelPlannerStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Path getTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return readTravelPlanner(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Similar to {@link #readTravelPlanner()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        Optional\u003cJsonSerializableTravelPlanner\u003e jsonTravelPlanner \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "                filePath, JsonSerializableTravelPlanner.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        if (!jsonTravelPlanner.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            return Optional.of(jsonTravelPlanner.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        saveTravelPlanner(travelPlanner, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Similar to {@link #saveTravelPlanner(ReadOnlyTravelPlanner)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(travelPlanner);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableTravelPlanner(travelPlanner), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 79
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/travelplanner/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/travelplanner/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public interface Storage extends TravelPlannerStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Path getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner) throws IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/travelplanner/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Manages storage of TravelPlanner data in local storage."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private TravelPlannerStorage travelPlannerStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code TravelPlannerStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public StorageManager(TravelPlannerStorage travelPlannerStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.travelPlannerStorage \u003d travelPlannerStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Path getTravelPlannerFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlannerStorage.getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return readTravelPlanner(travelPlannerStorage.getTravelPlannerFilePath());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner(Path filePath)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        return travelPlannerStorage.readTravelPlanner(filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner) throws IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        saveTravelPlanner(travelPlanner, travelPlannerStorage.getTravelPlannerFilePath());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    public void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "        travelPlannerStorage.saveTravelPlanner(travelPlanner, filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/travelplanner/TravelPlannerStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyTravelPlanner;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.TravelPlanner;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents a storage for {@link TravelPlanner}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public interface TravelPlannerStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Path getTravelPlannerFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns TravelPlanner data as a {@link ReadOnlyTravelPlanner}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @see #getTravelPlannerFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Optional\u003cReadOnlyTravelPlanner\u003e readTravelPlanner(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Saves the given {@link ReadOnlyTravelPlanner} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @param travelPlanner cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @see #saveTravelPlanner(ReadOnlyTravelPlanner)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void saveTravelPlanner(ReadOnlyTravelPlanner travelPlanner, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/travelplanner/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "package seedu.address.storage.travelplanner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "import seedu.address.model.travelplanner.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " * Represents a storage for {@link UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * Saves the given {@link ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lyeyixian"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lyeyixian": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "         * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.logic.wanderlustlogic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustcommands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.logic.wanderlustlogic.wanderlustparser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TravelPlannerPanel travelPlannerPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TravelPlanPanel travelPlanPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TravelPlanObjectListPanel travelPlanObjectListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private StackPane travelPlannerPanelPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private StackPane travelPlanPanelPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private StackPane travelObjectListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlannerPanel \u003d new TravelPlannerPanel(logic.getFilteredTravelPlanList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlannerPanelPlaceholder.getChildren().add(travelPlannerPanel.getRoot());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlanPanel \u003d new TravelPlanPanel(logic.getDirectory());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlanPanelPlaceholder.getChildren().add(travelPlanPanel.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlanObjectListPanel \u003d new TravelPlanObjectListPanel(logic.getFilteredActivityList(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                logic.getFilteredAccommodationList(), logic.getFilteredFriendList());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelObjectListPanelPlaceholder.getChildren().add(travelPlanObjectListPanel.getRoot());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getTravelPlannerFilePath());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 24,
      "-": 183
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TravelPlanObjectListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.cards.AccommodationCard;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.cards.ActivityCard;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.cards.FriendCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Panel containing the list of travel plan objects."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TravelPlanObjectListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String FXML \u003d \"TravelPlanObjectListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TravelPlanObjectListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ListView\u003cActivity\u003e activityListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ListView\u003cAccommodation\u003e accommodationListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ListView\u003cFriend\u003e friendListView;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code TravelPlanObjectListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanObjectListPanel(ObservableList\u003cActivity\u003e activities, ObservableList\u003cAccommodation\u003e accommodations,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            ObservableList\u003cFriend\u003e friends) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityListView.setItems(activities);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityListView.setCellFactory(listView -\u003e new ActivityListViewCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodationListView.setItems(accommodations);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodationListView.setCellFactory(listView -\u003e new AccommodationListViewCell());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friendListView.setItems(friends);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friendListView.setCellFactory(listView -\u003e new FriendListViewCell());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code TravelPlanObject} using the {@code ActivityCard}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    class ActivityListViewCell extends ListCell\u003cActivity\u003e {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        protected void updateItem(Activity activity, boolean empty) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            super.updateItem(activity, empty);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (empty || activity \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setGraphic(new ActivityCard(activity, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code TravelPlanObject} using the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code AccommodationCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    class AccommodationListViewCell extends ListCell\u003cAccommodation\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        protected void updateItem(Accommodation accommodation, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            super.updateItem(accommodation, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (empty || accommodation \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setGraphic(new AccommodationCard(accommodation, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code TravelPlanObject} using the {@code FriendCard}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    class FriendListViewCell extends ListCell\u003cFriend\u003e {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        protected void updateItem(Friend friend, boolean empty) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            super.updateItem(friend, empty);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (empty || friend \u003d\u003d null) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setGraphic(new FriendCard(friend, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TravelPlanPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.Directory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Panel containing basic information of a Travel Plan."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TravelPlanPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String TravelPlanFXML \u003d \"TravelPlanPanel.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String WishlistFXML \u003d \"WishlistPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TravelPlanPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label startDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label endDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code TravelPlanObjectListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanPanel(Directory directory) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(directory instanceof TravelPlan ? TravelPlanFXML : WishlistFXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (directory instanceof TravelPlan) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            TravelPlan travelPlan \u003d (TravelPlan) directory;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            name.setText(travelPlan.getName().toString());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            startDate.setText(travelPlan.getStartDate().toString());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            endDate.setText(travelPlan.getEndDate().toString());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TravelPlannerPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.cards.NameCard;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * Panel containing basic information of a Travel Plan."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TravelPlannerPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String FXML \u003d \"TravelPlannerPanel.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TravelPlanPanel.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ListView\u003cTravelPlan\u003e travelPlanListView;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code TravelPlanObjectListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlannerPanel(ObservableList\u003cTravelPlan\u003e travelPlanList) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlanListView.setItems(travelPlanList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        travelPlanListView.setCellFactory(travelPlan -\u003e new TravelPlanListViewCell());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Custom {@code ListCell} that displays the {@code Wishlist} or name of a {@code TravelPlan} using a"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * {@code NameCard}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    class TravelPlanListViewCell extends ListCell\u003cTravelPlan\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        protected void updateItem(TravelPlan travelPlan, boolean empty) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            super.updateItem(travelPlan, empty);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            if (empty || travelPlan \u003d\u003d null) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                setGraphic(new NameCard(travelPlan.getName().toString()).getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.logic.wanderlustlogic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\"; // TODO: UPDATE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/AccommodationCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * An UI component that displays information of an {@code Accommodation}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class AccommodationCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String FXML \u003d \"./cards/AccommodationListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public final Accommodation accommodation;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label startToEndDates;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an {@code AccommodationCard} with the given {@code Accommodation} and index to display."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public AccommodationCard(Accommodation accommodation, int displayedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.accommodation \u003d accommodation;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name.setText(accommodation.getName().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        startToEndDates.setText(accommodation.getStartDate().toString() + \" to \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                + accommodation.getEndDate().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        cost.setText(\"Cost: $\" + accommodation.getCost().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        address.setText(\"Location: \" + accommodation.getLocation().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!(other instanceof AccommodationCard)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        AccommodationCard card \u003d (AccommodationCard) other;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 accommodation.equals(card.accommodation);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/ActivityCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * An UI component that displays information of a {@code Activity}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class ActivityCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String FXML \u003d \"./cards/ActivityListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public final Activity activity;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label levelOfImportance;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label activityDateTime;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates an {@code ActivityCard} with the given {@code Activity} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityCard(Activity activity, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.activity \u003d activity;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name.setText(activity.getName().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        address.setText(\"Location: \" + activity.getLocation().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        cost.setText(\"Cost: $\" + activity.getCost().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        levelOfImportance.setText(\"Importance: \" + activity.getLevelOfImportance().toString());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityDateTime.setText(\"Date \u0026 Time: \" + activity.getActivityDateTime().toString());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!(other instanceof FriendCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ActivityCard card \u003d (ActivityCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 activity.equals(card.activity);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/FriendCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " * An UI component that displays information of a {@code Friend}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class FriendCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String FXML \u003d \"./cards/FriendListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public final Friend friend;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label passport;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code FriendCard} with the given {@code Friend} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public FriendCard(Friend friend, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.friend \u003d friend;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name.setText(friend.getName().toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        passport.setText(\"Passport: \" + friend.getPassport().toString());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        phone.setText(\"Phone: \" + friend.getPhone().toString());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (!(other instanceof FriendCard)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        FriendCard card \u003d (FriendCard) other;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u0026\u0026 friend.equals(card.friend);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/cards/NameCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.ui.cards;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.ui.UiPart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class NameCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static final String FXML \u003d \"./cards/NameCard.fxml\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code NameCard} with the given {@code value}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public NameCard(String value) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name.setText(value);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 21
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "         title\u003d\"Wanderlust\" minWidth\u003d\"820\" minHeight\u003d\"500\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cHBox styleClass\u003d\"pane-with-border\" HBox.hgrow\u003d\"ALWAYS\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003cVBox fx:id\u003d\"travelPlanner\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"250\" prefWidth\u003d\"250\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cStackPane fx:id\u003d\"travelPlannerPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003cVBox fx:id\u003d\"travelPlan\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"250\" prefWidth\u003d\"250\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cStackPane fx:id\u003d\"travelPlanPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003cVBox fx:id\u003d\"travelObjectList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"400\" prefWidth\u003d\"400\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                VBox.vgrow\u003d\"ALWAYS\" HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cStackPane fx:id\u003d\"travelObjectListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/HBox\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                   minHeight\u003d\"50\" prefHeight\u003d\"50\" maxHeight\u003d\"50\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 19,
      "-": 50
    }
  },
  {
    "path": "src/main/resources/view/TravelPlanObjectListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Tab?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.TabPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": " \u003cTabPane VBox.vgrow\u003d\"ALWAYS\" xmlns\u003d\"http://javafx.com/javafx/11.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "      \u003cTab closable\u003d\"false\" text\u003d\"Activities \"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                  \u003cListView fx:id\u003d\"activityListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "      \u003c/Tab\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "      \u003cTab closable\u003d\"false\" text\u003d\"Accommodations \"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                  \u003cListView fx:id\u003d\"accommodationListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "      \u003c/Tab\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "      \u003cTab closable\u003d\"false\" text\u003d\"Friends \"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                  \u003cListView fx:id\u003d\"friendListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "      \u003c/Tab\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/TabPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 20,
      "-": 5
    }
  },
  {
    "path": "src/main/resources/view/TravelPlanPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cVBox fx:id\u003d\"travelPlanPanel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"startEndDate\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"startDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startDate\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel styleClass\u003d\"cell_small_label\" text\u003d\"  to  \" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"endDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$endDate\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cVBox fx:id\u003d\"travelObjectLists\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cInsets top\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"accommodations\" styleClass\u003d\"cell_medium_label, block_label\" text\u003d\"Accommodations\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"friends\" styleClass\u003d\"cell_medium_label, block_label\" text\u003d\"Travel Friends\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"activities\" styleClass\u003d\"cell_medium_label, block_label\" text\u003d\"Activities\"/\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"schedule\" styleClass\u003d\"cell_medium_label, block_label\" text\u003d\"Schedule\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 27
    }
  },
  {
    "path": "src/main/resources/view/TravelPlannerPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cVBox fx:id\u003d\"travelPlanPanel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cPane\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"50\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"Wanderlust\" styleClass\u003d\"cell_big_label\" text\u003d\"Wanderlust\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/Pane\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cListView fx:id\u003d\"travelPlanListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 19
    }
  },
  {
    "path": "src/main/resources/view/WishlistPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.*?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cVBox fx:id\u003d\"travelPlanPanel\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"Wishlist\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cVBox fx:id\u003d\"travelObjectLists\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cInsets top\u003d\"20\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"activities\" styleClass\u003d\"cell_medium_label, block_label\" text\u003d\"Activities\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 18
    }
  },
  {
    "path": "src/main/resources/view/cards/AccommodationListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_medium_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_medium_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"cost\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cost\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"startToEndDates\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startToEndDates\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 34
    }
  },
  {
    "path": "src/main/resources/view/cards/ActivityListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_medium_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_medium_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"cost\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cost\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"levelOfImportance\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$levelOfImportance\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"activityDateTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$activityDateTime\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 35
    }
  },
  {
    "path": "src/main/resources/view/cards/FriendListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_medium_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_medium_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"passport\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$passport\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 33
    }
  },
  {
    "path": "src/main/resources/view/cards/NameCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003cPane fx:id\u003d\"nameCard\" styleClass\u003d\"centralise\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cInsets top\u003d\"10\" bottom\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_medium_label, middle_label\" text\u003d\"\\$name\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "\u003c/Pane\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 12
    }
  },
  {
    "path": "src/main/resources/view/cards/PersonListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_medium_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_medium_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonAddressBookStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookStorage(temporaryFolder.resolve(\"addressBook.json\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Setup LogicManager with JsonAddressBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAddressBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAddressBook.json\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        StorageManager storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(expectedPerson);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class JsonAddressBookIoExceptionThrowingStub extends JsonAddressBookStorage {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private JsonAddressBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "-": 160
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "-": 43
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.PersonBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_PERSON, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddressBook(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 193
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.setPerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 4,
      "-": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                new NameContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d preparePredicate(\"Kurz Elle Kunz\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(CARL, ELLE, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private NameContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return new NameContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 4,
      "-": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.PersonBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_PERSON));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "-": 208
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 195
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.PersonBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e addressBook.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e addressBook.hasPerson(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(ALICE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(ALICE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addressBook.hasPerson(editedAlice));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e addressBook.getPersonList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "-": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.AddressBookBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(), new AddressBook(modelManager.getAddressBook()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"address/book/file/path\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(Paths.get(\"new/address/book/file/path\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAddressBookFilePath(null));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath_validPath_setsAddressBookFilePath() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Path path \u003d Paths.get(\"address/book/file/path\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setAddressBookFilePath(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(path, modelManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasPerson(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hasPerson_personInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.addPerson(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.hasPerson(ALICE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredPersonList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withPerson(ALICE).withPerson(BENSON).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] keywords \u003d ALICE.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        differentUserPrefs.setAddressBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "-": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/ActivityTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.THEMEPARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ZOO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ActivityTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void isSameActivity() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(ZOO.isSameActivity(ZOO));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.isSameActivity(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different Cost and Location -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Activity editedZoo \u003d new ActivityBuilder(ZOO).withCost(\"10\").withLocation(\"123 Pasir Ris Road\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(ZOO.isSameActivity(editedZoo));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        editedZoo \u003d new ActivityBuilder(ZOO).withName(\"Singapore Mandai Bird Park\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.isSameActivity(editedZoo));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Activity zooCopy \u003d new ActivityBuilder(ZOO).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(ZOO.equals(zooCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(ZOO.equals(ZOO));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(5));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different Activity -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(THEMEPARK));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Activity editedZoo \u003d new ActivityBuilder(ZOO).withName(\"Park\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(editedZoo));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different Cost -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        editedZoo \u003d new ActivityBuilder(ZOO).withCost(\"10\").build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(editedZoo));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different Location -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        editedZoo \u003d new ActivityBuilder(ZOO).withLocation(\"123 Pasir Ris Park\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(editedZoo));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different level of importance -\u003e returns false"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        editedZoo \u003d new ActivityBuilder(ZOO).withLevelOfImportance(\"1\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(editedZoo));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different date and time -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        editedZoo \u003d new ActivityBuilder(ZOO).withDateTime(\"2020-12-31 12:00\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(ZOO.equals(editedZoo));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "jiaweiteo": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/ImportanceTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class ImportanceTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Importance(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_invalidImportance_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String invalidImportance \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Importance(invalidImportance));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void isValidImportance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null Importance number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Importance.isValidImportance(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // invalid Importance numbers"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\"-91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\"Importance\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Importance.isValidImportance(\"6\")); // out of range"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // valid Importance numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Importance.isValidImportance(\"1\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Importance.isValidImportance(\"2\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Importance.isValidImportance(\"5\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/activity/UniqueActivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.activity;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.THEMEPARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ZOO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.exceptions.ActivityNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import seedu.address.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class UniqueActivityListTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    private final UniqueActivityList uniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void contains_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.contains(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void contains_activityNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(uniqueActivityList.contains(ZOO));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void contains_activityInList_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(uniqueActivityList.contains(ZOO));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void contains_activityWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Activity editedZoo \u003d new ActivityBuilder(ZOO).withLocation(\"2020-10-10 12:00\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(uniqueActivityList.contains(editedZoo));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void add_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.add(null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void add_duplicateActivity_throwsDuplicateactivityException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(DuplicateActivityException.class, () -\u003e uniqueActivityList.add(ZOO));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_nullTargetActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivity(null, ZOO));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_nullEditedActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivity(ZOO, null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_targetActivityNotInList_throwsActivityNotFoundException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(ActivityNotFoundException.class, () -\u003e uniqueActivityList.setActivity(ZOO, ZOO));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_editedActivityIsSameActivity_success() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.setActivity(ZOO, ZOO);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        UniqueActivityList expecteduniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expecteduniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(expecteduniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_editedActivityHasSameIdentity_success() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        Activity editedZoo \u003d new ActivityBuilder(ZOO).withLocation(\"2020-10-10 12:00\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.setActivity(ZOO, editedZoo);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        UniqueActivityList expecteduniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expecteduniqueActivityList.add(editedZoo);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(expecteduniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_editedActivityHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.setActivity(ZOO, THEMEPARK);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        UniqueActivityList expecteduniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expecteduniqueActivityList.add(THEMEPARK);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(expecteduniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivity_editedActivityHasNonUniqueIdentity_throwsDuplicateactivityException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(THEMEPARK);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(DuplicateActivityException.class, () -\u003e uniqueActivityList.setActivity(ZOO, THEMEPARK));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void remove_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.remove(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void remove_activityDoesNotExist_throwsActivityNotFoundException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(ActivityNotFoundException.class, () -\u003e uniqueActivityList.remove(ZOO));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void remove_existingActivity_removesActivity() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.remove(ZOO);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        UniqueActivityList expecteduniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(expecteduniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivities_nullUniqueActivityList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivities((UniqueActivityList) null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivities_uniqueActivityList_replacesOwnListWithProvideduniqueActivityList() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        UniqueActivityList expecteduniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expecteduniqueActivityList.add(THEMEPARK);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.setActivities(expecteduniqueActivityList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(expecteduniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivities_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueActivityList.setActivities((List\u003cActivity\u003e) null));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivities_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.add(ZOO);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cActivity\u003e activityList \u003d Collections.singletonList(THEMEPARK);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        uniqueActivityList.setActivities(activityList);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        UniqueActivityList expecteduniqueActivityList \u003d new UniqueActivityList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        expecteduniqueActivityList.add(THEMEPARK);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertEquals(expecteduniqueActivityList, uniqueActivityList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void setActivities_listWithDuplicateActivities_throwsDuplicateActivityException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cActivity\u003e listWithDuplicateActivities \u003d Arrays.asList(ZOO, ZOO);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(DuplicateActivityException.class, ()"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            -\u003e uniqueActivityList.setActivities(listWithDuplicateActivities));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "            -\u003e uniqueActivityList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "jiaweiteo": 163
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/CostTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class CostTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Cost(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_invalidCost_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String invalidCost \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Cost(invalidCost));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void isValidCost() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null Cost number"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Cost.isValidCost(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // invalid Cost numbers"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Cost.isValidCost(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Cost.isValidCost(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Cost.isValidCost(\"-91\")); // negative cost"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Cost.isValidCost(\"Cost\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Cost.isValidCost(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Cost.isValidCost(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // valid Cost numbers"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Cost.isValidCost(\"911\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Cost.isValidCost(\"93121534\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Cost.isValidCost(\"124293842033123\")); // long Cost numbers"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null Location"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // invalid Locationes"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // valid Locationes"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Zoo\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withName(\"Zoo Park\").build()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(predicate.test(new ActivityBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // Keywords match Cost, Location and Date, Level of Importance, but does not match name"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(predicate.test(new ActivityBuilder().withName(\"Hello\").withCost(\"100\").withLevelOfImportance(\"3\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "                .withLocation(\"124 Mandai Road\").withDateTime(\"2020-10-10 12:00\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "jiaweiteo": 73
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e person.getTags().remove(0));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isSamePerson() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(ALICE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone and email -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // same name, same phone, same email, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.isSamePerson(editedAlice));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person aliceCopy \u003d new PersonBuilder(ALICE).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(aliceCopy));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ALICE.equals(ALICE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(5));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(BOB));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAlice \u003d new PersonBuilder(ALICE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ALICE.equals(editedAlice));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "-": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList uniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(ALICE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void contains_personWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(uniquePersonList.contains(editedAlice));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add_duplicatePerson_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.add(ALICE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullTargetPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(null, ALICE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_nullEditedPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPerson(ALICE, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_targetPersonNotInList_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.setPerson(ALICE, ALICE));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonIsSamePerson_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, ALICE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedAlice \u003d new PersonBuilder(ALICE).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, editedAlice);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPerson(ALICE, BOB);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPerson_editedPersonHasNonUniqueIdentity_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPerson(ALICE, BOB));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_personDoesNotExist_throwsPersonNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(PersonNotFoundException.class, () -\u003e uniquePersonList.remove(ALICE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void remove_existingPerson_removesPerson() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.remove(ALICE);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullUniquePersonList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((UniquePersonList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_uniquePersonList_replacesOwnListWithProvidedUniquePersonList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(expectedUniquePersonList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniquePersonList.setPersons((List\u003cPerson\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.add(ALICE);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e personList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        uniquePersonList.setPersons(personList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UniquePersonList expectedUniquePersonList \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedUniquePersonList.add(BOB);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniquePersonList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons_listWithDuplicatePersons_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e listWithDuplicatePersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DuplicatePersonException.class, () -\u003e uniquePersonList.setPersons(listWithDuplicatePersons));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e uniquePersonList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 3,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/model/travelplan/AccommodationListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_COST_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.ALICEHOTEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.getTypicalAccommodationList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.exceptions.DuplicateAccommodationException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.AccommodationBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class AccommodationListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final AccommodationList accommodationList \u003d new AccommodationList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(Collections.emptyList(), accommodationList.getAccommodationList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e accommodationList.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withValidReadOnlyAccommodationList_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        AccommodationList newData \u003d getTypicalAccommodationList(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodationList.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(newData, accommodationList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withDuplicateAccommodations_throwsDuplicateAccommodationException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Two accommodations with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Accommodation editedAliceHotel \u003d new AccommodationBuilder(ALICEHOTEL).withCost(VALID_COST_B).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cAccommodation\u003e newAccommodations \u003d Arrays.asList(ALICEHOTEL, editedAliceHotel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        AccommodationListStub newData \u003d new AccommodationListStub(newAccommodations);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateAccommodationException.class, () -\u003e accommodationList.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasAccommodation_nullAccommodation_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e accommodationList.hasAccommodation(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasAccommodation_accommodationNotInAccommodationList_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(accommodationList.hasAccommodation(ALICEHOTEL));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasAccommodation_accommodationInAccommodationList_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodationList.addAccommodation(ALICEHOTEL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(accommodationList.hasAccommodation(ALICEHOTEL));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasAccommodation_accommodationWithSameIdentityFieldsInAccommodationList_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodationList.addAccommodation(ALICEHOTEL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Accommodation editedAliceHotel \u003d new AccommodationBuilder(ALICEHOTEL).withCost(VALID_COST_B).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(accommodationList.hasAccommodation(editedAliceHotel));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getAccommodationList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                accommodationList.getAccommodationList().remove(0));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * A stub ReadOnlyAccommodationList whose accommodations list can violate interface constraints."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static class AccommodationListStub implements ReadOnlyAccommodationList {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private final ObservableList\u003cAccommodation\u003e accommodations \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        AccommodationListStub(Collection\u003cAccommodation\u003e accommodations) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.accommodations.setAll(accommodations);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        public ObservableList\u003cAccommodation\u003e getAccommodationList() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return accommodations;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/model/travelplan/ActivityListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ZOO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.getTypicalActivityList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.ReadOnlyActivityList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class ActivityListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final ActivityList activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(Collections.emptyList(), activityList.getActivityList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activityList.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withValidReadOnlyActivityList_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ActivityList newData \u003d getTypicalActivityList(2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityList.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(newData, activityList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withDuplicateActivities_throwsDuplicateActivityException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Two activities with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Activity editedZoo \u003d new ActivityBuilder(ZOO).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cActivity\u003e newActivities \u003d Arrays.asList(ZOO, editedZoo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ActivityListStub newData \u003d new ActivityListStub(newActivities);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateActivityException.class, () -\u003e activityList.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasActivity_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e activityList.hasActivity(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasActivity_activityNotInActivityList_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(activityList.hasActivity(ZOO));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasActivity_activityInActivityList_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityList.addActivity(ZOO);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(activityList.hasActivity(ZOO));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getActivityList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e activityList.getActivityList().remove(0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * A stub ReadOnlyActivityList whose activities list can violate interface constraints."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static class ActivityListStub implements ReadOnlyActivityList {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private final ObservableList\u003cActivity\u003e activities \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ActivityListStub(Collection\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.activities.setAll(activities);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return activities;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/model/travelplan/FriendListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_PHONE_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.getTypicalFriendList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.friend.exceptions.DuplicateFriendException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.FriendBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class FriendListTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final FriendList friendList \u003d new FriendList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(Collections.emptyList(), friendList.getFriendList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e friendList.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withValidReadOnlyFriendList_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        FriendList newData \u003d getTypicalFriendList(1);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friendList.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(newData, friendList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withDuplicateFriends_throwsDuplicateFriendException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Two friends with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Friend editedAlice \u003d new FriendBuilder(ALICE).withPhone(VALID_PHONE_B).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cFriend\u003e newFriends \u003d Arrays.asList(ALICE, editedAlice);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        FriendListStub newData \u003d new FriendListStub(newFriends);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateFriendException.class, () -\u003e friendList.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasFriend_nullFriend_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e friendList.hasFriend(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasFriend_friendNotInFriendList_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(friendList.hasFriend(ALICE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasFriend_friendInFriendList_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friendList.addFriend(ALICE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(friendList.hasFriend(ALICE));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasFriend_friendWithSameIdentityFieldsInFriendList_returnsTrue() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friendList.addFriend(ALICE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Friend editedAlice \u003d new FriendBuilder(ALICE).withPhone(VALID_PHONE_B).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(friendList.hasFriend(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getFriendList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e friendList.getFriendList().remove(0));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * A stub ReadOnlyFriendList whose friends list can violate interface constraints."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static class FriendListStub implements ReadOnlyFriendList {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private final ObservableList\u003cFriend\u003e friends \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        FriendListStub(Collection\u003cFriend\u003e friends) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.friends.setAll(friends);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        public ObservableList\u003cFriend\u003e getFriendList() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return friends;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 99
    }
  },
  {
    "path": "src/test/java/seedu/address/model/travelplan/TravelPlanTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_ACCOMMODATION_LIST_B;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_ACTIVITY_LIST_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_END_DATE_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_FRIEND_LIST_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_NAME_B;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_START_DATE_B;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.AUSTRALIA_TRIP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.BOSTON_TRIP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.TravelPlanBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TravelPlanTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan travelPlan \u003d new TravelPlanBuilder().build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e travelPlan.getFriendList().remove(0));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e travelPlan.getAccommodationList().remove(0));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e travelPlan.getActivityList().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void isSameTravelPlan() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(AUSTRALIA_TRIP.isSameTravelPlan(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.isSameTravelPlan(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different startDate and endDate -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withStartDate(VALID_START_DATE_B)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withEndDate(VALID_END_DATE_B).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.isSameTravelPlan(editedAustraliaTrip));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.isSameTravelPlan(editedAustraliaTrip));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same name, same start date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withEndDate(VALID_END_DATE_B)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withActivityList(VALID_ACTIVITY_LIST_B).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(AUSTRALIA_TRIP.isSameTravelPlan(editedAustraliaTrip));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same name, same end date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withEndDate(VALID_START_DATE_B)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withFriendList(VALID_FRIEND_LIST_B).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(AUSTRALIA_TRIP.isSameTravelPlan(editedAustraliaTrip));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same name, same start date, same end date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withEndDate(VALID_START_DATE_B)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withFriendList(VALID_FRIEND_LIST_B)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withAccommodationList(VALID_ACCOMMODATION_LIST_B)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withActivityList(VALID_ACTIVITY_LIST_B).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(AUSTRALIA_TRIP.isSameTravelPlan(editedAustraliaTrip));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan australiaCopy \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(AUSTRALIA_TRIP.equals(australiaCopy));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(AUSTRALIA_TRIP.equals(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(5));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(BOSTON_TRIP));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withName(VALID_NAME_B).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(editedTravelPlan));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withStartDate(VALID_START_DATE_B).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(editedTravelPlan));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different end date -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withEndDate(VALID_END_DATE_B).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(editedTravelPlan));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different accommodation list -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withAccommodationList(VALID_ACCOMMODATION_LIST_B)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(editedTravelPlan));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different activity list -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withActivityList(VALID_ACTIVITY_LIST_B).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(editedTravelPlan));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // different friend list -\u003e returns false"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        editedTravelPlan \u003d new TravelPlanBuilder(AUSTRALIA_TRIP).withFriendList(VALID_FRIEND_LIST_B).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(AUSTRALIA_TRIP.equals(editedTravelPlan));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 108
    }
  },
  {
    "path": "src/test/java/seedu/address/model/travelplan/UniqueTravelPlanListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.travelplan;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_ACCOMMODATION_LIST_B;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_ACTIVITY_LIST_B;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.ConstructorUtils.VALID_FRIEND_LIST_B;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.AUSTRALIA_TRIP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalTravelPlans.BOSTON_TRIP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.exceptions.DuplicateTravelPlanException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.exceptions.TravelPlanNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.TravelPlanBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class UniqueTravelPlanListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final UniqueTravelPlanList uniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void contains_nullTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTravelPlanList.contains(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void contains_travelPlanNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(uniqueTravelPlanList.contains(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void contains_travelPlanInList_returnsTrue() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(uniqueTravelPlanList.contains(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void contains_travelPlanWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withAccommodationList(VALID_ACCOMMODATION_LIST_B)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withActivityList(VALID_ACTIVITY_LIST_B)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withFriendList(VALID_FRIEND_LIST_B)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(uniqueTravelPlanList.contains(editedAustraliaTrip));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void add_nullTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTravelPlanList.add(null));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void add_duplicateTravelPlan_throwsDuplicateTravelPlanException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateTravelPlanException.class, () -\u003e uniqueTravelPlanList.add(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_nullTargetTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTravelPlanList.setTravelPlan(null, AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_nullEditedTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                uniqueTravelPlanList.setTravelPlan(AUSTRALIA_TRIP, null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_targetTravelPlanNotInList_throwsTravelPlanNotFoundException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(TravelPlanNotFoundException.class, () -\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                uniqueTravelPlanList.setTravelPlan(AUSTRALIA_TRIP, AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_editedTravelPlanIsSameTravelPlan_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.setTravelPlan(AUSTRALIA_TRIP, AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        UniqueTravelPlanList expectedUniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedUniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedUniqueTravelPlanList, uniqueTravelPlanList);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_editedTravelPlanHasSameIdentity_success() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlan editedAustraliaTrip \u003d new TravelPlanBuilder(AUSTRALIA_TRIP)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withAccommodationList(VALID_ACCOMMODATION_LIST_B)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withActivityList(VALID_ACTIVITY_LIST_B)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .withFriendList(VALID_FRIEND_LIST_B)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.setTravelPlan(AUSTRALIA_TRIP, editedAustraliaTrip);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        UniqueTravelPlanList expectedUniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedUniqueTravelPlanList.add(editedAustraliaTrip);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedUniqueTravelPlanList, uniqueTravelPlanList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_editedTravelPlanHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.setTravelPlan(AUSTRALIA_TRIP, BOSTON_TRIP);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        UniqueTravelPlanList expectedUniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedUniqueTravelPlanList.add(BOSTON_TRIP);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedUniqueTravelPlanList, uniqueTravelPlanList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlan_editedTravelPlanHasNonUniqueIdentity_throwsDuplicateTravelPlanException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(BOSTON_TRIP);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateTravelPlanException.class, () -\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                uniqueTravelPlanList.setTravelPlan(AUSTRALIA_TRIP, BOSTON_TRIP));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void remove_nullTravelPlan_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTravelPlanList.remove(null));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void remove_travelPlanDoesNotExist_throwsTravelPlanNotFoundException() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(TravelPlanNotFoundException.class, () -\u003e uniqueTravelPlanList.remove(AUSTRALIA_TRIP));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void remove_existingTravelPlan_removesTravelPlan() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.remove(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        UniqueTravelPlanList expectedUniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedUniqueTravelPlanList, uniqueTravelPlanList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlans_nullUniqueTravelPlanList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                uniqueTravelPlanList.setTravelPlans((UniqueTravelPlanList) null));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlans_uniqueTravelPlanList_replacesOwnListWithProvidedUniqueTravelPlanList() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        UniqueTravelPlanList expectedUniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedUniqueTravelPlanList.add(BOSTON_TRIP);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.setTravelPlans(expectedUniqueTravelPlanList);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedUniqueTravelPlanList, uniqueTravelPlanList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlans_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueTravelPlanList.setTravelPlans((List\u003cTravelPlan\u003e) null));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlans_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.add(AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cTravelPlan\u003e travelPlanList \u003d Collections.singletonList(BOSTON_TRIP);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        uniqueTravelPlanList.setTravelPlans(travelPlanList);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        UniqueTravelPlanList expectedUniqueTravelPlanList \u003d new UniqueTravelPlanList();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        expectedUniqueTravelPlanList.add(BOSTON_TRIP);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(expectedUniqueTravelPlanList, uniqueTravelPlanList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void setTravelPlans_listWithDuplicateTravelPlans_throwsDuplicateTravelPlanException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cTravelPlan\u003e listWithDuplicateTravelPlans \u003d Arrays.asList(AUSTRALIA_TRIP, AUSTRALIA_TRIP);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateTravelPlanException.class, () -\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                uniqueTravelPlanList.setTravelPlans(listWithDuplicateTravelPlans));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "                uniqueTravelPlanList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/model/wishlist/WishlistTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.model.wishlist;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.ARCHERY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.getTypicalWishlist;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.exceptions.DuplicateActivityException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.ReadOnlyActivityList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class WishlistTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private final Wishlist wishlist \u003d new Wishlist();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(Collections.emptyList(), wishlist.getActivityList());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wishlist.resetData(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withValidReadOnlyWishlist_replacesData() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Wishlist newData \u003d getTypicalWishlist();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist.resetData(newData);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertEquals(newData, wishlist);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void resetData_withDuplicateActivities_throwsDuplicateActivityException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        // Two activities with the same identity fields"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Activity editedZoo \u003d new ActivityBuilder(ARCHERY).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cActivity\u003e newActivities \u003d Arrays.asList(ARCHERY, editedZoo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        WishlistStub newData \u003d new WishlistStub(newActivities);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(DuplicateActivityException.class, () -\u003e wishlist.resetData(newData));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasActivity_nullActivity_throwsNullPointerException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e wishlist.hasActivity(null));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasActivity_activityNotInWishlist_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertFalse(wishlist.hasActivity(ARCHERY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void hasActivity_activityInWishlist_returnsTrue() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        wishlist.addActivity(ARCHERY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertTrue(wishlist.hasActivity(ARCHERY));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public void getWishlist_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e wishlist.getActivityList().remove(0));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * A stub ReadOnlyWishlist whose activities list can violate interface constraints."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private static class WishlistStub implements ReadOnlyActivityList {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        private final ObservableList\u003cActivity\u003e activities \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        WishlistStub(Collection\u003cActivity\u003e activities) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            this.activities.setAll(activities);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        public ObservableList\u003cActivity\u003e getActivityList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            return activities;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 92
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedPersonTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.JsonAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAdaptedPersonTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, invalidTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 109
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAddressBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonAddressBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonAddressBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAddressBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonAddressBookStorage(Paths.get(filePath)).readAddressBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"notJsonFormatAddressBook.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_invalidAndValidPersonAddressBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAddressBook(\"invalidAndValidPersonAddressBook.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAddressBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage jsonAddressBookStorage \u003d new JsonAddressBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(HOON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        original.removePerson(ALICE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        original.addPerson(IDA);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonAddressBookStorage.saveAddressBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonAddressBookStorage.readAddressBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonAddressBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveAddressBook(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAddressBook(new AddressBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 4,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAddressBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.typicals.TypicalPersons;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonSerializableAddressBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TYPICAL_PERSONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalPersonsAddressBook.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path INVALID_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidPersonAddressBook.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path DUPLICATE_PERSON_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicatePersonAddressBook.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_duplicatePersons_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonSerializableAddressBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_PERSON_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                JsonSerializableAddressBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAddressBook.MESSAGE_DUPLICATE_PERSON,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonAddressBookStorage addressBookStorage \u003d new JsonAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonAddressBookStorage} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAddressBookStorageTest} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ConstructorUtils.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.getTypicalAccommodationList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.getTypicalActivityList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.getTypicalFriendList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class ConstructorUtils {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_NAME_A \u003d \"Alice\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_NAME_B \u003d \"Bob\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_START_DATE_A \u003d \"2020-01-01\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_START_DATE_B \u003d \"2020-03-03\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_END_DATE_A \u003d \"2020-12-12\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_END_DATE_B \u003d \"2020-11-11\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_PHONE_A \u003d \"94351253\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_PHONE_B \u003d \"98765432\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_PASSPORT_A \u003d \"A1234567\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_PASSPORT_B \u003d \"B1234567\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_COST_A \u003d \"100\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String VALID_COST_B \u003d \"255.50\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final AccommodationList VALID_ACCOMMODATION_LIST_A \u003d getTypicalAccommodationList(1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final AccommodationList VALID_ACCOMMODATION_LIST_B \u003d getTypicalAccommodationList(2);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final ActivityList VALID_ACTIVITY_LIST_A \u003d getTypicalActivityList(1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final ActivityList VALID_ACTIVITY_LIST_B \u003d getTypicalActivityList(2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final FriendList VALID_FRIEND_LIST_A \u003d getTypicalFriendList(1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final FriendList VALID_FRIEND_LIST_B \u003d getTypicalFriendList(2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/builders/AccommodationBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.builders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class AccommodationBuilder {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Barry\u0027s Farmhouse\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"2020-10-10\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"2020-11-11\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"100 Acre Woods\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"123\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private WanderlustDate startDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private WanderlustDate endDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code AccommodationBuilder} with the default details."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public AccommodationBuilder() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        cost \u003d new Cost(DEFAULT_COST);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        startDate \u003d new WanderlustDate(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        endDate \u003d new WanderlustDate(DEFAULT_END_DATE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Initializes the AccommodationBuilder with the data of {@code AccommodationToCopy}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public AccommodationBuilder(Accommodation accommodationToCopy) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d accommodationToCopy.getName();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        location \u003d accommodationToCopy.getLocation();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        cost \u003d accommodationToCopy.getCost();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        startDate \u003d accommodationToCopy.getStartDate();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        endDate \u003d accommodationToCopy.getEndDate();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code Name} of the {@code Accommodation} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public AccommodationBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code startDate} of the {@code Accommodation} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public AccommodationBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.startDate \u003d new WanderlustDate(startDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code endDate} of the {@code Accommodation} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public AccommodationBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.endDate \u003d new WanderlustDate(endDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code Cost} of the {@code Accommodation} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public AccommodationBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.cost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code Location} of the {@code Accommodation} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public AccommodationBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Accommodation build() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Accommodation(name, startDate, endDate, cost, location);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/builders/ActivityBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.builders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Importance;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.WanderlustDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Cost;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Location;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class ActivityBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Singapore Mandai Zoo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"124 Mandai Road\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"100\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_LEVELOFIMPORTANCE \u003d \"3\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_ACTIVITYDATETIME \u003d \"2020-10-10 12:00\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Importance levelOfImportance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private WanderlustDateTime activityDateTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {@code ActivityBuilder} with the default details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        cost \u003d new Cost(DEFAULT_COST);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        levelOfImportance \u003d new Importance(DEFAULT_LEVELOFIMPORTANCE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityDateTime \u003d new WanderlustDateTime(DEFAULT_ACTIVITYDATETIME);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Initializes the ActivityBuilder with the data of {@code ActivityToCopy}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder(Activity activityToCopy) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d activityToCopy.getName();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        location \u003d activityToCopy.getLocation();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        cost \u003d activityToCopy.getCost();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        levelOfImportance \u003d activityToCopy.getLevelOfImportance();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityDateTime \u003d activityToCopy.getActivityDateTime();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code Name} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder withName(String name) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code Location} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder withLocation(String address) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.location \u003d new Location(address);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code Cost} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.cost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code LevelOfImportance} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder withLevelOfImportance(String importance) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.levelOfImportance \u003d new Importance(importance);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code activityDateTime} of the {@code Activity} that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public ActivityBuilder withDateTime(String activityDateTime) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.activityDateTime \u003d new WanderlustDateTime(activityDateTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public Activity build() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new Activity(name, location, cost, levelOfImportance, activityDateTime);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/builders/AddressBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.builders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withPerson(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new {@code Person} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder withPerson(Person person) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/builders/FriendBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.builders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.friend.Passport;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.friend.Phone;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Friend objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class FriendBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PASSPORT \u003d \"M1234567\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Passport passport;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FriendBuilder} with the default details."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public FriendBuilder() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        passport \u003d new Passport(DEFAULT_PASSPORT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the FriendBuilder with the data of {@code friendToCopy}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public FriendBuilder(Friend friendToCopy) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d friendToCopy.getName();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        passport \u003d friendToCopy.getPassport();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d friendToCopy.getPhone();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Friend} that we are building."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public FriendBuilder withName(String name) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Friend} that we are building."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public FriendBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Passport} of the {@code Friend} that we are building."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public FriendBuilder withPassport(String passport) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.passport \u003d new Passport(passport);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public Friend build() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Friend(name, passport, phone);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/builders/PersonBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.builders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code PersonBuilder} with the default details."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/builders/TravelPlanBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.builders;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.commons.WanderlustDate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TravelPlanBuilder {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Trip to Hawaii\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"2020-12-12\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"2020-12-25\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private WanderlustDate startDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private WanderlustDate endDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private ActivityList activityList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private AccommodationList accommodationList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private FriendList friendList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Creates a {TravelPlanBuilder} with the default details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        startDate \u003d new WanderlustDate(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        endDate \u003d new WanderlustDate(DEFAULT_END_DATE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityList \u003d new ActivityList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodationList \u003d new AccommodationList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friendList \u003d new FriendList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Initializes the TravelPlanBuilder with the data of {@code TravelPlanToCopy}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder(TravelPlan travelPlanToCopy) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        name \u003d travelPlanToCopy.getName();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        startDate \u003d travelPlanToCopy.getStartDate();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        endDate \u003d travelPlanToCopy.getEndDate();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        activityList \u003d travelPlanToCopy.getActivities();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        friendList \u003d travelPlanToCopy.getFriends();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        accommodationList \u003d travelPlanToCopy.getAccommodations();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code Name} of the {@code TravelPlan} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code startDate} of the {@code TravelPlan} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.startDate \u003d new WanderlustDate(startDate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code endDate} of the {@code TravelPlan} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.endDate \u003d new WanderlustDate(endDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code ActivityList} of the {@code TravelPlan} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder withActivityList(ActivityList activityList) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.activityList \u003d activityList;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code AccommodationList} of the {@code TravelPlan} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder withAccommodationList(AccommodationList accommodationList) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.accommodationList \u003d accommodationList;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Sets the {@code FriendList} of the {@code TravelPlan} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlanBuilder withFriendList(FriendList friendList) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        this.friendList \u003d friendList;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public TravelPlan build() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new TravelPlan(name, startDate, endDate, activityList, accommodationList, friendList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/typicals/TypicalAccommodations.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.typicals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.accommodation.Accommodation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.AccommodationList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.AccommodationBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TypicalAccommodations {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation ALICEHOTEL \u003d new AccommodationBuilder().withName(\"Alice Hotel\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(\"2020-01-01\").withEndDate(\"2020-02-02\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"100\").withLocation(\"109 Alice Avenue\").build();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation BOBHOTEL \u003d new AccommodationBuilder().withName(\"Hostel by Bob\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(\"2020-02-02\").withEndDate(\"2020-03-03\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"200\").withLocation(\"9 Balestier Road\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation CARLHOTEL \u003d new AccommodationBuilder().withName(\"Carl\u0027s Farmhouse\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(\"2020-03-03\").withEndDate(\"2020-04-04\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"300\").withLocation(\"999 Calihan Street\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation DANHOTEL \u003d new AccommodationBuilder().withName(\"Danny\u0027s Lodge\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(\"2020-04-04\").withEndDate(\"2020-05-05\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"400\").withLocation(\"1 Den Street\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation ELLEHOTEL \u003d new AccommodationBuilder().withName(\"Elle\u0027s\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(\"2020-05-05\").withEndDate(\"2020-06-06\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"500\").withLocation(\"333 Elmo\u0027s World\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation FIONAHOTEL \u003d new AccommodationBuilder().withName(\"Fiona Hotel\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(\"2020-06-06\").withEndDate(\"2020-07-07\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"600\").withLocation(\"Fall Home\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Accommodation GEORGEHOTEL \u003d new AccommodationBuilder().withName(\"George and Georgina\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(\"2020-07-07\").withEndDate(\"2020-08-08\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"700\").withLocation(\"7 GeorgeTown\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TypicalAccommodations() {} // prevents instantiation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns an {@code AccommodationList} with a set of typical accommodations (either set 1 or set 2)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static AccommodationList getTypicalAccommodationList(int set) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (set !\u003d 1 \u0026\u0026 set !\u003d 2) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new IllegalArgumentException(\"getTypicalAccommodationList only takes in set 1 or 2 as argument.\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cAccommodation\u003e accommodations \u003d set \u003d\u003d 1 ? getTypicalAccommodations1() : getTypicalAccommodations2();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        AccommodationList al \u003d new AccommodationList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Accommodation accommodation : accommodations) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            al.addAccommodation(accommodation);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return al;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cAccommodation\u003e getTypicalAccommodations1() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICEHOTEL, BOBHOTEL, CARLHOTEL, DANHOTEL));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cAccommodation\u003e getTypicalAccommodations2() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ELLEHOTEL, FIONAHOTEL, GEORGEHOTEL));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 59
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/typicals/TypicalActivities.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.typicals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.ActivityList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.wishlist.Wishlist;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.ActivityBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TypicalActivities {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity ARCHERY \u003d new ActivityBuilder().withName(\"Archery\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"100.50\").withLevelOfImportance(\"1\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"92 Archery Avenue\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withDateTime(\"2020-09-09 09:00\").build();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity BUNGEEJUMPING \u003d new ActivityBuilder().withName(\"Bungee Jumping\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"225.99\").withLevelOfImportance(\"5\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"1 BungeeJump Gateway\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withDateTime(\"2020-01-01 14:00\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity CAMPING \u003d new ActivityBuilder().withName(\"Camping\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"10\").withLevelOfImportance(\"2\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"100 Secret Woods\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withDateTime(\"2020-10-11 20:00\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity DONUTDATE \u003d new ActivityBuilder().withName(\"Donut Date\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"2\").withLevelOfImportance(\"1\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"Dunkin Donut Palace\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withDateTime(\"2020-11-11 11:00\").build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity ZOO \u003d new ActivityBuilder().withName(\"Singapore Mandai Zoo\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"100\").withLevelOfImportance(\"3\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"124 Mandai Road\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withDateTime(\"2020-10-10 12:00\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity THEMEPARK \u003d new ActivityBuilder().withName(\"Universal Studios Singapore\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"80\").withLevelOfImportance(\"5\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"8 Sentosa Gateway\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withDateTime(\"2020-10-11 12:00\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity SKIING \u003d new ActivityBuilder().withName(\"Gore Mountain Skiing Resort\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"300\").withLevelOfImportance(\"4\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"793 Peaceful Valley Rd\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withDateTime(\"2020-12-12 12:00\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Activity HIKING \u003d new ActivityBuilder().withName(\"Treetop Walk\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withCost(\"0\").withLevelOfImportance(\"2\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withLocation(\"601 Island Club Rd\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withDateTime(\"2020-01-10 12:00\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TypicalActivities() {} // prevents instantiation"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns a {@code Wishlist} with all the typical activities."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static Wishlist getTypicalWishlist() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        Wishlist wl \u003d new Wishlist();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity activity : getTypicalActivities1()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            wl.addActivity(activity);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity activity : getTypicalActivities2()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            wl.addActivity(activity);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return wl;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns an {@code ActivityList} with a set of typical activities (either set 1 or set 2)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static ActivityList getTypicalActivityList(int set) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (set !\u003d 1 \u0026\u0026 set !\u003d 2) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new IllegalArgumentException(\"getTypicalActivityList only takes in set 1 or 2 as argument.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cActivity\u003e activities \u003d set \u003d\u003d 1 ? getTypicalActivities1() : getTypicalActivities2();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        ActivityList al \u003d new ActivityList();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity activity : activities) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            al.addActivity(activity);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return al;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cActivity\u003e getTypicalActivities1() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ARCHERY, BUNGEEJUMPING, CAMPING, DONUTDATE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cActivity\u003e getTypicalActivities2() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ZOO, THEMEPARK, SKIING, HIKING));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 86
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/typicals/TypicalFriends.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.typicals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.friend.Friend;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.FriendList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.FriendBuilder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Friend} objects to be used in tests."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalFriends {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Friend ALICE \u003d new FriendBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPassport(\"A1234567\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\").build();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Friend BENSON \u003d new FriendBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPassport(\"B1234567\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"98765432\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Friend CARL \u003d new FriendBuilder().withName(\"Carl Kurz\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withPassport(\"C1234567\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"95352563\").build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Friend DANIEL \u003d new FriendBuilder().withName(\"Daniel Meier\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withPassport(\"D1234567\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"87652533\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Friend ELLE \u003d new FriendBuilder().withName(\"Elle Meyer\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withPassport(\"E1234567\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withPhone(\"94822241\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Friend FIONA \u003d new FriendBuilder().withName(\"Fiona Kunz\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withPassport(\"F7654321\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withPhone(\"94822427\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Friend GEORGE \u003d new FriendBuilder().withName(\"George Best\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withPassport(\"G7654321\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withPhone(\"94824142\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Friend HOON \u003d new FriendBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withPassport(\"H7654321\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withPhone(\"84824224\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final Friend IDA \u003d new FriendBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withPassport(\"I7654321\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withPhone(\"84821631\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalFriends() {} // prevents instantiation"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns a {@code FriendList} with a set of typical friends (either set 1 or 2)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static FriendList getTypicalFriendList(int set) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        if (set !\u003d 1 \u0026\u0026 set !\u003d 2) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            throw new IllegalArgumentException(\"getTypicalFriendList only takes in set 1 or 2 as argument.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        List\u003cFriend\u003e friends \u003d set \u003d\u003d 1 ? getTypicalFriends1() : getTypicalFriends2();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        FriendList fl \u003d new FriendList();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Friend friend : friends) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            fl.addFriend(friend);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return fl;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cFriend\u003e getTypicalFriends1() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cFriend\u003e getTypicalFriends2() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ELLE, FIONA, GEORGE, HOON, IDA));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 42,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/typicals/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.typicals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 1,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/typicals/TypicalPersons.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.typicals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.PersonBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").build();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 2,
      "-": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/typicals/TypicalTravelPlans.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "package seedu.address.testutil.typicals;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalAccommodations.getTypicalAccommodationList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.getTypicalActivities1;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalActivities.getTypicalActivityList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import static seedu.address.testutil.typicals.TypicalFriends.getTypicalFriendList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.activity.Activity;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplan.TravelPlan;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.model.travelplanner.TravelPlanner;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "import seedu.address.testutil.builders.TravelPlanBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "public class TypicalTravelPlans {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final TravelPlan AUSTRALIA_TRIP \u003d new TravelPlanBuilder().withName(\"Trip to Australia\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(\"2020-01-01\").withEndDate(\"2020-12-12\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withAccommodationList(getTypicalAccommodationList(1))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withActivityList(getTypicalActivityList(1))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withFriendList(getTypicalFriendList(1)).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static final TravelPlan BOSTON_TRIP \u003d new TravelPlanBuilder().withName(\"Trip to Boston\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withStartDate(\"2020-03-03\").withEndDate(\"2021-11-11\")"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withAccommodationList(getTypicalAccommodationList(2))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withActivityList(getTypicalActivityList(2))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            .withFriendList(getTypicalFriendList(2)).build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    private TypicalTravelPlans() {} // prevents instantiation"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     * Returns a {@code TravelPlanner} with all typical travel plans and a typical wishlist."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static TravelPlanner getTypicalTravelPlanner() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        TravelPlanner travelPlanner \u003d new TravelPlanner();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (Activity activity : getTypicalActivities1()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            travelPlanner.addActivity(activity);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        for (TravelPlan travelPlan : getTypicalTravelPlans()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "            travelPlanner.addTravelPlan(travelPlan);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return travelPlanner;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    public static List\u003cTravelPlan\u003e getTypicalTravelPlans() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(AUSTRALIA_TRIP, BOSTON_TRIP));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jeannetoh99"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jeannetoh99": 51
    }
  },
  {
    "path": "test.txt",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jiaweiteo"
        },
        "content": "helloworld"
      }
    ],
    "authorContributionMap": {
      "jiaweiteo": 1
    }
  }
]
