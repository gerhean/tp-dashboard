[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T09-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T09-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "**TrackPad**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "**Introduction**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* TrackPad is a desktop application developed for travelholics to track their past and future travel plans."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "**Site Map**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* [User Guide](docs/UserGuide.md)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* [Developer Guide](docs/DeveloperGuide.md)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* [About Us](docs/AboutUs.md)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Contact Us"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org) "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Libraries used:"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "leeyorktat": 20,
      "-": 5
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    archiveName \u003d \u0027trackpad.jar\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "run{"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "peter-yeh": 2,
      "-": 73
    }
  },
  {
    "path": "config/checkstyle/checkstyle.xml",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE module PUBLIC"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"https://checkstyle.org/dtds/configuration_1_3.dtd\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    This configuration file enforces rules for a modified version of the module\u0027s code standard at"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    https://oss-generic.github.io/process/codingstandards/coding-standards-java.html"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cmodule name\u003d\"Checker\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"FileTabCharacter\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that there are no tab characters in the file. --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"NewlineAtEndOfFile\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Accept LF, CR or CRLF to accomodate devs who prefer different line endings --\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"lineSeparator\" value\u003d\"lf_cr_crlf\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"RegexpSingleline\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    \u003c!-- Checks that FIX-ME is not used in comments.  TO-DO is preferred. --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"format\" value\u003d\"((//.*)|(\\*.*))FIXME\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"message\" value\u003d\u0027TODO is preferred to FIXME.\"\u0027 /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"SuppressionFilter\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"file\" value\u003d\"${config_loc}/suppressions.xml\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"LineLength\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a line is too long. --\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cproperty name\u003d\"max\" value\u003d\"120\"/\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c!-- All Java AST specific tests live under TreeWalker module. --\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmodule name\u003d\"TreeWalker\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Required to allow exceptions in code style --\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SuppressionCommentFilter\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"offCommentFormat\" value\u003d\"CHECKSTYLE.OFF\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"onCommentFormat\" value\u003d\"CHECKSTYLE.ON\\: ([\\w\\|]+)\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"checkFormat\" value\u003d\"$1\"/\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    IMPORT CHECKS"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks the ordering of import statements follow the rules that the default Eclipse formatter uses."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    The order rule \"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\" consists of:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "      1. STATIC: static imports"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "      2. STANDARD_JAVA_PACKAGE: standard java/javax imports"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "      3. SPECIAL_IMPORTS: defined as org imports"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "      4. THIRD_PARTY_PACKAGE: defined as com imports"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CustomImportOrder\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"customImportOrderRules\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            value\u003d\"STATIC###STANDARD_JAVA_PACKAGE###SPECIAL_IMPORTS###THIRD_PARTY_PACKAGE\"/\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"specialImportsRegExp\" value\u003d\"^org\\.\"/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"thirdPartyPackageRegExp\" value\u003d\"^com\\.\"/\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cproperty name\u003d\"sortImportsInGroupAlphabetically\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for redundant import statements."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is redundant if:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "      * It is a duplicate of another import. This is, when a class is imported more than once."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the java.lang package, e.g. importing java.lang.String."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "      * The class non-statically imported is from the same package as the current package."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RedundantImport\"/\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for unused import statements."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    An import statement is unused if:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "      It\u0027s not referenced in the file."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UnusedImports\"/\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AvoidStarImport\"/\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    NAMING CHECKS"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Validate abbreviations (consecutive capital letters) length in identifier name --\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AbbreviationAsWordInName\"\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreFinal\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAbbreviationLength\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"PackageName\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for package names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z]+(\\.[a-z][a-z0-9]{1,})*$\"/\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"TypeName\"\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, final fields against the expression \"^[A-Z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"TypeName\"/\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ConstantName\"\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-private, static, final fields against the expression \"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\". --\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"ConstantName\"/\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"applyToPrivate\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmessage key\u003d\"name.invalidPattern\""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "               value\u003d\"Variable \u0027\u0027{0}\u0027\u0027 should be in ALL_CAPS (if it is a constant) or be private (otherwise).\"/\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"StaticVariableName\"\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates static, non-final fields against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"StaticVariableName\"/\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*_?$\"/\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MemberName\"\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates non-static members against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MemberName\"/\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*$\"/\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MethodName\"\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method names against the supplied expression. --\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cmetadata name\u003d\"altname\" value\u003d\"MethodName\"/\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"^[a-z][a-zA-Z0-9]*(_[a-z][a-zA-Z0-9]+){0,2}$\"/\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParameterName\"\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for method parameters against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalFinalVariableName\"\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local final variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LocalVariableName\"\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validates identifiers for local variables against the expression \"^[a-z][a-zA-Z0-9]*$\". --\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    LENGTH and CODING CHECKS"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that array type declarations follow Java Style"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "      Java style: public static void main(String[] args) // Allowed"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "      C style:    public static void main(String args[]) // Not allowed"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ArrayTypeStyle\"/\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if a catch block is empty and does not contain any comments. --\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"EmptyCatchBlock\"/\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"LeftCurly\"\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks for placement of the left curly brace (\u0027{\u0027). --\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"RightCurly\"\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks right curlies on CATCH, ELSE, and TRY blocks are on"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "      the same line. e.g., the following example is fine:"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } else"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- This next example is not fine:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpre\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        if {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "          ..."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        else"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/pre\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks for braces around loop blocks --\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NeedBraces\"\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!--"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) return 1; // Not allowed"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true) { return 1; } // Not allowed"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "      else if {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // else if should always be multi line"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "      if (true)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1; // Not allowed"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoopBody\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that each variable declaration is in its own statement and on its own line. --\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MultipleVariableDeclarations\"/\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OneStatementPerLine\"/\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that long constants are defined with an upper ell.--\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"UpperEll\" /\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"FallThrough\"\u003e"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn about falling through to the next case statement.  Similar to"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "      javac -Xlint:fallthrough, but the check is suppressed if a single-line comment"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "      on the last non-blank line preceding the fallen-into case contains \u0027fall through\u0027 (or"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "      some other variants which we don\u0027t publicized to promote consistency)."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"reliefPattern\""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "       value\u003d\"fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on\"/\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingSwitchDefault\"/\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that Class variables should never be declared public. --\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"VisibilityModifier\"\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"protectedAllowed\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowPublicFinalFields\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreAnnotationCanonicalNames\" value\u003d\"RegisterExtension, TempDir\"/\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    ORDER CHECKS"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that the order of at-clauses follows the tagOrder default property value order."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "         @author, @version, @param, @return, @throws, @exception, @see, @since, @serial, @serialField, @serialData, @deprecated"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"AtclauseOrder\"/\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks if the Class and Interface declarations is organized in this order"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "      1. Class (static) variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "      2. Instance variables. Order: public, protected, package level (no access modifier), private."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "      3. Constructors"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "      4. Methods"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name \u003d\"DeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ModifierOrder\"\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Warn if modifier order is inconsistent with JLS3 8.1.1, 8.3.1, and"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "           8.4.3.  The prescribed order is:"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "           public, protected, private, abstract, static, final, transient, volatile,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "           synchronized, native, strictfp"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        --\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OverloadMethodsDeclarationOrder\"/\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    WHITESPACE CHECKS"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that comments are indented relative to their position in the code --\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"CommentsIndentation\"/\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAround\"\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that various tokens are surrounded by whitespace."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes most binary operators and keywords followed"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "           by regular or curly braces."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, BAND, BAND_ASSIGN, BOR,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        EQUAL, GE, GT, LAND, LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        RCURLY, SL, SLIST, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty constructors e.g. MyClass() {} --\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyConstructors\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty methods e.g. void func() {} --\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyMethods\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty types e.g. class Foo {}, enum Foo {} --\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyTypes\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty loops e.g. for (int i \u003d 1; i \u003e 1; i++) {} --\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLoops\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Allow empty lambdas e.g. () -\u003e {} --\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowEmptyLambdas\" value\u003d\"true\" /\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"WhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that commas, semicolons and typecasts are followed by whitespace. --\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, SEMI, TYPECAST\"/\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceAfter\"\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace after various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        UNARY_PLUS\"/\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- No trailing whitespace --\u003e"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Regexp\"\u003e"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"format\" value\u003d\"[ \\t]+$\"/\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"illegalPattern\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"message\" value\u003d\"Trailing whitespace\"/\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the non-assignment type operator is at the next line in a line wrap."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"?\", \":\", \"\u003d\u003d\", \"!\u003d\", \"/\", \"+\", \"-\", \"*\", \"%\", \"\u003e\u003e\", \"\u003e\u003e\u003e\","
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u003e\u003d\", \"\u003e\", \"\u003c\u003c\", \"\u003c\u003d\", \"\u003c\", \"^\", \"|\", \"||\", \"\u0026\", \"\u0026\u0026\", \"instanceof\","
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "           \"\u0026\" when used in a generic upper or lower bounds constraints,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. \u003cT extends Foo \u0026 Bar\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "           \"::\" when used as a reference to a method or constructor without arguments."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "             e.g. String::compareToIgnoreCase"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"QUESTION, COLON, EQUAL, NOT_EQUAL, DIV, PLUS, MINUS, STAR, MOD, SR, BSR,"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        GE, GT, SL, LE, LT, BXOR, BOR, LOR, BAND, LAND, LITERAL_INSTANCEOF, TYPE_EXTENSION_AND, METHOD_REF\"/\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"OperatorWrap\"\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the assignment type operator is at the previous end of line in a line wrap."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "           This includes \"\u003d\", \"/\u003d\", \"+\u003d\", \"-\u003d\", \"*\u003d\", \"%\u003d\", \"\u003e\u003e\u003d\", \"\u003e\u003e\u003e\u003d\", \"\u003c\u003c\u003d\", \"^\u003d\", \"\u0026\u003d\"."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"ASSIGN, DIV_ASSIGN, PLUS_ASSIGN, MINUS_ASSIGN, STAR_ASSIGN, MOD_ASSIGN,"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        SR_ASSIGN, BSR_ASSIGN, SL_ASSIGN, BXOR_ASSIGN, BOR_ASSIGN, BAND_ASSIGN\"/\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \".\", \"@\" is at the next line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"DOT, AT\"/\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"nl\"/\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SeparatorWrap\"\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that the \",\", \"]\", \"[\", \"...\", \";\", \"(\" is at the previous end of line in a line wrap. --\u003e"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"COMMA, RBRACK, ARRAY_DECLARATOR, ELLIPSIS, SEMI, LPAREN\"/\u003e"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"option\" value\u003d\"eol\"/\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"Indentation\"\u003e"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"caseIndent\" value\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"NoWhitespaceBefore\"\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before various unary operators. Linebreaks are allowed. --\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"SEMI, DOT, POST_DEC, POST_INC\"/\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowLineBreaks\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"ParenPad\"\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Checks that there is no whitespace before close parenthesis or after open parenthesis. --\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"severity\" value\u003d\"warning\"/\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that non-whitespace characters are separated by no more than one whitespace character."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "         a \u003d 1; // Allowed"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "         a  \u003d 1; // Not allowed (more than one space before \u003d)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"SingleSpaceSeparator\"\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c!-- Validate whitespace surrounding comments as well."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; // Allowed (single space before start of comment)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1; /* Allowed (single space before start of comment) */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Allowed (single space after end of comment) */ a \u003d 1;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  // Not allowed (more than one space before start of comment)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "           a \u003d 1;  /* Not allowed (more than one space before start of comment) */"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "           /* Not allowed (more than one space after end of comment) */  a \u003d 1;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "           This doesn\u0027t validate whitespace within comments so a comment /* like  this */ is allowed."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "      --\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateComments\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!--"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    JAVADOC CHECKS"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    --\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every class, enumeration and interface have a header comment. --\u003e"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocType\"\u003e"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Checks that every public method (excluding getters, setters and constructors) has a header comment. --\u003e"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"JavadocMethod\"\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowedAnnotations\" value\u003d\"Override, Test, BeforeAll, BeforeEach, AfterAll, AfterEach, Subscribe\"/\u003e"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"scope\" value\u003d\"public\"/\u003e"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"validateThrows\" value\u003d\"false\"/\u003e"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingParamTags\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingReturnTag\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"tokens\" value\u003d\"METHOD_DEF, ANNOTATION_FIELD_DEF\"/\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"InvalidJavadocPosition\"/\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cmodule name\u003d\"MissingJavadocMethodCheck\"\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"minLineCount\" value\u003d\"1\"/\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"allowMissingPropertyJavadoc\" value\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cproperty name\u003d\"ignoreMethodNamesRegex\" value\u003d\"(set.*|get.*)\"/\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/module\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/module\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/module\u003e"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 1,
      "-": 402
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "You can reach us at the email `seer[at]comp.nus.edu.sg`"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "### Yeh Yu Chun"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003cimg src\u003d\"images/peter-yeh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "[[github](https://github.com/peter-yeh)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "[[portfolio](team/peteryeh.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "### Lim Koon Kiat"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003cimg src\u003d\"images/limkoonkiat.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "[[github](http://github.com/limkoonkiat)]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "[[portfolio](team/limkoonkiat.md)]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "### Lee York Tat"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cimg src\u003d\"images/leeyorktat.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "[[github](http://github.com/leeyorktat)]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Role:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Responsibilities:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### Robin Ho"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cimg src\u003d\"images/robinho98.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "[[github](http://github.com/robinho98)]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "[[portfolio](team/Robinho98.md)]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* Responsibilities: Dev Ops + Threading"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "### Zhu Yuxuan"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cimg src\u003d\"images/yuxuanxc.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "[[github](http://github.com/yuxuanxc)]"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 4,
      "yuxuanxc": 3,
      "peter-yeh": 4,
      "leeyorktat": 5,
      "-": 30,
      "limkoonkiat": 4
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **1. Introduction**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "TrackPad is an app for users to create and store itineraries, to facilitate the planning of their dream vacation!"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "This document includes the various design choices, architecture and implementation features of TrackPad. This document "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "is targeted towards developers who want to contribute to and extend our TrackPad app."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **2. Setting up, getting started**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **3. Design**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.1 Architecture"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cspan style\u003d\"display:block;align:center\"\u003e![Architecture Class Diagram](images/ArchitectureDiagram.png)\u003c/span\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 1 Architecture Class Diagram\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Figure 1 explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "[**`Commons`**](#26-common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* [**`UI`**](#22-ui-component): The UI of the App."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* [**`Logic`**](#23-logic-component): The command executor."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* [**`Model`**](#24-model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* [**`Storage`**](#25-storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 2 Class Diagram of the Logic Component\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "For example, the `Logic` component (seen from Figure 2 above) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "![Sequence Diagram of the Various Components](images/ArchitectureSequenceDiagram.png)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 3 Sequence Diagram of the various components\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Figure 3 above shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.2 UI component"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 4 Structure of the Ui Component, Ui Class Diagram\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/ui/Ui.java)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `AttractionListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "This design is similar to the Architectural design of TrackPad, whereby different UiParts are encapsulated in the MainWindow java controller class. This allows the Logic to minimise interaction with the UI, since the MainWindow manages the changes to any UiPart classes that result from the execution in the Logic component."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.3 Logic"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 5 Structure of the Logic Component, Logic Class Diagram\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/logic/Logic.java)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "1. `Logic` in Figure 5 receives the user command."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "1. It uses the `TrackPadParser` class to parse the command."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding an attraction)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete-attraction 1\")` API call."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "![Interactions Inside the Logic Component for the `delete-attraction 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 6 Interactions inside the Logic Component for the `delete-attraction 1` Command\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.4 Model"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 7 Structure of the Model Component, Model Class Diagram\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/model/Model.java)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "The `Model` component shown in Figure 7,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* stores an `AttractionList` object that is a list of all the attractions in TrackPad."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* stores an `ItineraryList` object that is a list of all the itineraries in TrackPad."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* stores an `ItineraryAttractionList` object that is a list of all the attractions in the current selected itinerary."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* exposes two unmodifiable `ObservableList\u003cAttraction\u003e` and `ObservableList\u003cItinerary\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to the lists so that the UI automatically updates when the data in the lists change."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `TrackPad`, which `Attraction` references. This allows `TrackPad` to only require one `Tag` object per unique `Tag`, instead of each `Attraction` needing their own `Tag` object.\u003c/div\u003e\u003cbr\u003e "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 8 Structure of an alternative Model Component, Alternative Model Class Diagram\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.5 Storage"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 9 Structure of the Storage Component, Storage Class Diagram\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103T-T09-3/tp/blob/master/src/main/java/seedu/address/storage/Storage.java)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "The `Storage` component shown in Figure 9,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* saves `UserPref` objects containing user preferences in json format and read it back."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* saves `AttractionList` objects containing attraction data in json format and read it back."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* saves `ItineraryList` objects containing itinerary data in json format and read it back."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.6 Common classes"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Classes used by multiple components are in the `seedu.address.commons` package."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **4. Implementation**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "*To be added*"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.1 \\[Proposed\\] Undo/redo feature"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "#### 3.1.1 Proposed Implementation"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "The proposed undo/redo mechanism is facilitated by `VersionedTrackPad`. It extends `TrackPad` with an undo/redo history, stored internally as an `trackPadStateList` and `currentStatePointer`. Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* `VersionedTrackPad#commit()` — Saves the current TrackPad state in its history."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* `VersionedTrackPad#undo()` — Restores the previous TrackPad state from its history."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* `VersionedTrackPad#redo()` — Restores a previously undone TrackPad state from its history."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitTrackPad()`, `Model#undoTrackPad()` and `Model#redoTrackPad()` respectively."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedTrackPad` will be initialized with the initial TrackPad state, and the `currentStatePointer` pointing to that single TrackPad state."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState0](images/UndoRedoState0.png)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th attraction in the TrackPad. The `delete` command calls `Model#commitTrackPad()`, causing the modified state of the TrackPad after the `delete 5` command executes to be saved in the `trackPadStateList`, and the `currentStatePointer` is shifted to the newly inserted TrackPad state."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState1](images/UndoRedoState1.png)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Step 3. The user executes `add n/David …​` to add a new attraction. The `add` command also calls `Model#commitTrackPad()`, causing another modified TrackPad state to be saved into the `trackPadStateList`."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState2](images/UndoRedoState2.png)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If a command fails its execution, it will not call `Model#commitTrackPad()`, so the TrackPad state will not be saved into the `trackPadStateList`."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Step 4. The user now decides that adding the attraction was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoTrackPad()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous TrackPad state, and restores the TrackPad to that state."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState3](images/UndoRedoState3.png)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index 0, pointing to the initial TrackPad state, then there are no previous TrackPad states to restore. The `undo` command uses `Model#canUndoTrackPad()` to check if this is the case. If so, it will return an error to the user rather"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "than attempting to perform the undo."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoSequenceDiagram](images/UndoSequenceDiagram.png)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `UndoCommand` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "The `redo` command does the opposite — it calls `Model#redoTrackPad()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the TrackPad to that state."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** If the `currentStatePointer` is at index `trackPadStateList.size() - 1`, pointing to the latest TrackPad state, then there are no undone TrackPad states to restore. The `redo` command uses `Model#canRedoTrackPad()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the TrackPad, such as `list`, will usually not call `Model#commitTrackPad()`, `Model#undoTrackPad()` or `Model#redoTrackPad()`. Thus, the `trackPadStateList` remains unchanged."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState4](images/UndoRedoState4.png)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitTrackPad()`. Since the `currentStatePointer` is not pointing at the end of the `trackPadStateList`, all TrackPad states after the `currentStatePointer` will be purged. Reason: It no longer makes sense to redo the `add n/David …​` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "![UndoRedoState5](images/UndoRedoState5.png)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "![CommitActivityDiagram](images/CommitActivityDiagram.png)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "#### 3.1.2 Design consideration"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "##### 3.1.2.1 Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire TrackPad."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  itself."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * Pros: Will use less memory (e.g. for `delete`, just save the attraction being deleted)."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "  * Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### 3.2 \\[Proposed\\] Data archiving"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data archiving feature will be implemented}_"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **5. Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix A: Requirements**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix A: Product Scope**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* travelholics who love traveling and keeping track of their trips"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* travelled to many different places before"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* plans to travel to other countries in the future"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* has a need to manage a significant number of tourist attractions"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing to mouse interactions"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Value proposition**: "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* manage information for trips and tourist attractions faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* keeps track of different tourist attractions visited by the user"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* allows creating an itinerary to track future travels"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* customisable shortcuts that the user can set for frequently used commands"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix B: User Stories**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| Priority | As a …​                     | I want to …​                                                                    | So that I can…​                                              |"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| -------- | ------------------------------ | ---------------------------------------------------------------------------------- | --------------------------------------------------------------- |"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| add tourist attractions\t                                                         | keep track of tourist attractions I want to visit"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| delete tourist attractions\t                                                     | remove tourist attractions that I might not want to visit"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| find tourist attractions from my list                                              | quickly search for a specific tourist attraction"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| see a list of all the tourist attractions\t                                         | get a look at all my tourist attractions at one go"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel  | clear all tourist attractions from my plan                                         | reset the list of attractions"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| edit the information in my tourist attractions\t                                 | update my attractions with new information"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| tag tourist attractions in different categories like food, sightseeing, activities | distinguish between the different kinds of tourist attractions"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| add locations / addresses to my attractions                                        | know where the attraction is located and how to get there"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| add descriptions to my attractions                                                 | know roughly what the attraction is about when viewing them"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | person planning for my travel\t| add contact details such as email and phone number to my attractions               | know how to contact them if I need"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* * *`  | new user\t                    | find the user guide easily\t                                                     | know what I can do with the app"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | create multiple itineraries for different trips\t                                 | plan for all my different travelling trips"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | add descriptions to my itineraries such as trip details                            | ensure I have all the correct trip information in one place"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | add dates to my itineraries                                                        | plan when the trip will take place"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | add attractions to my itineraries                                                  | plan which attractions to visit"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | delete attractions from my itineraries                                             | remove attractions I do not want to visit anymore"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | edit attractions in my itineraries                                                 | update the attractions I am planning to visit in my itineraries"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | person planning for my travel  | specify the times at which I visit an attraction within an itinerary               | plan when to visit the attractions"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `* *`    | new user\t                    | see the app with sample data\t                                                     | see what kind of data the app can store"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `*`      | person planning for my travel\t| add opening hours to my attractions                                                | know when to visit"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `*`      | person planning for my travel\t| add the estimated price range to my attractions                                    | know which attractions to choose to match my budget"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `*`      | person planning for my travel\t| add the estimated budget to my itineraries                                         | plan how much to spend on each trip"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `*`      | person currently traveling\t    | mark tourist attractions as visited / not visited                                  | know which attractions I missed"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| `*`      | person who had already traveled | give ratings to my attractions                                                    | keep track of which tourist attractions were enjoyable"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix C: Use Cases**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "(For all use cases below, the **System** is the `TrackPad` and the **Actor** is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Use case: Add a tourist attraction**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "1.  User requests to add a tourist attraction"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "2.  TrackPad adds the tourist attraction"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      "
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* 2a. The given format for tourist attraction is invalid."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    * 2a1. TrackPad shows an error message."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      Use case resumes at step 1."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Use case: Delete a tourist attraction**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "1.  User requests to list tourist attractions"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "2.  TrackPad shows a list of tourist attractions"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "3.  User requests to delete a specific tourist attraction in the list"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "4.  TrackPad deletes the tourist attraction"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* 2b. The format is invalid. "
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  "
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    * 3a1. TrackPad shows an error message."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Use case: Find a tourist attraction**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "1.  User requests to find a tourist attraction"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "2.  TrackPad shows a list of tourist attractions matching the keyword entered"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    "
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* 3a. The given keyword is not found."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    * 3a1. TrackPad shows an error."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Use case: List all tourist attractions**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "1.  User requests to list all tourist attractions"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "2.  TrackPad shows a list of all tourist attractions"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Use case: Clear all tourist attractions**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "1.  User requests to delete all tourist attractions in the list"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "2.  TrackPad deletes all tourist attractions in the list"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* 3a. Error deleting list from storage"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    * 3a1. TrackPad shows an error."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix D: Non-Functional Requirements**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "1.  The product should be able to hold up to 1000 tourist attractions without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "2.  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "3.  The user interface should be intuitive enough for users who are not IT-savvy."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "4.  The product is not required to recommend new tourist attractions which are not inputted by the user."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "5.  The product should be free to download and use."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "6.  The system should work on any _mainstream OS_ as long as it has Java `11` or above installed."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "7.  The system should work on both 32-bit and 64-bit environments."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "8.  The system should respond within five seconds."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "9.  The project is expected to be a brown-field project."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "10.  The progress of the project is expected to adhere to the schedule provided on the module website."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix E: Glossary**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## **Appendix F: Instructions for Manual Testing**"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### F1 Launch and shutdown"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### F2 Deleting an attraction"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "1. Deleting an attraction while all attractions are being shown"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "   1. Prerequisites: List all attractions using the `list` command. Multiple attractions in the list."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      Expected: No attraction is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "      "
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "### F3 Saving data"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "   1. _{explain how to simulate a missing/corrupted file, and the expected behavior}_"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "--\u003e"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 64,
      "yuxuanxc": 30,
      "peter-yeh": 15,
      "leeyorktat": 4,
      "-": 263,
      "limkoonkiat": 105
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: User Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "## 1. Introduction"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "TrackPad (TP) is a **desktop app for planning your trips and tracking tourist attractions, optimized for use via a Command Line Interface** (CLI) while still having the benefits of a "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Graphical User Interface (GUI). Our command instructions utilise full words, they sound more natural and verbose than short forms, so it\u0027s easier for you to remember. If you can type fast, TP can get your itinerary planned faster than traditional GUI apps."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "This user guide will show you how to use the commands and features available in TP. TP is built for people who love to travel, "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "and want to collate and store all their itineraries in one single app. We welcome anyone who loves travelling to try out our app."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "## 2. About This Document"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Welcome to the TrackPad User Guide!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "We at TrackPad believe that tracking tourist attractions and planning your trips should be both **easy and fuss-free**. "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "We understand how **messy** it can be when it comes to keeping track of your travel itineraries, which can get frustrating."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "That\u0027s why here at TrackPad, we have come up with a simple yet useful guide to help you get started with using TrackPad."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Minimal prior technical knowledge is needed in order to use TrackPad and we hope to help you with your travel tracking and planning."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## 3. Getting Started"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Here are the steps to download TrackPad and start using it immediately!"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "1. Ensure you have Java `11` or above installed in your Computer."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "1. Download the latest `trackpad.jar` from [here](https://github.com/AY2021S1-CS2103T-T09-3/tp/releases)."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "1. Copy the file to the folder you want to use as the _home folder_ for your TrackPad."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "1. Double-click the file to start the app. The GUI similar to the following Figure 1 should appear in a few seconds. Here\u0027s how your app should look like!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    Note how the app contains some sample data. \u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "   ![Ui](images/Ui-Labelled.png)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "   \u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 1. The Ui of TrackPad\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "1. Type the command in the command box and press Enter to execute it. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    e.g. typing **`help`** and pressing Enter will open the help window.\u003cbr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    Try out some of these commands!"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "   * **`list-attraction`** : Lists all tourist attractions added."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "   * **`add-attraction`**`n/Singapore Discovery Center l/Singapore, Singapore p/67926188 t/educational a/510 Upper Jurong Rd, 38365` : "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "   Adds an attraction named `Singapore Discovery Center` to TrackPad."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "   * **`delete-attraction`**`3` : Deletes the 3rd attraction shown in the current list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "   "
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "   * **`edit-attraction`**`3 pr/HIGH` : Edits the 3rd attraction shown in the current list, changing its original"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    price range to HIGH."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "   * **`clear-attraction`** : Deletes all attractions."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "   * **`exit`** : Exits the app."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "1. Refer to [Features](#3-features) below for details of each command."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "## 4. Features"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "### 4.1 Command Format"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-warning\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "**:information_source: Notes about the command format:**\u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* Words in `UPPER_CASE` are the fields to be supplied by you.\u003cbr\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  e.g. in `add-attraction n/ATTRACTION`, `ATTRACTION` is a field which can be used as `add-attraction n/USS`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* Fields in square brackets are optional.\u003cbr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  e.g `n/ATTRACTION [t/TAG]` can be used as `n/USS t/28 OCT` or as `n/USS`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* Fields with `…`​ after them can be used multiple times or not used at all.\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "  e.g. `[t/TAG]…​` can be used as ` ` (not used), `t/Singapore`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* If a field cannot be used multiple times, and you supply 2 or more of the same field, the app takes only the last specified field.\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  e.g. if you type `add-attraction n/USS n/Marina Bay Sands l/Singapore, Singapore`, which contains 2 names, \"USS\" and \"Marina Bay Sands\", only \"Marina Bay Sands\" is taken."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  e.g. if the command specifies `n/ATTRACTION p/PHONE_NUMBER`, `p/PHONE_NUMBER n/ATTRACTION` is also acceptable.  "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "### 4.2 Attraction Features"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Attractions are the core building blocks of TrackPad and are required to populate your itineraries! "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "The following features are tailored for attractions in TrackPad. "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.2.1 Adding a tourist attraction: `add-attraction`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Adds a tourist attraction to the current list of attractions. Each attraction must contain a name and a location. "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Additionally, use the optional fields (as listed below) to include more information for your attractions. "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format (Minimal): `add-attraction n/ATTRACTION_NAME l/LOCATION`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format (All fields): `add-attraction n/ATTRACTION_NAME l/LOCATION [d/DESCRIPTION] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "[op/OPENING_HOURS] [pr/PRICE_RANGE] [r/RATING] [v/VISITED] [t/TAG]…​`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Compulsory fields:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **ATTRACTION_NAME**: Name of the attraction. "
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **LOCATION**: Location of the attraction. While any value is possible, we recommend you use the format `CITY, COUNTRY` for a better in-app experience."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Optional fields:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **DESCRIPTION**: Description of the attraction, can take in any value. Use this to give a brief summary of the attraction."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **PHONE_NUMBER** 📞: Phone number of the attraction, can only contain numbers and be at least 3 digits long, no spaces."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **EMAIL** 📧: Email of the attraction in the format `local-part@domain`."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **ADDRESS** 🏠: Postal address of the attraction, can take in any value. Use this if the location field is not enough for locating the attraction."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **OPENING_HOURS** 🈺: Opening hours of the attraction in the format `opening time - closing time` (both in 24h format)."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **PRICE_RANGE**: Price range of the attraction. Use `LOW`, `MEDIUM` or `HIGH` to indicate the range."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **RATING**: Rating of the attraction. Use a number between `0.0` to `5.0` to indicate your experience of the attraction after visiting it."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **VISITED**: Marks whether you have visited the attraction before. Use `TRUE` if you want to mark it as visited, and `FALSE` otherwise. "
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **TAG**: Adds tags to further describe the attraction. Tag names should only contain letters and numbers."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:information_source: **Note:**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "The opening time of an attraction can be more than it\u0027s the closing time, for those"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "which operates overnight."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "An attraction can have any number of tags."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* `add-attraction n/USS a/8 Sentosa Gateway, 098269 l/Singapore, Singapore`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* `add-attraction n/Singapore Zoo p/62693411 t/hot a/80 Mandai Lake Rd, 729826 l/Singapore, Singapore e/singaporezoo@gmail.com "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "op/1000-1800 pr/MEDMIU r/4.6 v/FALSE`\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "![add_attraction_result](images/addAttraction.png)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 2. The result of \u003ccode\u003eadd-attraction n/Singapore Zoo p/62693411 t/hot a/80 Mandai Lake Rd, 729826 l/Singapore, Singapore e/singaporezoo@gmail.com "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "op/1000-1800 pr/MEDMIU r/4.6 v/FALSE\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:information_source: **Note:**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Multiple attractions of the same name and locatin cannot be added into the current list of attractions."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e:warning: **Warning:**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "The names and locations of attractions are case sensitive."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "`add-attraction n/Singapore Zoo l/Singapore` followed by "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "`add-attraction n/singapore zoo l/singapore` will create two different attractions in the same list."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.2.2 Editing a tourist attraction: `edit-attraction`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Edits a tourist attraction in the current list of attractions."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format: `edit-attraction INDEX [n/ATTRACTION_NAME] [l/LOCATION] [d/DESCRIPTION] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "[op/OPENING_HOURS] [pr/PRICE_RANGE] [r/RATING] [v/VISITED] [t/TAG]…​`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* Edits the attraction at the specified `INDEX` shown in the attractions panel."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* Field entries are the same as the `add-attraction` command."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* Any field can be changed by inputting its corresponding prefix in the command."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    * Example: `add-attraction n/MBS l/Singapore, Singapore r/4.3` in an attraction list followed by "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    `edit-attraction 1 r/4.6` changes the rating of the 1st attraction in the list from `4.3` to `4.6`.\u003cbr\u003e        "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    ![result_of_editing_existing_fields](images/editAttraction1.png)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    \u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 3. The result of \u003ccode\u003eedit-attraction 1 r/4.6\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* New fields can be added to current attractions."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    * Example: `edit-attraction 1 pr/MEDIUM t/hotel` adds the price range of MBS as `MEDIUM` and adds an `hotel` tag.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    ![result_of_editing_new_fields](images/editAttraction2.png)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    \u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 4. The result of \u003ccode\u003eedit-attraction 1 pr/MEDIUM t/hotel\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e:warning: **Warning:**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Editing the tag of an attraction does not add on to its existing tags. Rather, it replaces all existing tags with the "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "new tags you’re specifying."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.2.3 Deleting a tourist attraction : `delete-attraction`"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Deletes a tourist attraction from the current list of attractions."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Format: `delete-attraction INDEX`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* Deletes the attraction at the specified `INDEX` shown in the attractions panel."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `list-attraction` followed by `delete-attraction 1` deletes the 1st attraction in the TrackPad.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "![result for `delete-attraction`](images/deleteAttraction.png)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 5. The result of \u003ccode\u003edelete-attraction 1\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* `find-attraction animals` followed by `delete-attraction 2` deletes the 2nd tourist attraction in the results of the `find-attraction` command."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.2.4 Marking a tourist attraction as visited: `markVisited-attraction`"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Marks a tourist attraction in the current list of attractions as visited."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Format: `markVisited-attraction INDEX`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* Marks the attraction at the specified `INDEX` shown in the attractions panel as visited."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* Any attraction can be marked visited, even if the attraction was already visited."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* `markVisited-attraction 2` marks the 2nd attraction in the TrackPad as visited.\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "![result for \u0027markVisited-attraction\u0027](images/markVisitedAttraction.png)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "  \u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 6. The result of \u003ccode\u003emarkVisited-attraction 2\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* Typing `markVisited-attraction 2` again will show that the 2nd attraction in the TrackPad is visited."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.2.5 Finding a tourist attraction: `find-attraction`"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Finds any tourist attraction which contains the keyword(s)."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format: `find-attraction KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The search is case-insensitive. e.g `singapore zoo` will match `Singapore Zoo`."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The order of the keywords does not matter. e.g. `Zoo Singapore` will match `Singapore Zoo`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Only the attractions in the list of attractions will be searched."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* Only full words will be matched e.g. `Sento` will not match `Sentosa`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `find-attraction jurong` returns `Jurong Bird Park` and `Snow City`\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "![result for \u0027find-attraction\u0027](images/findAttraction.png)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 7. The result of \u003ccode\u003efind-attraction jurong\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.2.6 Listing all tourist attractions : `list-attraction`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Shows a list of all the tourist attractions. Use this command to reset the view of the Attractions panel, as "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "certain commands (`find-attraction`) can alter the view of the Attractions panel. "
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Format: `list-attraction`\u003cbr\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "![result for \u0027list-attraction\u0027](images/listAttraction.png)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 8. The result of \u003ccode\u003elist-attraction\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:information_source: **Note:**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "`list-attraction` will work even if there are extra characters behind the command."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Eg. `list-attraction abcd` will behave like `list-attraction`."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.2.7 Clearing all attractions : `clear-attraction`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Clears all tourist attractions."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Format: `clear-attraction`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e:warning: **Warning:**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "`clear-attraction` will remove all the attractions stored in TrackPad."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "This action is irreversible and should be used with caution."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "![result for \u0027clear-attraction\u0027](images/clearAttraction.png)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 9. The result of \u003ccode\u003eclear-attraction\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "### 4.3 Itinerary Features"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Itineraries help track the details of your trip, as well as the attractions you plan on visiting."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.3.1 Adding a new itinerary: `add-itinerary`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Adds a new itinerary to the current list of itineraries."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format: `add-itinerary n/ITINERARY_NAME sd/START_DATE ed/END_DATE [d/DESCRIPTION] [b/BUDGET]`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Compulsory fields:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "|   |   |"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| **ITINERARY_NAME** | Contains only letters and numbers and should not be blank |"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| **START_DATE** 📆 | Takes the format `dd-mm-yyyy` and should not be after the end date |"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| **END_DATE** 📆 | Takes the format `dd-mm-yyyy` and should not be before the start date |"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Optional fields:"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "|   |   |"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "|---|---|"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| **DESCRIPTION** | Can take any value |"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "| **BUDGET** 💵 | Can only be a non-negative number up to two decimal places |"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:information_source: **Note:**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "The budget for the trip should not exceed 1 trillion."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* `add-itinerary n/Japan holiday sd/15-01-2019 ed/30-01-2019`"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* `add-itinerary n/Europe Trip sd/01-12-2020 ed/20-12-2020 d/with friends b/4000`\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "![result_of_adding an itinerary](images/addItinerary.png)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 10. The result of \u003ccode\u003eadd-itinerary n/Europe Trip sd/01-12-2020 ed/20-12-2020 d/with friends b/4000\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e:warning: **Warning:**"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "The names of itineraries are case sensitive."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "`add-itinerary n/japan trip sd/20-12-2020 ed/30-12-2020` followed by "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "`add-itinerary n/Japan Trip sd/20-12-2020 ed/30-12-2020` will create two different itineraries in the same list."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.3.2 Editing an itinerary: `edit-itinerary`"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Edits an itinerary from the current list of itineraries."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format: `edit-itinerary INDEX [n/NAME] [sd/START_DATE] [ed/END_DATE] [d/DESCRIPTION] [b/BUDGET]`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* Edits the itinerary at the specified `INDEX` shown in the itinerary panel."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* Field entries are the same as the `add-itinerary` command."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Any field can be changed by inputting its corresponding prefix in the command."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Examples: "
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* `add-itinerary n/Europe Trip sd/01-12-2020 ed/20-12-2020 d/with friends b/4000` in an itinerary list followed by `edit-itinerary 1 sd/06-12-2020` changes the start date of the 1st itinerary in the list from `01-12-2020` to `06-12-2020`.\u003cbr\u003e"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "![result_of_editing an itinerary](images/editItinerary.png)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 11. The result of \u003ccode\u003eedit-itinerary 1 sd/06-12-2020\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.3.3 Deleting an itinerary: `delete-itinerary`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Deletes an itinerary from the current list of itineraries."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Format: `delete-itinerary INDEX`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* Deletes the itinerary at the specified `INDEX` shown in the itinerary panel."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* `list-itinerary` followed by `delete-itinerary 1` deletes the 1st itinerary from the list.\u003cbr\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "![result_of_deleting an itinerary](images/deleteItinerary.png)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 12. The result of \u003ccode\u003edelete-itinerary 1\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.3.4 Finding an itinerary: `find-itinerary`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Finds itineraries from the current list of itineraries which contain the keyword(s)."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Format: `find-itinerary KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* The search is case-insensitive. e.g `japan` will match `Japan`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* The order of the keywords does not matter. e.g. `Okinawa Japan` will match `Japan Okinawa`"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Only the name of the itinerary will be searched."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "* Only full words will be matched e.g. `Jap` will not match `Japan`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* `find-itinerary Japan` returns `Japan Okinawa` and `Japan Tokyo`, if such itineraries exist\u003cbr\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "![result_of_finding an itinerary](images/findItinerary.png)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 13. The result of \u003ccode\u003efind-itinerary Japan\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.3.5 Listing all itineraries: `list-itinerary`"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Shows all itineraries. Use this command to reset the view of the Itineraries panel, as "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "certain commands (`find-itinerary`, `select-itinerary`) can alter the view of the Itineraries panel. "
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Format: `list-itinerary`\u003cbr\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "![result_of_listing itineraries](images/listItinerary.png)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 14. The result of \u003ccode\u003elist-itinerary\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:information_source: **Note:**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "`list-itinerary` will work even if there are extra characters behind the command."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Eg. `list-itinerary abcd` will behave like `list-itinerary`."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.3.6 Selecting an itinerary: `select-itinerary`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Selects an itinerary to be shown in detail, from the current list of itineraries."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Format: `select-itinerary INDEX`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* Selects the itinerary at the specified `INDEX` shown in the itinerary panel."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "To go back to seeing the list of itineraries, use `list-itinerary`."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* `select-itinerary 1` selects the 1st itinerary in the list of itineraries.\u003cbr\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "![result_of_selecting itinerary](images/selectItinerary.png)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 15. The result of \u003ccode\u003eselect-itinerary 1\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.3.7 Clearing all itineraries : `clear-itinerary`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Clears all itineraries."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Format: `clear-itinerary`"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-danger\"\u003e:warning: **Warning:**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "`clear-itinerary` will remove all the itineraries stored in TrackPad."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "This action is irreversible and should be used with caution."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "![result_of_clearing all itineraries](images/clearItinerary.png)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 16. The result of \u003ccode\u003eclear-itinerary\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "### 4.4 Itinerary Attraction Features"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Itinerary attractions are attractions added to an itinerary, but with additional start/end time fields."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "These commands deal with attractions that are found in an itinerary."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "\u003cspan style\u003d\"display:block;align:center\"\u003e![Diagram explaining Itinerary Attraction](images/ItineraryAttraction.png)\u003c/span\u003e"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\u0027center\u0027\u003e\u003ci\u003e\u003csup\u003eFigure 17. Diagram simulating the attractions found in an itinerary\u003c/sup\u003e\u003c/i\u003e\u003c/div\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "In Figure 16 above, Itinerary 1 has been selected with `select-itinerary 1` command, shown with a yellow border. "
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Attraction 1A is an itinerary attraction. It has all the same fields as Attraction A, but with the additional start/end time field."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.4.1 Adding an attraction to the selected itinerary: `add-itinerary-attraction`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Adds an attraction to the selected itinerary."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Format: `add-itinerary-attraction INDEX st/START_TIME et/END_TIME day/DAY_VISITING`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* **INDEX**: Index of attraction in the current list of attractions."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **START_TIME** 🕖: Start time to visit the attraction in the 24H format `HHMM`."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **END_TIME** 🕖: End time to visit the attraction in the 24H format `HHMM`."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **DAY_VISITING**: Day on which you plan to visit the attraction in the itinerary."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* The start time and end time cannot overlap with other attractions in the selected itinerary."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* None of the fields can be left blank."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `add-itinerary-attraction 2 st/1000 et/1600 day/3`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `add-itinerary-attraction 1 st/0900 et/1200 day/1` adds `Jurong Bird Park` into day 1 of selected itinerary\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "![result for \u0027find-attraction\u0027](images/addItineraryAttraction.png)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 18. The result of \u003ccode\u003eadd-itinerary-attraction 1 st/0900 et/1200 day/1\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "The attraction will be added into the selected itinerary."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.4.2 Editing an attraction from the selected itinerary : `edit-itinerary-attraction`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Edits an existing attraction in the selected itinerary."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Format: `edit-itinerary-attraction INDEX day/DAY_VISITING [st/START_TIME] [et/END_TIME][n/ATTRACTION_NAME] [l/LOCATION] [d/DESCRIPTION] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS][op/OPENING_HOURS] [pr/PRICE_RANGE] [r/RATING] [v/VISITED] [t/TAG]…​`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* Edits the attraction specified by the `INDEX` and `DAY_VISITING` shown in the itinerary panel."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `edit-itinerary-attraction 3 day/2 st/1500 et/1800` Edits the start time, end time of the third attraction on day 2 of the selected itinerary to  be `1500` and `1800` respectively."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `edit-itinerary-attraction 1 day/1 st/1500` edits the starting time to visit the attraction`Jurong Bird Park`\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "![result for \u0027find-attraction\u0027](images/editItineraryAttraction.png)"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 19. The result of \u003ccode\u003eedit-itinerary-attraction 1 day/1 st/1500\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Only the INDEX and day/DAY_VISITING is required to identify the field to edit."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.4.3 Deleting an attraction from the selected itinerary: `delete-itinerary-attraction`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Deletes an attraction from the selected itinerary."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Format: `delete-itinerary-attraction INDEX day/DAY_VISITING`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* Deletes the attraction specified by the `INDEX` and `DAY_VISITING` shown in the itinerary panel."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* `delete-itinerary-attraction 1 day/1` removes `Jurong Bird Park from the itinerary`\u003cbr\u003e\u003cbr\u003e"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "![result for \u0027find-attraction\u0027](images/deleteItineraryAttraction.png)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 20. The result of \u003ccode\u003edelete-itinerary-attraction 1 day/1\u003c/code\u003e\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003c!--how to comment in markdown--\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "### 4.5 Miscellaneous Features"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "These basic features help TrackPad to run smoothly, as well as allow you to interact with TrackPad without the use of your mouse, perfect for fast typists!"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.5.1 Viewing help : `help`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Shows a message with a link to this User Guide."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "![help message](images/helpMessage.png)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cdiv align\u003d\"center\"\u003e\u003csup style\u003d\"font-size:100%\"\u003e\u003ci\u003eFigure 21. The help window of TrackPad\u003c/i\u003e\u003c/sup\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.5.2 Exiting the program : `exit`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Exits the program."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#### 4.5.3 Saving the data"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "TrackPad data will be saved in the storage automatically after any command that changes the data. "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "There is no need for you to save manually."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "## FAQ"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "**Q**: How do I transfer my data to another Computer?\u003cbr\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "**A**: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous TrackPad home folder."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "--\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "## 5. Glossary"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* **Command Line Interface (CLI):** An interface that processes commands to a computer program in the form of lines of text."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* **Graphical User Interface (GUI):** An interface that allows users to interact with through visual indicator representations."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* **Prefix:** The letter(s) and \u0027/\u0027 placed before the corresponding fields when typing the commands (\u0027n/\u0027 for Name, \u0027op/\u0027 for Opening Hours etc)."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* **INDEX:** The number shown in the displayed attractions/itinerary panel. Must be a positive number (1, 2, 3, ...)"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "* **DAY_VISITING:** The day in a selected itinerary which contains the attraction(s) planned to visit. Must be a positive number (1, 2, 3, ...)"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "## 6. Command summary"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "### 6.1 General Commands"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "**Help** | `help`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Exit** | `exit`"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "### 6.2 Attraction Commands"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Add attraction** | `add-attraction n/ATTRACTION_NAME l/LOCATION [d/DESCRIPTION] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [op/OPENING_HOURS] [pr/PRICE_RANGE] [r/RATING] [v/VISITED] [t/TAG]…​` \u003cbr\u003e e.g. `add n/Singapore Zoo p/62693411 t/hot a/80 Mandai Lake Rd, 729826`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Edit attraction** | `edit-attraction INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]…​`\u003cbr\u003e e.g. `edit 2 n/Singapore Zoo e/zoo@example.com`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Delete attraction** | `delete-attraction INDEX`\u003cbr\u003e e.g. `delete 3`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Mark Visited attraction** | `markVisited-attraction INDEX`\u003cbr\u003e e.g. `markVisited-attraction 2`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Find attraction** | `find-attration KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g. `find Zoo`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "**List attractions** | `list-attraction`"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "**Clear all attractions** | `clear-attraction`"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "### 6.3 Itinerary Commands"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Add itinerary** | `add-itinerary n/ITINERARY sd/START_DATE ed/END_DATE [d/DESCRIPTION] [b/BUDGET]` \u003cbr\u003e e.g. `add-itinerary n/Japan holiday sd/15-01-2019 ed/30-01-2019 d/with friends b/4000`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Edit itinerary** | `edit-itinerary INDEX [n/NAME] [sd/START_DATE] [ed/END_DATE] [d/DESCRIPTION] [b/BUDGET]`\u003cbr\u003e e.g. `edit-itinerary 2 n/Singapore journey sd/05-06-2019`"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Delete itinerary** | `delete-itinerary INDEX`\u003cbr\u003e e.g. `delete-itinerary 3`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Find itinerary** | `find-itinerary KEYWORD [MORE_KEYWORDS]`\u003cbr\u003e e.g. `find-itinerary Korea`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "**List itineraries** | `list-itinerary`"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Select itinerary** | `select-itinerary INDEX`\u003cbr\u003e e.g. `select-itinerary 3`"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "**Clear all itineraries** | `clear-itinerary`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "### 6.4 Itinerary attraction Commands"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Action | Format, Examples"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "--------|------------------"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Add itinerary attraction** | `add-itinerary-attraction INDEX st/START_TIME et/END_TIME day/DAY_VISITING` \u003cbr\u003e e.g. `add-itinerary-attraction 1 st/1400 et/1500 day/5`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**Edit itinerary attraction** | `edit-itinerary-attraction INDEX day/DAY_VISITING [st/START_TIME] [et/END_TIME]` \u003cbr\u003e e.g. `edit-itinerary-attraction 1 day/2 st/0900 et/1000`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "**Delete itinerary attraction** | `delete-itinerary-attraction INDEX`\u003cbr\u003e e.g. `delete-itinerary-attraction 1`"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 48,
      "yuxuanxc": 108,
      "peter-yeh": 91,
      "leeyorktat": 95,
      "-": 106,
      "limkoonkiat": 83
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteAttraction(a)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveTrackPad(trackPad)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 2,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "AttractionList *-right-\u003e \"1\" UniqueAttractionList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "AttractionList *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "UniqueTagList -[hidden]down- UniqueAttractionList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "UniqueTagList -[hidden]down- UniqueAttractionList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "UniqueAttractionList -right-\u003e Attraction"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction -up-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e Name"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e Location"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e Phone"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e Email"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e Address"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e Description"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e OpeningHours"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e PriceRange"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e Rating"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e Visited"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 16,
      "-": 11
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "participant \":TrackPadParser\" as TrackPadParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "LogicManager -\u003e TrackPadParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "activate TrackPadParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "TrackPadParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "DeleteCommandParser --\u003e TrackPadParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "TrackPadParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "DeleteCommandParser --\u003e TrackPadParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e TrackPadParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "TrackPadParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "deactivate TrackPadParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "DeleteCommand -\u003e Model : deleteAttraction(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "peter-yeh": 10,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Class TrackPadParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "LogicManager --\u003e\"1\" TrackPadParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "TrackPadParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Interface ReadOnlyAttractionList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Interface ReadOnlyItineraryList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class AttractionList"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class ItineraryList"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Package Attraction {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class Attraction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class Address"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class Email"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Class Phone"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class Location"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class OpeningHours"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class PriceRange"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class Rating"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class Visited"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class UniqueAttractionList"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Package Itinerary {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class Itinerary"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class Name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class LocalDate"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class Days"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Class UniqueItineraryList"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "AttractionList .up.|\u003e ReadOnlyAttractionList"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "ItineraryList .up.|\u003e ReadOnlyItineraryList"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "ModelManager --\u003e \"1\" AttractionList"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "ModelManager --\u003e \"1\" ItineraryList"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "ModelManager -left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "AttractionList *--\u003e \"1\" UniqueAttractionList"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "UniqueAttractionList --\u003e \"*\" Attraction"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e \"1\" Location"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e \"0..1\" Phone"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e \"0..1\" Email"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e \"0..1\" Address"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e \"0..1\" Description"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e \"0..1\" OpeningHours"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e \"0..1\" PriceRange"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e \"0..1\" Rating"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e \"0..1\" Visited"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Attraction *--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "ItineraryList *--\u003e \"1\" UniqueItineraryList"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "UniqueItineraryList o--\u003e \"*\" Itinerary"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Itinerary *--\u003e \"1\" Name"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Itinerary *--\u003e \"0..1\" Description"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Itinerary *--\u003e \"2\" LocalDate"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "Itinerary *--\u003e \"*\" Days"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "ModelManager --\u003e\"1\" Attraction : filtered attraction list"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "ModelManager --\u003e\"1\" Itinerary : filtered itinerary list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 48,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Interface AttractionListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Interface ItineraryListStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Class JsonAttractionListStorage"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Class JsonItineraryListStorage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "StorageManager .up.|\u003e Storage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "StorageManager --\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "StorageManager --\u003e AttractionListStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "StorageManager --\u003e ItineraryListStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "JsonItineraryListStorage .up.|\u003e ItineraryListStorage"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "JsonItineraryListStorage .down.\u003e JsonSerializableItineraryList"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "JsonSerializableItineraryList .down.\u003e JsonAdaptedItinerary"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "JsonAdaptedItinerary .down.\u003e JsonAdaptedDay"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "JsonAdaptedDay .down.\u003e JsonAdaptedItineraryAttraction"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "JsonAttractionListStorage .up.|\u003e AttractionListStorage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "JsonAttractionListStorage .down.\u003e JsonSerializableAttractionList"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "JsonSerializableAttractionList .down.\u003e JsonAdaptedAttraction"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "JsonAdaptedAttraction .down.\u003e JsonAdaptedTag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "JsonUserPrefsStorage .up.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 3,
      "-": 14,
      "limkoonkiat": 19
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Class AttractionListPanel"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Class AttractionCard"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Class ItineraryListPanel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "Class ItineraryCard"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "MainWindow *-down-\u003e AttractionListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "MainWindow *-down-\u003e ItineraryListPanel"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "AttractionListPanel -down-\u003e AttractionCard"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "ItineraryListPanel -down-\u003e ItineraryCard"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "AttractionListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "AttractionCard --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "ItineraryListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "ItineraryCard --|\u003e UiPart"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "AttractionCard ..\u003e Model"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "ItineraryCard ..\u003e Model"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "ItineraryListPanel -[hidden]left- AttractionListPanel"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "AttractionListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 16,
      "-": 52
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "title: TrackPad"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103T-T09-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103T-T09-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103T-T09-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103T-T09-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "**TrackPad is a desktop application for planning your trips and tracking tourist attractions.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* If you are interested in using TrackPad, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* If you are interested about developing TrackPad, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "limkoonkiat": 6
    }
  },
  {
    "path": "docs/team/Robinho98.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "title: Robin\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "## Project: Traventure"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Traventure is a sleek and simple itinerary planning app, with a preloaded database for Rediscover Singapore Attractions. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **New Feature**: Added the ability to undo/redo previous commands."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **New Feature**: Added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * Updated the GUI color scheme (Pull requests [\\#33](), [\\#34]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#36](), [\\#38]())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    * Added documentation for the features `delete` and `find` [\\#72]()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    * Did cosmetic tweaks to existing documentation of features `clear`, `exit`: [\\#74]()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    * Added implementation details of the `delete` feature."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#12](), [\\#32](), [\\#19](), [\\#42]()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * Contributed to forum discussions (examples: [1](), [2](), [3](), [4]())"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  * Some parts of the history feature I added was adopted by several other class mates ([1](), [2]())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* **Tools**:"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 42
    }
  },
  {
    "path": "docs/team/limkoonkiat.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "title: Lim Koon Kiat\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "## Project: TrackPad"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "TrackPad is a desktop application for planning trips and tracking tourist attractions. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **New Feature**: Added the ability to make itineraries."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  * What it does: allows the user to create itineraries to plan their trips."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can do more than adding attractions and can now plan trips."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **Code contributed**: [RepoSense link]()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  * Added the location field to attractions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  * Updated how the app stores data "
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#00](), [\\#00]())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    * Added documentation for the itinerary features"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    * Added details to the storage section"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    * Added implementation details of the....."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#00](), [\\#00](), [\\#00](), [\\#00]()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 36
    }
  },
  {
    "path": "docs/team/peteryeh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "title: Peter Yeh\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "## Project: TrackPad"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "TrackPad is a clean and simple desktop application for tracking past itineraries and creating future ones. It is written and compiled in java, hence it\u0027s available on all platforms. The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* **New Feature**: Added the ability to make itineraries."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  * What it does: allows the user to create itineraries to plan their trips."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can do more than adding attractions and can now plan trips."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  * Credits: *{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* **Code contributed**: [RepoSense link](https://github.com/peter-yeh/putTheLinkHere)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "\u003c!--"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  * Added the location field to attractions"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  * Updated how the app stores data "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  * Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests [\\#00](), [\\#00]())"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    * Added documentation for the itinerary features"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    * Added details to the storage section"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    * Added implementation details of the....."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#00](), [\\#00](), [\\#00](), [\\#00]()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](), [2](), [3]())"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "--\u003e"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 39
    }
  },
  {
    "path": "gradle.properties",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "org.gradle.parallel\u003dfalse"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "org.gradle.jvmargs\u003d-XX:MaxMetaspaceSize\u003d512m -XX:+HeapDumpOnOutOfMemoryError -Xmx1024m -Dfile.encoding\u003dutf-8"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "# TO-DO: This is a workaround for a JDK11 bug which causes test coverage upload to fail."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "# Remove it when https://bugs.openjdk.java.net/browse/JDK-8221253 is fixed."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "systemProp.jdk.tls.client.protocols\u003d\"TLSv1,TLSv1.1,TLSv1.2\""
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.storage.AttractionListStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.storage.ItineraryListStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.storage.JsonAttractionListStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.storage.JsonItineraryListStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing TrackPad ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionListStorage attractionListStorage \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonAttractionListStorage(userPrefs.getAttractionListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryListStorage itineraryListStorage \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonItineraryListStorage(userPrefs.getItineraryListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        storage \u003d new StorageManager(attractionListStorage, itineraryListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s trackpad and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * The data from the sample trackpad will be used instead if {@code storage}\u0027s trackpad is not found,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * or an empty trackpad will be used instead if errors occur when reading {@code storage}\u0027s trackpad."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Optional\u003cReadOnlyAttractionList\u003e attractionListOptional;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ReadOnlyAttractionList initialAttractionList;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Optional\u003cReadOnlyItineraryList\u003e itineraryListOptional;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ReadOnlyItineraryList initialItineraryList;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // attraction list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            attractionListOptional \u003d storage.readAttractionList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (attractionListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                logger.info(\"Attraction data file not found. Will be starting with a sample AttractionList\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            initialAttractionList \u003d attractionListOptional.orElseGet(SampleDataUtil::getSampleAttractionsList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            logger.warning(\"Attraction data file not in the correct format. Will be starting with an empty\""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    + \" AttractionList\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            initialAttractionList \u003d new AttractionList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            logger.warning(\"Problem while reading from the attraction data file. Will be starting with an\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    + \" empty AttractionList\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            initialAttractionList \u003d new AttractionList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // itinerary list"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            itineraryListOptional \u003d storage.readItineraryList();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (itineraryListOptional.isEmpty()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                logger.info(\"Itinerary data file not found. Will be starting with an empty ItineraryList\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            initialItineraryList \u003d itineraryListOptional.orElseGet(SampleDataUtil::getSampleItineraryList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            logger.warning(\"Itinerary data file not in the correct format. Will be starting with an empty\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    + \" ItineraryList\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            initialItineraryList \u003d new ItineraryList();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            logger.warning(\"Problem while reading from the itinerary data file. Will be starting with an\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    + \" empty ItineraryList\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            initialItineraryList \u003d new ItineraryList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new ModelManager(initialAttractionList, initialItineraryList, userPrefs);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AttractionList\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    + \" and empty ItineraryList\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        logger.info(\"Starting TrackPad \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping TrackPad ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 6,
      "-": 160,
      "limkoonkiat": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String LOG_FILE \u003d \"trackpad.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command.\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format!\\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX \u003d \"The attraction index provided is invalid.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String MESSAGE_ATTRACTIONS_LISTED_OVERVIEW \u003d \"%1$d attractions listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX \u003d \"The itinerary index provided is invalid.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_ITINERARIES_LISTED_OVERVIEW \u003d \"%1$d itineraries listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_ITINERARY_NOT_SELECTED \u003d \"Please select an itinerary to work on.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // Itinerary Attraction"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTRACTION \u003d \"This attraction with the same start time, end time and \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"day visiting already exist in the itinerary.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_TIMING_CLASH \u003d \"The timing clashes with another attraction in the itinerary.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_INVALID_ITINERARY_DAY \u003d \"Your day does not exist in the itinerary.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_INVALID_START_TIME \u003d \"The start time cannot be later than end time.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "peter-yeh": 11,
      "-": 10,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryAttractionList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Attraction List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the AttractionList."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @see seedu.address.model.Model#getAttractionList()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ReadOnlyAttractionList getAttractionList();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of attractions */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    ObservableList\u003cAttraction\u003e getFilteredAttractionList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the user prefs\u0027 AttractionList file path."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getAttractionListFilePath();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Itinerary List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the ItineraryList."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @see seedu.address.model.Model#getItineraryList()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ReadOnlyItineraryList getItineraryList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of itineraries */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ObservableList\u003cItinerary\u003e getFilteredItineraryList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the user prefs\u0027 ItineraryList file path."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getItineraryListFilePath();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Itinerary Attraction List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Returns the ItineraryAttractionList."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @see seedu.address.model.Model#getItineraryAttractionList()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    ReadOnlyItineraryAttractionList getItineraryAttractionList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of itinerary attractions in the current selected itinerary */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    ObservableList\u003cItineraryAttraction\u003e getFilteredItineraryAttractionList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI Settings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 17,
      "-": 42,
      "limkoonkiat": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.parser.TrackPadParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryAttractionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final TrackPadParser trackPadParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        trackPadParser \u003d new TrackPadParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Command command \u003d trackPadParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            storage.saveAttractionList(model.getAttractionList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            storage.saveItineraryList(model.getItineraryList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Attraction List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return model.getAttractionList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return model.getFilteredAttractionList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return model.getAttractionListFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Itinerary List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return model.getItineraryList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return model.getFilteredItineraryList();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return model.getItineraryListFilePath();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Itinerary Attraction List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ReadOnlyItineraryAttractionList getItineraryAttractionList() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return model.getItineraryAttractionList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ObservableList\u003cItineraryAttraction\u003e getFilteredItineraryAttractionList() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return model.getFilteredItineraryAttractionList();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d GUI Settings \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 16,
      "-": 77,
      "limkoonkiat": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Help information should be shown to the user. */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** The application should exit. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /** The application should switch panels to Itinerary Attraction */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final ToSwitchItineraryPanels switchToItineraryAttraction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public enum ToSwitchItineraryPanels { YES, NO, NIL }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                         ToSwitchItineraryPanels switchToItineraryAttraction) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.switchToItineraryAttraction \u003d switchToItineraryAttraction;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this(feedbackToUser, false, false,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                ToSwitchItineraryPanels.NIL);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public CommandResult(String feedbackToUser, ToSwitchItineraryPanels switchToItineraryAttraction) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this(feedbackToUser, false, false, switchToItineraryAttraction);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ToSwitchItineraryPanels isSwitchToItineraryAttraction() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return switchToItineraryAttraction;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Overrides equal method to properly compare between 2 command results"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param other command result to compare with"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @return true or false"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // \u0026\u0026 switchToItineraryAttraction \u003d\u003d otherCommandResult.switchToItineraryAttraction;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, switchToItineraryAttraction);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 25,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting TrackPad as requested ...\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.NIL);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 2,
      "peter-yeh": 1,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.NIL);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 2,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/AddAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Adds an attraction to the attractions list in TrackPad."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AddAttractionCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-attraction\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an attraction to TrackPad. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + PREFIX_LOCATION + \"LOCATION \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_OPENING_HOURS + \"OPENING HOURS] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_PRICE_RANGE + \"PRICE RANGE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_VISITED + \"VISITED] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_NAME + \"Singapore Zoo \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_LOCATION + \"Singapore, Singapore \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_PHONE + \"62693411 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_EMAIL + \"sgzoo@example.com \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_ADDRESS + \"80 Mandai Lake Rd, 729826 \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Home to over 2,800 animals. \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_OPENING_HOURS + \"0830-1800 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_PRICE_RANGE + \"MEDIUM \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + PREFIX_RATING + \"4.8 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + PREFIX_VISITED + \"TRUE \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + PREFIX_TAG + \"animal.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New attraction added: %1$s.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTRACTION \u003d \"This attraction already exists in TrackPad.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final Attraction toAdd;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Creates an AddAttractionCommand to add the specified {@code Attraction}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AddAttractionCommand(Attraction attraction) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(attraction);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        toAdd \u003d attraction;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (model.hasAttraction(toAdd)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.addAttraction(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                || (other instanceof AddAttractionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddAttractionCommand) other).toAdd));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 21,
      "Robinho98": 8,
      "peter-yeh": 4,
      "-": 39,
      "limkoonkiat": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/ClearAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Clears all the attractions in the attractions list in TrackPad."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class ClearAttractionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear-attraction\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TrackPad\u0027s attractions has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setAttractionList(new AttractionList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 5,
      "-": 16,
      "limkoonkiat": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/DeleteAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Deletes an attraction identified using it\u0027s displayed index from the attractions list in TrackPad."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class DeleteAttractionCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-attraction\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + \": Deletes the attraction identified by the index number used in the displayed attraction list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Parameters: INDEX must be a number between 0 and 2147483647.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_DELETE_ATTRACTION_SUCCESS \u003d \"Deleted attraction: %1$s.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public DeleteAttractionCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        List\u003cAttraction\u003e lastShownList \u003d model.getFilteredAttractionList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attractionToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.deleteAttraction(attractionToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ATTRACTION_SUCCESS, attractionToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                || (other instanceof DeleteAttractionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteAttractionCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 8,
      "Robinho98": 7,
      "peter-yeh": 3,
      "-": 36,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/EditAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ATTRACTIONS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Edits the details of an existing attraction in the attractions list in TrackPad."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class EditAttractionCommand extends Command {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-attraction\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the attraction identified \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + \"by the index number used in the displayed attraction list. \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Parameters: INDEX must be a number between 0 and 2147483647 \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_LOCATION + \"LOCATION] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"[\" + PREFIX_OPENING_HOURS + \"OPENING HOURS] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"[\" + PREFIX_PRICE_RANGE + \"PRICE RANGE] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"[\" + PREFIX_RATING + \"RATING] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + \"[\" + PREFIX_VISITED + \"VISITED] \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_PHONE + \"62693411 \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + PREFIX_EMAIL + \"sgzoo@example.com.\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_EDIT_ATTRACTION_SUCCESS \u003d \"Edited Attraction: %1$s.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTRACTION \u003d \"This attraction already exists in TrackPad.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final EditAttractionDescriptor editAttractionDescriptor;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param index of the attraction in the filtered attraction list to edit"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param editAttractionDescriptor details to edit the attraction with"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionCommand(Index index, EditAttractionDescriptor editAttractionDescriptor) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(editAttractionDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.editAttractionDescriptor \u003d new EditAttractionDescriptor(editAttractionDescriptor);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        List\u003cAttraction\u003e lastShownList \u003d model.getFilteredAttractionList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attractionToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction editedAttraction \u003d createEditedAttraction(attractionToEdit, editAttractionDescriptor);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (attractionToEdit.equals(editedAttraction)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!attractionToEdit.isSameAttraction(editedAttraction) \u0026\u0026 model.hasAttraction(editedAttraction)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.setAttraction(attractionToEdit, editedAttraction);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.updateFilteredAttractionList(PREDICATE_SHOW_ALL_ATTRACTIONS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ATTRACTION_SUCCESS, editedAttraction));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Creates and returns a {@code Attraction} with the details of {@code attractionToEdit}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * edited with {@code editAttractionDescriptor}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private static Attraction createEditedAttraction(Attraction attractionToEdit,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                                                     EditAttractionDescriptor editAttractionDescriptor) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assert attractionToEdit !\u003d null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Name updatedName \u003d editAttractionDescriptor.getName().orElse(attractionToEdit.getName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Phone updatedPhone \u003d editAttractionDescriptor.getPhone().orElse(attractionToEdit.getPhone());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Email updatedEmail \u003d editAttractionDescriptor.getEmail().orElse(attractionToEdit.getEmail());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Address updatedAddress \u003d editAttractionDescriptor.getAddress().orElse(attractionToEdit.getAddress());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Description updatedDescription \u003d editAttractionDescriptor"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .getDescription().orElse(attractionToEdit.getDescription());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Location updatedLocation \u003d editAttractionDescriptor.getLocation().orElse(attractionToEdit.getLocation());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        OpeningHours updatedOpeningHours \u003d editAttractionDescriptor"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .getOpeningHours().orElse(attractionToEdit.getOpeningHours());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        PriceRange updatedPriceRange \u003d editAttractionDescriptor"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .getPriceRange().orElse(attractionToEdit.getPriceRange());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Rating updatedRating \u003d editAttractionDescriptor.getRating().orElse(attractionToEdit.getRating());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Visited updatedVisited \u003d editAttractionDescriptor.getVisited().orElse(attractionToEdit.getVisited());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editAttractionDescriptor.getTags().orElse(attractionToEdit.getTags());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new Attraction(updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                updatedDescription, updatedLocation, updatedOpeningHours, updatedPriceRange,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                updatedRating, updatedVisited, updatedTags);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!(other instanceof EditAttractionCommand)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand e \u003d (EditAttractionCommand) other;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                \u0026\u0026 editAttractionDescriptor.equals(e.editAttractionDescriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Stores the details to edit the attraction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * corresponding field value of the attraction."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static class EditAttractionDescriptor {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        private Location location;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        private OpeningHours openingHours;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        private PriceRange priceRange;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        private Rating rating;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        private Visited visited;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public EditAttractionDescriptor() {}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public EditAttractionDescriptor(EditAttractionDescriptor toCopy) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            setLocation(toCopy.location);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            setOpeningHours(toCopy.openingHours);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            setPriceRange(toCopy.priceRange);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            setRating(toCopy.rating);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            setVisited(toCopy.visited);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, phone, email, address, description,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    location, openingHours, priceRange, rating, visited, tags);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setLocation(Location location) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            this.location \u003d location;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public Optional\u003cLocation\u003e getLocation() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return Optional.ofNullable(location);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public void setOpeningHours(OpeningHours openingHours) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            this.openingHours \u003d openingHours;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public Optional\u003cOpeningHours\u003e getOpeningHours() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return Optional.ofNullable(openingHours);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public void setPriceRange(PriceRange priceRange) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            this.priceRange \u003d priceRange;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public Optional\u003cPriceRange\u003e getPriceRange() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return Optional.ofNullable(priceRange);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public void setRating(Rating rating) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            this.rating \u003d rating;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        public Optional\u003cRating\u003e getRating() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return Optional.ofNullable(rating);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void setVisited(Visited visited) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            this.visited \u003d visited;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public Optional\u003cVisited\u003e getVisited() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return Optional.ofNullable(visited);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            if (!(other instanceof EditAttractionDescriptor)) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            EditAttractionDescriptor e \u003d (EditAttractionDescriptor) other;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    \u0026\u0026 getLocation().equals(e.getLocation())"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    \u0026\u0026 getOpeningHours().equals(e.getOpeningHours())"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    \u0026\u0026 getPriceRange().equals(e.getPriceRange())"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    \u0026\u0026 getRating().equals(e.getRating())"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    \u0026\u0026 getVisited().equals(e.getVisited())"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 73,
      "Robinho98": 54,
      "leeyorktat": 3,
      "peter-yeh": 3,
      "-": 173,
      "limkoonkiat": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/FindAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Finds and lists all attractions in the attractions list in TrackPad whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class FindAttractionCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-attraction\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all attractions whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" Zoo Orchard Gardens.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final AttractionContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public FindAttractionCommand(AttractionContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.updateFilteredAttractionList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                String.format(Messages.MESSAGE_ATTRACTIONS_LISTED_OVERVIEW, model.getFilteredAttractionList().size()));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                || (other instanceof FindAttractionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindAttractionCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 8,
      "Robinho98": 2,
      "peter-yeh": 2,
      "leeyorktat": 1,
      "-": 29,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/ListAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ATTRACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Lists all attractions in the attractions list in TrackPad to the user."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class ListAttractionCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-attraction\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all attractions.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        model.updateFilteredAttractionList(PREDICATE_SHOW_ALL_ATTRACTIONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 5,
      "Robinho98": 1,
      "peter-yeh": 2,
      "-": 17,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/attraction/MarkVisitedAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ATTRACTIONS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Marks an existing attraction in the attractions list in TrackPad as visited."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class MarkVisitedAttractionCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"markVisited-attraction\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Marks the attraction identified \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + \"by the index number used in the displayed attraction list as visited.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Parameters: INDEX must be a number between 0 and 2147483647.\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_MARKVISITED_ATTRACTION_SUCCESS \u003d \"Attraction marked as visited: %1$s.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_ATTRACTION_ALREADY_MARKVISITED \u003d \"This attraction was already marked as \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            + \"visited.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param index of the attraction in the filtered attraction list to mark as visited"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "//     * @param markVisitedAttractionDescriptor details to edit the attraction with"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public MarkVisitedAttractionCommand(Index index) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        List\u003cAttraction\u003e lastShownList \u003d model.getFilteredAttractionList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attractionToMarkVisited \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (attractionToMarkVisited.getVisited().equals(new Visited(\"True\"))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new CommandException(MESSAGE_ATTRACTION_ALREADY_MARKVISITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction markedVisitedAttraction \u003d createMarkVisitedAttraction(attractionToMarkVisited);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.setAttraction(attractionToMarkVisited, markedVisitedAttraction);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.updateFilteredAttractionList(PREDICATE_SHOW_ALL_ATTRACTIONS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MARKVISITED_ATTRACTION_SUCCESS, markedVisitedAttraction));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Creates and returns a {@code Attraction} with the details of {@code attractionToEdit}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * edited with {@code editAttractionDescriptor}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static Attraction createMarkVisitedAttraction(Attraction attractionToMarkVisited) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assert attractionToMarkVisited !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Name unchangedName \u003d attractionToMarkVisited.getName();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Phone unchangedPhone \u003d attractionToMarkVisited.getPhone();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Email unchangedEmail \u003d attractionToMarkVisited.getEmail();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Address unchangedAddress \u003d attractionToMarkVisited.getAddress();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Description unchangedDescription \u003d attractionToMarkVisited.getDescription();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Location unchangedLocation \u003d attractionToMarkVisited.getLocation();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        OpeningHours unchangedOpeningHours \u003d attractionToMarkVisited.getOpeningHours();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        PriceRange unchangedPriceRange \u003d attractionToMarkVisited.getPriceRange();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Rating unchangedRating \u003d attractionToMarkVisited.getRating();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Visited updatedVisited \u003d new Visited(\"TRUE\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Set\u003cTag\u003e unchangedTags \u003d attractionToMarkVisited.getTags();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new Attraction(unchangedName, unchangedPhone, unchangedEmail, unchangedAddress,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                unchangedDescription, unchangedLocation, unchangedOpeningHours, unchangedPriceRange,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                unchangedRating, updatedVisited, unchangedTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!(other instanceof MarkVisitedAttractionCommand)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand e \u003d (MarkVisitedAttractionCommand) other;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return index.equals(e.index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 114,
      "peter-yeh": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 17,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/AddItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AddItineraryCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-itinerary\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an itinerary to TrackPad. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_START_DATE + \"START_DATE \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + PREFIX_END_DATE + \"END_DATE \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"[\" + PREFIX_BUDGET + \"BUDGET].\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New itinerary added: %1$s.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITINERARY \u003d \"This itinerary already exists in TrackPad.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_START_BEFORE_END_DATE \u003d \"Start date should come before end date.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final Itinerary toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates an AddItineraryCommand to add the specified {@code Itinerary}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AddItineraryCommand(Itinerary itinerary) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itinerary);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        toAdd \u003d itinerary;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (model.hasItinerary(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITINERARY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.addItinerary(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd), CommandResult.ToSwitchItineraryPanels.NO);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof AddItineraryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddItineraryCommand) other).toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 1,
      "peter-yeh": 3,
      "limkoonkiat": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/ClearItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Clears all the itineraries in the itinerary list in TrackPad."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ClearItineraryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear-itinerary\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"TrackPad\u0027s itineraries has been cleared!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setItineraryList(new ItineraryList());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult((MESSAGE_SUCCESS), CommandResult.ToSwitchItineraryPanels.NO);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 1,
      "limkoonkiat": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/DeleteItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Deletes an itinerary identified using it\u0027s displayed index from the itinerary list in TrackPad."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DeleteItineraryCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-itinerary\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \": Deletes the itinerary identified by the index number used in the displayed itinerary list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Parameters: INDEX must be a number between 0 and 2147483647.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_DELETE_ITINERARY_SUCCESS \u003d \"Deleted itinerary: %1$s.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public DeleteItineraryCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cItinerary\u003e lastShownList \u003d model.getFilteredItineraryList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.deleteItinerary(itineraryToDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ITINERARY_SUCCESS, itineraryToDelete),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.NO);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof DeleteItineraryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteItineraryCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 2,
      "peter-yeh": 2,
      "limkoonkiat": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/EditItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITINERARIES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Edits the details of an existing itinerary in the itineraries list in TrackPad."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class EditItineraryCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-itinerary\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the itinerary identified \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            + \"by the index number used in the displayed itinerary list. \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Parameters: INDEX must be a number between 0 and 2147483647 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            + \"[\" + PREFIX_START_DATE + \"START_DATE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            + \"[\" + PREFIX_END_DATE + \"END_DATE ] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"[\" + PREFIX_BUDGET + \"BUDGET ].\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 n/Singapore journey sd/05-06-2019.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_EDIT_ITINERARY_SUCCESS \u003d \"Edited Itinerary: %1$s.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITINERARY \u003d \"This itinerary already exists in TrackPad.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_START_BEFORE_END_DATE \u003d \"Start date should come before end date\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final EditItineraryDescriptor editItineraryDescriptor;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * @param index of the itinerary in the filtered itinerary list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * @param editItineraryDescriptor details to edit the itinerary with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public EditItineraryCommand(Index index, EditItineraryDescriptor editItineraryDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(editItineraryDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.editItineraryDescriptor \u003d new EditItineraryDescriptor(editItineraryDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        List\u003cItinerary\u003e lastShownList \u003d model.getFilteredItineraryList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Itinerary itineraryToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary editedItinerary \u003d createEditedItinerary(itineraryToEdit, editItineraryDescriptor);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (itineraryToEdit.equals(editedItinerary)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITINERARY);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!itineraryToEdit.isSameItinerary(editedItinerary) \u0026\u0026 model.hasItinerary(editedItinerary)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ITINERARY);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        model.setItinerary(itineraryToEdit, editedItinerary);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        model.updateFilteredItineraryList(PREDICATE_SHOW_ALL_ITINERARIES);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ITINERARY_SUCCESS, editedItinerary),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.NO);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Creates and returns a {@code Itinerary} with the details of {@code itineraryToEdit}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * edited with {@code editItineraryDescriptor}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private static Itinerary createEditedItinerary(Itinerary itineraryToEdit,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                                   EditItineraryDescriptor editItineraryDescriptor)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assert itineraryToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Name updatedName \u003d editItineraryDescriptor.getName().orElse(itineraryToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Description updatedDescription \u003d editItineraryDescriptor.getDescription()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .orElse(itineraryToEdit.getDescription());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        ItineraryDate updatedStartDate \u003d editItineraryDescriptor.getStartDate().orElse(itineraryToEdit.getStartDate());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        ItineraryDate updatedEndDate \u003d editItineraryDescriptor.getEndDate().orElse(itineraryToEdit.getEndDate());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Budget updatedBudget \u003d editItineraryDescriptor.getBudget().orElse(itineraryToEdit.getBudget());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (updatedStartDate.isAfter(updatedEndDate)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new CommandException(MESSAGE_START_BEFORE_END_DATE);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Itinerary(updatedName, updatedDescription, updatedStartDate, updatedEndDate, updatedBudget,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                itineraryToEdit.getDays());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!(other instanceof EditItineraryCommand)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        EditItineraryCommand e \u003d (EditItineraryCommand) other;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return index.equals(e.index) \u0026\u0026 editItineraryDescriptor.equals(e.editItineraryDescriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Stores the details to edit the itinerary with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * corresponding field value of the itinerary."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static class EditItineraryDescriptor {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        private ItineraryDate startDate;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        private ItineraryDate endDate;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        private Budget budget;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public EditItineraryDescriptor() {}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public EditItineraryDescriptor(EditItineraryDescriptor toCopy) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            setStartDate(toCopy.startDate);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            setEndDate(toCopy.endDate);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            setBudget(toCopy.budget);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, description, startDate, endDate, budget);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public void setStartDate(ItineraryDate startDate) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public Optional\u003cItineraryDate\u003e getStartDate() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return Optional.ofNullable(startDate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public void setEndDate(ItineraryDate endDate) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public Optional\u003cItineraryDate\u003e getEndDate() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return Optional.ofNullable(endDate);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.budget \u003d budget;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public Optional\u003cBudget\u003e getBudget() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return Optional.ofNullable(budget);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            if (!(other instanceof EditItineraryDescriptor)) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            EditItineraryDescriptor e \u003d (EditItineraryDescriptor) other;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                    \u0026\u0026 getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                    \u0026\u0026 getStartDate().equals(e.getStartDate())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                    \u0026\u0026 getEndDate().equals(e.getEndDate())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                    \u0026\u0026 getBudget().equals(e.getBudget());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 2,
      "leeyorktat": 204,
      "peter-yeh": 4,
      "limkoonkiat": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/FindItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Finds and lists all itineraries in the itineraries list in TrackPad whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class FindItineraryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find-itinerary\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all itineraries whose names contain any of \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" Korea\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final ItineraryContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public FindItineraryCommand(ItineraryContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        model.updateFilteredItineraryList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            String.format(Messages.MESSAGE_ITINERARIES_LISTED_OVERVIEW, model.getFilteredItineraryList().size()),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.NO);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            || (other instanceof FindItineraryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindItineraryCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 2,
      "leeyorktat": 44,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/ListItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITINERARIES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Lists all the itineraries in the itinerary list in TrackPad."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class ListItineraryCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list-itinerary\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all itineraries.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        model.updateFilteredItineraryList(PREDICATE_SHOW_ALL_ITINERARIES);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult((MESSAGE_SUCCESS), CommandResult.ToSwitchItineraryPanels.NO);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 1,
      "leeyorktat": 22,
      "peter-yeh": 1,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itinerary/SelectItineraryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Selects an itinerary in the itinerary list in TrackPad."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class SelectItineraryCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select-itinerary\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \": Selects the itinerary identified by the index number used in the displayed itinerary list.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        + \"Parameters: INDEX must be a number between 0 and 2147483647.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_SELECT_ITINERARY_SUCCESS \u003d \"Selected itinerary: %1$s.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public SelectItineraryCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        List\u003cItinerary\u003e lastShownList \u003d model.getFilteredItineraryList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Itinerary itineraryToSelect \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        model.setCurrentItinerary(itineraryToSelect);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_ITINERARY_SUCCESS, itineraryToSelect),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.YES);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            || (other instanceof SelectItineraryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u0026\u0026 targetIndex.equals(((SelectItineraryCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 2,
      "leeyorktat": 50,
      "peter-yeh": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itineraryattraction/AddItineraryAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.commands.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ATTRACTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITINERARY_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ITINERARY_NOT_SELECTED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TIMING_CLASH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Adds an attraction to the attractions list in TrackPad."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class AddItineraryAttractionCommand extends Command {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add-itinerary-attraction\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_ADD_ATTRACTION_SUCCESS \u003d \"Added Attraction: %1$s to Itinerary: %1$s.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an attraction identified by the index in \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"attraction list to the selected itinerary.\\n \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Parameters: INDEX must be a number between 0 and 2147483647 \" + PREFIX_START_TIME + \"START_TIME \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + PREFIX_END_TIME + \"END_TIME \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + PREFIX_DAY_VISITING + \"DAY_VISITING. \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_START_TIME + \"1000 \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + PREFIX_END_TIME + \"1600 \" + PREFIX_DAY_VISITING + \"3.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final ItineraryTime startTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final ItineraryTime endTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index dayVisiting;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Creates an AddAttractionCommand to add the specified {@code Attraction}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public AddItineraryAttractionCommand(Index index, ItineraryTime startTime, ItineraryTime endTime,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                                         Index dayVisiting) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(startTime);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(endTime);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(dayVisiting);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.dayVisiting \u003d dayVisiting;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction attraction;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction ia;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Day day;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (model.getCurrentItinerary() \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(MESSAGE_ITINERARY_NOT_SELECTED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        itinerary \u003d model.getCurrentItinerary();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        List\u003cAttraction\u003e lastShownList \u003d model.getFilteredAttractionList();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        attraction \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ia \u003d new ItineraryAttraction(attraction, startTime, endTime);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (dayVisiting.getZeroBased() \u003e\u003d itinerary.getDays().size()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ITINERARY_DAY);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        day \u003d itinerary.getDay(dayVisiting);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (day.contains(ia)) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // checks if there is a timing clash with an existing itinerary attraction"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (day.hasTimingClash(ia)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new CommandException(MESSAGE_TIMING_CLASH);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        itinerary.addItineraryAttraction(ia, dayVisiting);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ADD_ATTRACTION_SUCCESS, ia),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.YES);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                || (other instanceof AddItineraryAttractionCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 index.equals(((AddItineraryAttractionCommand) other).index)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 startTime.equals(((AddItineraryAttractionCommand) other).startTime)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 endTime.equals(((AddItineraryAttractionCommand) other).endTime)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 dayVisiting.equals(((AddItineraryAttractionCommand) other).dayVisiting));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "Robinho98": 2,
      "peter-yeh": 105,
      "limkoonkiat": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itineraryattraction/DeleteItineraryAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.commands.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ITINERARY_NOT_SELECTED;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Deletes an attraction identified using it\u0027s displayed index from the attractions in current itinerary."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class DeleteItineraryAttractionCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete-itinerary-attraction\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_DELETE_ATTRACTION_SUCCESS \u003d \"Deleted attraction: %1$s.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes the attraction identified by the index of\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"attraction in the selected itinerary.\\nParameters: INDEX must be a number between 0 and 2147483647 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + PREFIX_DAY_VISITING + \"DAY VISITING .\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \" + PREFIX_DAY_VISITING + \"2.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index dayVisiting;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param index       of the attraction in the selected itinerary"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param dayVisiting the attraction"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public DeleteItineraryAttractionCommand(Index index, Index dayVisiting) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.dayVisiting \u003d dayVisiting;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction itineraryAttractionToDelete;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Day day;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (model.getCurrentItinerary() \u003d\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(MESSAGE_ITINERARY_NOT_SELECTED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        itinerary \u003d model.getCurrentItinerary();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (dayVisiting.getZeroBased() \u003e\u003d itinerary.getDays().size()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ITINERARY_DAY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        day \u003d model.getCurrentItinerary().getDay(dayVisiting);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        List\u003cItineraryAttraction\u003e itineraryAttractions \u003d day.getItineraryAttractions();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d itineraryAttractions.size()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        itineraryAttractionToDelete \u003d itineraryAttractions.get(index.getZeroBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        itinerary.deleteItineraryAttraction(index, dayVisiting);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ATTRACTION_SUCCESS, itineraryAttractionToDelete),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.YES);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!(other instanceof DeleteItineraryAttractionCommand)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand delIaCommand \u003d (DeleteItineraryAttractionCommand) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return index.equals(delIaCommand.index) \u0026\u0026 dayVisiting.equals(delIaCommand.dayVisiting);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 2,
      "peter-yeh": 88
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/itineraryattraction/EditItineraryAttractionCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.commands.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ATTRACTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITINERARY_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ITINERARY_NOT_SELECTED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TIMING_CLASH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Edits the details of an existing attraction in the itinerary."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class EditItineraryAttractionCommand extends Command {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit-itinerary-attraction\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_EDIT_ATTRACTION_SUCCESS \u003d \"Edited Attraction: %1$s.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the itinerary attraction \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"identified by the name of the itinerary attraction displayed in the itinerary.\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Parameters: INDEX must be a number between 0 and 2147483647 \" + PREFIX_DAY_VISITING + \"DAY VISITING \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"[\" + PREFIX_START_TIME + \"START_TIME] \""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"[\" + PREFIX_END_TIME + \"END_TIME].\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 2 \" + PREFIX_DAY_VISITING + \"2 \" + PREFIX_START_TIME + \"1000 \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + PREFIX_DAY_VISITING + \"4.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index dayVisiting;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final EditItineraryAttractionDescriptor editIaDescriptor;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param index            of the itinerary attraction to edit"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param editIaDescriptor details to edit the itinerary attraction with"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionCommand(Index index, Index dayVisiting,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                                          EditItineraryAttractionDescriptor editIaDescriptor) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(editIaDescriptor);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.dayVisiting \u003d dayVisiting;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.editIaDescriptor \u003d new EditItineraryAttractionDescriptor(editIaDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Day day;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (model.getCurrentItinerary() \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(MESSAGE_ITINERARY_NOT_SELECTED);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        itinerary \u003d model.getCurrentItinerary();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (dayVisiting.getZeroBased() \u003e\u003d itinerary.getDays().size()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ITINERARY_DAY);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        day \u003d itinerary.getDay(dayVisiting);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        List\u003cItineraryAttraction\u003e itineraryAttractionsThatDay \u003d day.getItineraryAttractions();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d itineraryAttractionsThatDay.size()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction itineraryAttractionToEdit \u003d itineraryAttractionsThatDay.get(index.getZeroBased());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction editedItineraryAttraction \u003d createEditedItineraryAttraction(itineraryAttractionToEdit,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                editIaDescriptor);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (itineraryAttractionToEdit.equals(editedItineraryAttraction)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // new itinerary must comply with start time earlier than end time"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!editedItineraryAttraction.getStartTime().isEarlierThan(editedItineraryAttraction.getEndTime())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_START_TIME);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // checks if there is a timing clash with an existing itinerary attraction"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (itinerary.getDay(dayVisiting).hasTimingClash(editedItineraryAttraction, itineraryAttractionToEdit)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new CommandException(MESSAGE_TIMING_CLASH);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itinerary.editItineraryAttraction(itineraryAttractionToEdit, editedItineraryAttraction, dayVisiting);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ATTRACTION_SUCCESS, editedItineraryAttraction),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.YES);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Creates and returns a {@code Attraction} with the details of {@code attractionToEdit}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * edited with {@code editItineraryAttractionDescriptor}."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private ItineraryAttraction createEditedItineraryAttraction(ItineraryAttraction itineraryAttractionToEdit,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                                                                EditItineraryAttractionDescriptor editItiAttrDesc) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assert itineraryAttractionToEdit !\u003d null;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Name updatedName \u003d editItiAttrDesc.getName().orElse(itineraryAttractionToEdit.getName());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Phone updatedPhone \u003d editItiAttrDesc.getPhone().orElse(itineraryAttractionToEdit.getPhone());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Email updatedEmail \u003d editItiAttrDesc.getEmail().orElse(itineraryAttractionToEdit.getEmail());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Address updatedAddress \u003d editItiAttrDesc.getAddress().orElse(itineraryAttractionToEdit.getAddress());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Description updatedDescription \u003d editItiAttrDesc"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .getDescription().orElse(itineraryAttractionToEdit.getDescription());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Location updatedLocation \u003d editItiAttrDesc.getLocation().orElse(itineraryAttractionToEdit.getLocation());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        OpeningHours updatedOpeningHours \u003d editItiAttrDesc"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .getOpeningHours().orElse(itineraryAttractionToEdit.getOpeningHours());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        PriceRange updatedPriceRange \u003d editItiAttrDesc"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .getPriceRange().orElse(itineraryAttractionToEdit.getPriceRange());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Rating updatedRating \u003d editItiAttrDesc.getRating().orElse(itineraryAttractionToEdit.getRating());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Visited updatedVisited \u003d editItiAttrDesc.getVisited().orElse(itineraryAttractionToEdit.getVisited());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editItiAttrDesc.getTags().orElse(itineraryAttractionToEdit.getTags());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime startTime \u003d editItiAttrDesc.getStartTime().orElse(itineraryAttractionToEdit.getStartTime());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime endTime \u003d editItiAttrDesc.getEndTime().orElse(itineraryAttractionToEdit.getEndTime());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new ItineraryAttraction(new Attraction(updatedName, updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                updatedDescription, updatedLocation, updatedOpeningHours, updatedPriceRange,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                updatedRating, updatedVisited, updatedTags), startTime, endTime);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!(other instanceof EditItineraryAttractionCommand)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand e \u003d (EditItineraryAttractionCommand) other;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 editIaDescriptor.equals(e.editIaDescriptor)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 dayVisiting.equals(e.dayVisiting);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Stores the details to edit the attraction with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * corresponding field value of the attraction."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static class EditItineraryAttractionDescriptor extends EditAttractionDescriptor {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private ItineraryTime startTime;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private ItineraryTime endTime;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public EditItineraryAttractionDescriptor() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public EditItineraryAttractionDescriptor(EditItineraryAttractionDescriptor toCopy) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toCopy.getName().isPresent()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                setName(toCopy.getName().get());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toCopy.getPhone().isPresent()) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                setPhone(toCopy.getPhone().get());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toCopy.getEmail().isPresent()) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                setEmail(toCopy.getEmail().get());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toCopy.getAddress().isPresent()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                setAddress(toCopy.getAddress().get());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toCopy.getDescription().isPresent()) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                setDescription(toCopy.getDescription().get());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toCopy.getLocation().isPresent()) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                setLocation(toCopy.getLocation().get());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toCopy.getOpeningHours().isPresent()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                setOpeningHours(toCopy.getOpeningHours().get());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toCopy.getPriceRange().isPresent()) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                setPriceRange(toCopy.getPriceRange().get());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toCopy.getRating().isPresent()) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                setRating(toCopy.getRating().get());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toCopy.getVisited().isPresent()) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                setVisited(toCopy.getVisited().get());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toCopy.getTags().isPresent()) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                setTags(toCopy.getTags().get());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            setStartTime(toCopy.startTime);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            setEndTime(toCopy.endTime);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "         */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return super.isAnyFieldEdited() || CollectionUtil.isAnyNonNull(startTime, endTime);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setStartTime(ItineraryTime startTime) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Optional\u003cItineraryTime\u003e getStartTime() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return Optional.ofNullable(startTime);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setEndTime(ItineraryTime endTime) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Optional\u003cItineraryTime\u003e getEndTime() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return Optional.ofNullable(endTime);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (!(other instanceof EditItineraryAttractionDescriptor)) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            EditItineraryAttractionDescriptor e \u003d (EditItineraryAttractionDescriptor) other;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (e.getStartTime().isPresent() \u0026\u0026 !e.getStartTime().get().equals(startTime)) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (e.getEndTime().isPresent() \u0026\u0026 !e.getEndTime().get().equals(endTime)) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return super.equals(other);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 2,
      "peter-yeh": 278,
      "limkoonkiat": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //Prefixes for shared fields"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Prefixes for Attraction fields"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Prefix PREFIX_LOCATION \u003d new Prefix(\"l/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final Prefix PREFIX_OPENING_HOURS \u003d new Prefix(\"op/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final Prefix PREFIX_PRICE_RANGE \u003d new Prefix(\"pr/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final Prefix PREFIX_RATING \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final Prefix PREFIX_VISITED \u003d new Prefix(\"v/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Prefixes for Itinerary fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sd/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"ed/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Prefix PREFIX_BUDGET \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Prefixes for ItineraryAttraction fields"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Prefix PREFIX_START_TIME \u003d new Prefix(\"st/\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Prefix PREFIX_END_TIME \u003d new Prefix(\"et/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Prefix PREFIX_DAY_VISITING \u003d new Prefix(\"day/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 3,
      "Robinho98": 1,
      "peter-yeh": 5,
      "-": 15,
      "limkoonkiat": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // todo remove if never used. I think it\u0027s never shown as it\u0027s always over shadowed by other error."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"INDEX must be a number between 0 and 2147483647.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses a {@code String description} into an {@code Description}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String trimmedDescription \u003d description.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!Description.isValidDescription(trimmedDescription)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Description(trimmedDescription);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Parsers for Attraction-----------------------------------------------------------------------------"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new ParseException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses a {@code String location} into a {@code Location}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws ParseException if the given {@code location} is invalid."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static Location parseLocation(String location) throws ParseException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String trimmedLocation \u003d location.trim();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!Location.isValidLocation(trimmedLocation)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Location(trimmedLocation);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses a {@code String openingHours} into an {@code OpeningHours}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws ParseException if the given {@code openingHours} is invalid."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static OpeningHours parseOpeningHours(String openingHours) throws ParseException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(openingHours);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String trimmedOpeningHours \u003d openingHours.trim();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!OpeningHours.isValidOpeningHours(trimmedOpeningHours)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(OpeningHours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new OpeningHours(trimmedOpeningHours);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses a {@code String priceRange} into an {@code PriceRange}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws ParseException if the given {@code priceRange} is invalid."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static PriceRange parsePriceRange(String priceRange) throws ParseException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(priceRange);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String trimmedPriceRange \u003d priceRange.trim();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!PriceRange.isValidPriceRange(trimmedPriceRange)) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(PriceRange.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new PriceRange(trimmedPriceRange);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses a {@code String rating} into an {@code Rating}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws ParseException if the given {@code rating} is invalid."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static Rating parseRating(String rating) throws ParseException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String trimmedRating \u003d rating.trim();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!Rating.isValidRating(trimmedRating)) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new Rating(trimmedRating);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Parses a {@code String visited} into an {@code Visited}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @throws ParseException if the given {@code visited} is invalid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static Visited parseVisited(String visited) throws ParseException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(visited);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String trimmedVisited \u003d visited.trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!Visited.isValidVisited(trimmedVisited)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(Visited.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new Visited(trimmedVisited);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Parsers for Itinerary------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses {@code String date} into a {@code ItineraryDate}."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static ItineraryDate parseItineraryDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!ItineraryDate.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException(ItineraryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new ItineraryDate(trimmedDate);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses {@code String budget} into a {@code Budget}."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static Budget parseBudget(String budget) throws ParseException {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String trimmedBudget \u003d budget.trim().replaceAll(\"\\\\$\", \"\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!Budget.isValidBudget(trimmedBudget)) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException(Budget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Budget(trimmedBudget);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Parsers for ItineraryAttraction--------------------------------------------------------------------"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static ItineraryTime parseItineraryTime(String time) throws ParseException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(time);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String trimmedTime \u003d time.trim();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!ItineraryTime.isValidItineraryTime(trimmedTime)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new ItineraryTime(trimmedTime);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Calls parseIndex return custom message if day is invalid, returning more relevant error message to user."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static Index parseDayIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return parseIndex(oneBasedIndex);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 15,
      "yuxuanxc": 60,
      "peter-yeh": 42,
      "-": 111,
      "limkoonkiat": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add Singapore Zoo t/ animal\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 38,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TrackPadParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.AddAttractionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.ClearAttractionCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.DeleteAttractionCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.FindAttractionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.ListAttractionCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.commands.attraction.MarkVisitedAttractionCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.AddItineraryCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.ClearItineraryCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.DeleteItineraryCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.FindItineraryCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.ListItineraryCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.SelectItineraryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.AddItineraryAttractionCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.DeleteItineraryAttractionCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.attraction.AddAttractionCommandParser;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.attraction.DeleteAttractionCommandParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.attraction.EditAttractionCommandParser;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.attraction.FindAttractionCommandParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.parser.attraction.MarkVisitedAttractionCommandParser;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.itinerary.AddItineraryCommandParser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.itinerary.DeleteItineraryCommandParser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.itinerary.EditItineraryCommandParser;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.itinerary.FindItineraryCommandParser;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.itinerary.SelectItineraryCommandParser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.itineraryattraction.AddItineraryAttractionCommandParser;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.itineraryattraction.DeleteItineraryAttractionCommandParser;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.itineraryattraction.EditItineraryAttractionCommandParser;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class TrackPadParser {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // The first group, commandWord is words without / and numbers, but not working"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // private static final Pattern BASIC_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    //     Pattern.compile(\"(?\u003ccommandWord\u003e^[^/||[^\\\\D]]*)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        case AddAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new AddAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        case EditAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new EditAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        case DeleteAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new DeleteAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        case MarkVisitedAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return new MarkVisitedAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        case ClearAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new ClearAttractionCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        case FindAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new FindAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        case ListAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new ListAttractionCommand();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        case AddItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new AddItineraryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        case EditItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return new EditItineraryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        case DeleteItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new DeleteItineraryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        case ClearItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new ClearItineraryCommand();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        case FindItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return new FindItineraryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        case ListItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return new ListItineraryCommand();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        case SelectItineraryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return new SelectItineraryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        case AddItineraryAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return new AddItineraryAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        case EditItineraryAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return new EditItineraryAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        case DeleteItineraryAttractionCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return new DeleteItineraryAttractionCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 22,
      "Robinho98": 6,
      "leeyorktat": 19,
      "peter-yeh": 17,
      "-": 53,
      "limkoonkiat": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/attraction/AddAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.AddAttractionCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Parses input arguments and creates a new AddAttractionCommand object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AddAttractionCommandParser implements Parser\u003cAddAttractionCommand\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAttractionCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * and returns an AddAttractionCommand object for execution."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AddAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        PREFIX_DESCRIPTION, PREFIX_LOCATION, PREFIX_OPENING_HOURS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        PREFIX_PRICE_RANGE, PREFIX_RATING, PREFIX_VISITED, PREFIX_TAG);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only check for name and location of the attraction, the rest are optional."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_LOCATION)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Name is not optional"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Phone is optional"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Phone phone;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            phone \u003d new Phone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Email is optional"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Email email;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            email \u003d new Email();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Address is optional"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Address address;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            address \u003d new Address();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // Description is optional"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Description description;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            description \u003d new Description();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Location is not optional"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Location location \u003d ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // Opening Hours is optional"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        OpeningHours openingHours;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OPENING_HOURS).isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            openingHours \u003d ParserUtil.parseOpeningHours(argMultimap.getValue(PREFIX_OPENING_HOURS).get());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            openingHours \u003d new OpeningHours();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // Price Range is optional"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        PriceRange priceRange;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE_RANGE).isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            priceRange \u003d ParserUtil.parsePriceRange(argMultimap.getValue(PREFIX_PRICE_RANGE).get());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            priceRange \u003d new PriceRange();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // Rating is optional"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Rating rating;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            rating \u003d ParserUtil.parseRating(argMultimap.getValue(PREFIX_RATING).get());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            rating \u003d new Rating();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // Visited is optional"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Visited visited;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VISITED).isPresent()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            visited \u003d ParserUtil.parseVisited(argMultimap.getValue(PREFIX_VISITED).get());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            visited \u003d new Visited();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Attraction attraction \u003d new Attraction(name, phone, email, address, description,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                location, openingHours, priceRange, rating, visited, tagList);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new AddAttractionCommand(attraction);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 55,
      "Robinho98": 15,
      "leeyorktat": 1,
      "peter-yeh": 26,
      "-": 40,
      "limkoonkiat": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/attraction/DeleteAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.DeleteAttractionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Parses input arguments and creates a new DeleteAttractionCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class DeleteAttractionCommandParser implements Parser\u003cDeleteAttractionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteAttractionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * and returns a DeleteAttractionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public DeleteAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return new DeleteAttractionCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/attraction/EditAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Parses input arguments and creates a new EditAttractionCommand object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class EditAttractionCommandParser implements Parser\u003cEditAttractionCommand\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditAttractionCommand"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * and returns an EditAttractionCommand object for execution."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        PREFIX_DESCRIPTION, PREFIX_LOCATION, PREFIX_OPENING_HOURS,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        PREFIX_PRICE_RANGE, PREFIX_RATING, PREFIX_VISITED, PREFIX_TAG);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    EditAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor editAttractionDescriptor \u003d new EditAttractionDescriptor();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            editAttractionDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            editAttractionDescriptor.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            editAttractionDescriptor.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            editAttractionDescriptor.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            editAttractionDescriptor.setDescription(ParserUtil.parseDescription("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            editAttractionDescriptor.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OPENING_HOURS).isPresent()) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            editAttractionDescriptor.setOpeningHours(ParserUtil.parseOpeningHours("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    argMultimap.getValue(PREFIX_OPENING_HOURS).get()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE_RANGE).isPresent()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            editAttractionDescriptor.setPriceRange(ParserUtil.parsePriceRange("
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    argMultimap.getValue(PREFIX_PRICE_RANGE).get()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            editAttractionDescriptor.setRating(ParserUtil.parseRating("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    argMultimap.getValue(PREFIX_RATING).get()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VISITED).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            editAttractionDescriptor.setVisited(ParserUtil.parseVisited("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    argMultimap.getValue(PREFIX_VISITED).get()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editAttractionDescriptor::setTags);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!editAttractionDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new ParseException(EditAttractionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new EditAttractionCommand(index, editAttractionDescriptor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 37,
      "Robinho98": 13,
      "-": 63,
      "limkoonkiat": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/attraction/FindAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.FindAttractionCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Parses input arguments and creates a new FindAttractionCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class FindAttractionCommandParser implements Parser\u003cFindAttractionCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindAttractionCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * and returns a FindAttractionCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public FindAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new FindAttractionCommand(new AttractionContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 10,
      "-": 23,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/attraction/MarkVisitedAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.commands.attraction.MarkVisitedAttractionCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Parses input arguments and creates a new MarkVisitedAttractionCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class MarkVisitedAttractionCommandParser implements Parser\u003cMarkVisitedAttractionCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MarkVisitedAttractionCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * and returns a MarkVisitedAttractionCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public MarkVisitedAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return new MarkVisitedAttractionCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MarkVisitedAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/AddItineraryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.AddItineraryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Parses input arguments and creates a new AddItineraryCommand object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AddItineraryCommandParser implements Parser\u003cAddItineraryCommand\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddItineraryCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * and returns an AddItineraryCommand object for execution."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AddItineraryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        PREFIX_END_DATE, PREFIX_BUDGET);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_START_DATE, PREFIX_END_DATE)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItineraryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Name is not optional"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Description is optional"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Description description;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            description \u003d new Description();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Start date is not optional"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryDate startDate \u003d ParserUtil.parseItineraryDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // End date is not optional"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryDate endDate \u003d ParserUtil.parseItineraryDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Budget is optional"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Budget budget;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BUDGET).isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            budget \u003d ParserUtil.parseBudget(argMultimap.getValue(PREFIX_BUDGET).get());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            budget \u003d new Budget();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (startDate.isAfter(endDate)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException(AddItineraryCommand.MESSAGE_START_BEFORE_END_DATE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itinerary \u003d new Itinerary(name, description, startDate, endDate, budget, new ArrayList\u003cDay\u003e());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new AddItineraryCommand(itinerary);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/DeleteItineraryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.DeleteItineraryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Parses input arguments and creates a new DeleteItineraryCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DeleteItineraryCommandParser implements Parser\u003cDeleteItineraryCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteItineraryCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * and returns a DeleteItineraryCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public DeleteItineraryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new DeleteItineraryCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItineraryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/EditItineraryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand.EditItineraryDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Parses input arguments and creates a new EditItineraryCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class EditItineraryCommandParser implements Parser\u003cEditItineraryCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditItineraryCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * and returns an EditItineraryCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public EditItineraryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_DESCRIPTION, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                PREFIX_END_DATE, PREFIX_BUDGET);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                EditItineraryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        EditItineraryDescriptor editItineraryDescriptor \u003d new EditItineraryDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            editItineraryDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            editItineraryDescriptor"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .setDescription(ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_DATE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            editItineraryDescriptor.setStartDate(ParserUtil.parseItineraryDate(argMultimap.getValue(PREFIX_START_DATE)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .get()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_DATE).isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            editItineraryDescriptor.setEndDate(ParserUtil.parseItineraryDate(argMultimap.getValue(PREFIX_END_DATE)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .get()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BUDGET).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            editItineraryDescriptor.setBudget(ParserUtil.parseBudget(argMultimap.getValue(PREFIX_BUDGET).get()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!editItineraryDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new ParseException(EditItineraryCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return new EditItineraryCommand(index, editItineraryDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 71,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/FindItineraryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.FindItineraryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Parses input arguments and creates a new FindItineraryCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class FindItineraryCommandParser implements Parser\u003cFindItineraryCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindItineraryCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * and returns a FindItineraryCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public FindItineraryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindItineraryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return new FindItineraryCommand(new ItineraryContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itinerary/SelectItineraryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.SelectItineraryCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Parses input arguments and creates a new SelectItineraryCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class SelectItineraryCommandParser implements Parser\u003cSelectItineraryCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SelectItineraryCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * and returns a SelectItineraryCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public SelectItineraryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return new SelectItineraryCommand(index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectItineraryCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itineraryattraction/AddItineraryAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.parser.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_START_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.AddItineraryAttractionCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class AddItineraryAttractionCommandParser implements Parser\u003cAddItineraryAttractionCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddiCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * and returns an AddiCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * The command is: add itinerary attraction att/2 st/1300 et/2100 day/2"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public AddItineraryAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_START_TIME, PREFIX_END_TIME,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREFIX_DAY_VISITING);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_DAY_VISITING)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    AddItineraryAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    AddItineraryAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime startTime \u003d ParserUtil.parseItineraryTime(argMultimap.getValue(PREFIX_START_TIME).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime endTime \u003d ParserUtil.parseItineraryTime(argMultimap.getValue(PREFIX_END_TIME).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!startTime.isEarlierThan(endTime)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_START_TIME);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index dayVisiting \u003d ParserUtil.parseDayIndex(argMultimap.getValue(PREFIX_DAY_VISITING).get());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new AddItineraryAttractionCommand(index, startTime, endTime, dayVisiting);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itineraryattraction/DeleteItineraryAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.parser.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.DeleteItineraryAttractionCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Parses input arguments and creates a new DeleteItineraryAttractionCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class DeleteItineraryAttractionCommandParser implements Parser\u003cDeleteItineraryAttractionCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteItineraryAttractionCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * and returns a DeleteItineraryAttractionCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public DeleteItineraryAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_DAY_VISITING);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DAY_VISITING) || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    DeleteItineraryAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItineraryAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index dayVisiting \u003d ParserUtil.parseDayIndex(argMultimap.getValue(PREFIX_DAY_VISITING).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new DeleteItineraryAttractionCommand(index, dayVisiting);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/itineraryattraction/EditItineraryAttractionCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.parser.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand.EditItineraryAttractionDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.Parser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Parses input arguments and creates a new EditItineraryAttractionCommand object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class EditItineraryAttractionCommandParser implements Parser\u003cEditItineraryAttractionCommand\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditItineraryAttractionCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * and returns an EditItineraryAttractionCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREFIX_DESCRIPTION, PREFIX_LOCATION, PREFIX_OPENING_HOURS,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREFIX_PRICE_RANGE, PREFIX_RATING, PREFIX_VISITED, PREFIX_TAG, // same as EditAttractionCommandParser"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREFIX_START_TIME, PREFIX_END_TIME, PREFIX_DAY_VISITING); // new for itineraryAttraction"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    EditItineraryAttractionCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DAY_VISITING).isEmpty() || argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    EditItineraryAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index dayVisiting \u003d ParserUtil.parseDayIndex(argMultimap.getValue(PREFIX_DAY_VISITING).get());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor editItiAttrDesc \u003d new EditItineraryAttractionDescriptor();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setPhone(ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE).get()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setEmail(ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL).get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setAddress(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS).get()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setDescription(ParserUtil"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_LOCATION).isPresent()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setLocation(ParserUtil.parseLocation(argMultimap.getValue(PREFIX_LOCATION).get()));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OPENING_HOURS).isPresent()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setOpeningHours(ParserUtil"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    .parseOpeningHours(argMultimap.getValue(PREFIX_OPENING_HOURS).get()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_PRICE_RANGE).isPresent()) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setPriceRange(ParserUtil"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    .parsePriceRange(argMultimap.getValue(PREFIX_PRICE_RANGE).get()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_RATING).isPresent()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setRating(ParserUtil"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    .parseRating(argMultimap.getValue(PREFIX_RATING).get()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VISITED).isPresent()) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setVisited(ParserUtil"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    .parseVisited(argMultimap.getValue(PREFIX_VISITED).get()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editItiAttrDesc::setTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_START_TIME).isPresent()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setStartTime(ParserUtil.parseItineraryTime(argMultimap.getValue(PREFIX_START_TIME).get()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_END_TIME).isPresent()) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            editItiAttrDesc.setEndTime(ParserUtil.parseItineraryTime(argMultimap.getValue(PREFIX_END_TIME).get()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!editItiAttrDesc.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new ParseException(EditItineraryAttractionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new EditItineraryAttractionCommand(index, dayVisiting, editItiAttrDesc);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 136
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AttractionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.UniqueAttractionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Wraps all data at trackPad\u0027s attraction list level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Duplicates are not allowed (by .isSameAttraction comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AttractionList implements ReadOnlyAttractionList {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final UniqueAttractionList attractions;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        attractions \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates an AttractionList using the Attractions in the {@code toBeCopied}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionList(ReadOnlyAttractionList toBeCopied) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Replaces the contents of the attraction list with {@code attractions}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * {@code attractions} must not contain duplicate attractions."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions(List\u003cAttraction\u003e attractions) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.attractions.setAttractions(attractions);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Resets the existing data of this {@code AttractionList} with {@code newData}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void resetData(ReadOnlyAttractionList newData) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        setAttractions(newData.getAttractionList());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    //// attraction-level operations"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if a attraction with the same identity as {@code attraction} exists in the attraction list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(attraction);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return attractions.contains(attraction);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds a attraction to the attraction list."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The attraction must not already exist in the attraction list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void addAttraction(Attraction a) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        attractions.add(a);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Replaces the given attraction {@code target} in the list with {@code editedAttraction}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code target} must exist in the attraction list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * The attraction identity of {@code editedAttraction} must not be the same as another existing"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * attraction in the attraction list."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(editedAttraction);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        attractions.setAttraction(target, editedAttraction);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Removes {@code key} from this {@code AttractionList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code key} must exist in the attraction list."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void removeAttraction(Attraction key) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        attractions.remove(key);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return attractions.asUnmodifiableObservableList().size() + \" attractions\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public ObservableList\u003cAttraction\u003e getAttractionList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return attractions.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof AttractionList // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 attractions.equals(((AttractionList) other).attractions));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return attractions.hashCode();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "leeyorktat": 104,
      "limkoonkiat": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ItineraryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.UniqueItineraryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Wraps all data at trackPad\u0027s itinerary list level"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Duplicates are not allowed (by .isSameItinerary comparison)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryList implements ReadOnlyItineraryList {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final UniqueItineraryList itineraries;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Itinerary currentItinerary;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraries \u003d new UniqueItineraryList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates an ItineraryList using the Itineraries in the {@code toBeCopied}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryList(ReadOnlyItineraryList toBeCopied) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces the contents of the itinerary list with {@code itineraries}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code itineraries} must not contain duplicate itineraries."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraries(List\u003cItinerary\u003e itineraries) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraries.setItineraries(itineraries);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Resets the existing data of this {@code ItineraryList} with {@code newData}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void resetData(ReadOnlyItineraryList newData) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        setItineraries(newData.getItineraryList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //// itinerary-level operations"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if an itinerary with the same identity as {@code itinerary} exists in the itinerary list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itinerary);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraries.contains(itinerary);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds an itinerary to the itinerary list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary must not already exist in the itinerary list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void addItinerary(Itinerary a) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraries.add(a);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces the given itinerary {@code target} in the list with {@code editedItinerary}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code target} must exist in the itinerary list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary identity of {@code editedItinerary} must not be the same as another existing"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * itinerary in the itinerary list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(editedItinerary);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraries.setItinerary(target, editedItinerary);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Removes {@code key} from this {@code ItineraryList}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code key} must exist in the itinerary list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void removeItinerary(Itinerary key) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraries.remove(key);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    //// current Itinerary methods"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void setCurrentItinerary(Itinerary currentItinerary) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.currentItinerary \u003d currentItinerary;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this.currentItinerary;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraries.asUnmodifiableObservableList().size() + \" itineraries\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ObservableList\u003cItinerary\u003e getItineraryList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraries.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof ItineraryList // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 itineraries.equals(((ItineraryList) other).itineraries))"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 Optional.ofNullable(currentItinerary)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .equals(Optional.ofNullable(((ItineraryList) other).currentItinerary));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraries.hashCode();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 15,
      "limkoonkiat": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    Predicate\u003cAttraction\u003e PREDICATE_SHOW_ALL_ATTRACTIONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Predicate\u003cItinerary\u003e PREDICATE_SHOW_ALL_ITINERARIES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the user prefs\u0027 attraction list file path."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getAttractionListFilePath();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the user prefs\u0027 attraction list file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void setAttractionListFilePath(Path attractionListFilePath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the user prefs\u0027 itinerary list file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getItineraryListFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the user prefs\u0027 itinerary list file path."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void setItineraryListFilePath(Path itineraryListFilePath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AttractionList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces attraction list data with the data in {@code attractionList}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void setAttractionList(ReadOnlyAttractionList attractionList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the attraction list"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ReadOnlyAttractionList getAttractionList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if a attraction with the same identity as {@code attraction} exists in the attraction list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    boolean hasAttraction(Attraction attraction);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Deletes the given attraction."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The attraction must exist in the attraction list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    void deleteAttraction(Attraction target);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Adds the given attraction."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code attraction} must not already exist in the attraction list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    void addAttraction(Attraction attraction);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Replaces the given attraction {@code target} with {@code editedAttraction}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code target} must exist in the attraction list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * The attraction identity of {@code editedAttraction} must not be the same as another existing attraction in"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * the attraction list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    void setAttraction(Attraction target, Attraction editedAttraction);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Marks the given attraction {@code target} as visited."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * {@code target} must exist in the attraction list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    void markVisitedAttraction(Attraction target);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns an unmodifiable view of the filtered attraction list"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    ObservableList\u003cAttraction\u003e getFilteredAttractionList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Updates the filter of the filtered attraction list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ItineraryList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces itinerary list data with the data in {@code itineraryList}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void setItineraryList(ReadOnlyItineraryList itineraryList);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the itinerary list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ReadOnlyItineraryList getItineraryList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if a itinerary with the same identity as {@code itinerary} exists in the itinerary list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    boolean hasItinerary(Itinerary itinerary);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Deletes the given itinerary."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary must exist in the itinerary list."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void deleteItinerary(Itinerary target);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds the given itinerary."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code itinerary} must not already exist in the itinerary list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void addItinerary(Itinerary itinerary);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces the given itinerary {@code target} with {@code editedItinerary}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code target} must exist in the itinerary list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary identity of {@code editedItinerary} must not be the same as another existing itinerary in"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * the itinerary list."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void setItinerary(Itinerary target, Itinerary editedItinerary);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns an unmodifiable view of the filtered itinerary list"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ObservableList\u003cItinerary\u003e getFilteredItineraryList();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Updates the filter of the filtered itinerary list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets selected itinerary in ItineraryList."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param itinerary selected itinerary."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    void setCurrentItinerary(Itinerary itinerary);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the current itinerary."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    Itinerary getCurrentItinerary();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ItineraryAttractionList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Returns the itinerary attraction list"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    ReadOnlyItineraryAttractionList getItineraryAttractionList();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Returns an unmodifiable view of the filtered itinerary attraction list"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    ObservableList\u003cItineraryAttraction\u003e getFilteredItineraryAttractionList();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 18,
      "leeyorktat": 13,
      "peter-yeh": 29,
      "-": 68,
      "limkoonkiat": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttractionList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents the in-memory model of the TrackPad data."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final AttractionList attractionList;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ItineraryList itineraryList;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private ItineraryAttractionList itineraryAttractionList;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final FilteredList\u003cAttraction\u003e filteredAttractions;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final FilteredList\u003cItinerary\u003e filteredItineraries;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Initializes a ModelManager with the given attractionList, itineraryList and userPrefs."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ModelManager(ReadOnlyAttractionList attractionList, ReadOnlyItineraryList itineraryList,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireAllNonNull(attractionList, itineraryList, userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        logger.fine(\"Initializing with attractionList: \" + attractionList + \" itineraryList: \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + itineraryList + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attractionList \u003d new AttractionList(attractionList);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryList \u003d new ItineraryList(itineraryList);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        filteredAttractions \u003d new FilteredList\u003c\u003e(this.attractionList.getAttractionList());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        filteredItineraries \u003d new FilteredList\u003c\u003e(this.itineraryList.getItineraryList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this(new AttractionList(), new ItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return userPrefs.getAttractionListFilePath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(attractionListFilePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setAttractionListFilePath(attractionListFilePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return userPrefs.getItineraryListFilePath();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itineraryListFilePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setItineraryListFilePath(itineraryListFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AttractionList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setAttractionList(ReadOnlyAttractionList attractionList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attractionList.resetData(attractionList);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionList;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(attraction);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionList.hasAttraction(attraction);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void deleteAttraction(Attraction target) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.removeAttraction(target);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.addAttraction(attraction);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        updateFilteredAttractionList(PREDICATE_SHOW_ALL_ATTRACTIONS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireAllNonNull(target, editedAttraction);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.setAttraction(target, editedAttraction);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void markVisitedAttraction(Attraction target) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireAllNonNull(target);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Name unchangedName \u003d target.getName();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Phone unchangedPhone \u003d target.getPhone();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Email unchangedEmail \u003d target.getEmail();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Address unchangedAddress \u003d target.getAddress();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Description unchangedDescription \u003d target.getDescription();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Location unchangedLocation \u003d target.getLocation();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        OpeningHours unchangedOpeningHours \u003d target.getOpeningHours();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        PriceRange unchangedPriceRange \u003d target.getPriceRange();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Rating unchangedRating \u003d target.getRating();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Visited updatedVisited \u003d new Visited(\"TRUE\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Set\u003cTag\u003e unchangedTags \u003d target.getTags();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction markVisitedAttraction \u003d new Attraction(unchangedName, unchangedPhone, unchangedEmail,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                unchangedAddress, unchangedDescription, unchangedLocation, unchangedOpeningHours, unchangedPriceRange,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                unchangedRating, updatedVisited, unchangedTags);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        attractionList.setAttraction(target, markVisitedAttraction);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Attraction List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Attraction} backed by the internal list of"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * {@code versionedTrackPad}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return filteredAttractions;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        filteredAttractions.setPredicate(predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ItineraryList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraryList(ReadOnlyItineraryList itineraryList) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryList.resetData(itineraryList);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryList;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itinerary);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryList.hasItinerary(itinerary);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void deleteItinerary(Itinerary target) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryList.removeItinerary(target);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryList.addItinerary(itinerary);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        updateFilteredItineraryList(PREDICATE_SHOW_ALL_ITINERARIES);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireAllNonNull(target, editedItinerary);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryList.setItinerary(target, editedItinerary);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void setCurrentItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (itinerary \u003d\u003d null) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            itineraryList.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            itineraryList.setCurrentItinerary(itinerary);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            itineraryAttractionList \u003d new ItineraryAttractionList(itinerary);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return itineraryList.getCurrentItinerary();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Itinerary List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Itinerary} backed by the internal list of"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code versionedTrackPad}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return filteredItineraries;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        filteredItineraries.setPredicate(predicate);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionList.equals(other.attractionList)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 itineraryList.equals(other.itineraryList)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 filteredAttractions.equals(other.filteredAttractions)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 filteredItineraries.equals(other.filteredItineraries);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ItineraryAttractionList \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ReadOnlyItineraryAttractionList getItineraryAttractionList() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return itineraryAttractionList;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code ItineraryAttraction} backed by the internal list of"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * {@code versionedTrackPad}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ObservableList\u003cItineraryAttraction\u003e getFilteredItineraryAttractionList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        itineraryAttractionList.setItineraryAttractionList(itineraryList.getCurrentItinerary());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return itineraryAttractionList.getItineraryAttractionList();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 54,
      "leeyorktat": 16,
      "peter-yeh": 10,
      "-": 114,
      "limkoonkiat": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAttractionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Unmodifiable view of an attraction list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public interface ReadOnlyAttractionList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an unmodifiable view of the attraction list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * This list will not contain any duplicate attractions."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    ObservableList\u003cAttraction\u003e getAttractionList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 14,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyItineraryAttractionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Unmodifiable view of an itinerary attraction list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public interface ReadOnlyItineraryAttractionList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Returns an unmodifiable view of the itinerary attraction list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    ObservableList\u003cItineraryAttraction\u003e getItineraryAttractionList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Robinho98": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyItineraryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Unmodifiable view of a itinerary list"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public interface ReadOnlyItineraryList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an unmodifiable view of the itinerary list."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * This list will not contain any duplicate itineraries."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    ObservableList\u003cItinerary\u003e getItineraryList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    Itinerary getCurrentItinerary();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 1,
      "limkoonkiat": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getAttractionListFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getItineraryListFilePath();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Path attractionListFilePath \u003d Paths.get(\"data\" , \"attractionlist.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Path itineraryListFilePath \u003d Paths.get(\"data\" , \"itinerarylist.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        setAttractionListFilePath(newUserPrefs.getAttractionListFilePath());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        setItineraryListFilePath(newUserPrefs.getItineraryListFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionListFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(attractionListFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attractionListFilePath \u003d attractionListFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryListFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itineraryListFilePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryListFilePath \u003d itineraryListFilePath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 attractionListFilePath.equals(o.attractionListFilePath)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 itineraryListFilePath.equals(o.itineraryListFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return Objects.hash(guiSettings, attractionListFilePath, itineraryListFilePath);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(\"\\nLocal attraction data file location : \" + attractionListFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(\"\\nLocal itinerary data file location : \" + itineraryListFilePath);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 77,
      "limkoonkiat": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Address.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Attraction\u0027s address in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Addresses can take any values.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Any String is fine, including empty ones."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs an {@code Address} with an empty address value."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public Address() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if a given string is a valid address."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 2,
      "leeyorktat": 1,
      "peter-yeh": 9,
      "-": 50,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Attraction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Attraction in TrackPad."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class Attraction {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final Location location;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final OpeningHours openingHours;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final PriceRange priceRange;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final Rating rating;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final Visited visited;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Attraction(Name name, Phone phone, Email email, Address address, Description description,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                      Location location, OpeningHours openingHours, PriceRange priceRange,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                      Rating rating, Visited visited, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireAllNonNull(name, phone, email, address, description, location, openingHours,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                priceRange, rating, visited, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.openingHours \u003d openingHours;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.priceRange \u003d priceRange;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.visited \u003d visited;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Location getLocation() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return location;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public OpeningHours getOpeningHours() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return openingHours;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public PriceRange getPriceRange() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return priceRange;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Rating getRating() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return rating;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public Visited getVisited() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return visited;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Returns true if both attractions of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * This defines a weaker notion of equality between two attractions."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean isSameAttraction(Attraction otherAttraction) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (otherAttraction \u003d\u003d this) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return otherAttraction !\u003d null"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 otherAttraction.getName().equals(getName())"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 (otherAttraction.getLocation().equals(getLocation()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Returns true if both attractions have the same identity and data fields."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * This defines a stronger notion of equality between two attractions."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!(other instanceof Attraction)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Attraction otherAttraction \u003d (Attraction) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return otherAttraction.getName().equals(getName())"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 otherAttraction.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 otherAttraction.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 otherAttraction.getAddress().equals(getAddress())"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 otherAttraction.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherAttraction.getLocation().equals(getLocation())"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 otherAttraction.getOpeningHours().equals(getOpeningHours())"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 otherAttraction.getPriceRange().equals(getPriceRange())"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 otherAttraction.getRating().equals(getRating())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                \u0026\u0026 otherAttraction.getVisited().equals(getVisited())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u0026\u0026 otherAttraction.getTags().equals(getTags());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return Objects.hash(name, phone, email, address, description, location,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                openingHours, priceRange, rating, visited, tags);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        builder.append(getName()).append(\" Location: \").append(getLocation());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!getPhone().value.isEmpty()) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            builder.append(\" Phone: \").append(getPhone());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!getEmail().value.isEmpty()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            builder.append(\" Email: \").append(getEmail());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!getAddress().value.isEmpty()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            builder.append(\" Address: \").append(getAddress());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!getDescription().value.isEmpty()) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            builder.append(\" Description: \").append(getDescription());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!getOpeningHours().value.isEmpty()) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            builder.append(\" OpeningHours: \").append(getOpeningHours());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!getPriceRange().value.isEmpty()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            builder.append(\" PriceRange: \").append(getPriceRange());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!getRating().value.isEmpty()) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            builder.append(\" Rating: \").append(getRating());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!getVisited().value.isEmpty()) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            builder.append(\" Visited: \").append(getVisited());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!getTags().isEmpty()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            builder.append(\" Tags: \");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 60,
      "Robinho98": 10,
      "leeyorktat": 16,
      "-": 89,
      "limkoonkiat": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/AttractionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Tests that an {@code Attraction}\u0027s {@code Name}, {@code Address}, {@code Description},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * {@code Email}, {@code Location}, {@code OpeningHours}, {@code Phone}, {@code PriceRange}, {@code Rating}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AttractionContainsKeywordsPredicate implements Predicate\u003cAttraction\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean test(Attraction attraction) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(attraction.getName().fullName, keyword)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getAddress().value, keyword)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getDescription().value, keyword)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getEmail().value, keyword)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getLocation().value, keyword)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getOpeningHours().value, keyword)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getPhone().value, keyword)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getPriceRange().value, keyword)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(attraction.getRating().value, keyword)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        || attraction.getTags().stream().anyMatch(tag -\u003e tag.tagName.equals(keyword))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof AttractionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 keywords.equals(((AttractionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 2,
      "peter-yeh": 13,
      "-": 23,
      "limkoonkiat": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Email.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Attraction\u0027s email in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Emails should be of the format local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"and adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"The domain name must:\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$|^$\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param email A valid email."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Constructs an {@code Email} without value."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public Email() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid email."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "leeyorktat": 1,
      "peter-yeh": 7,
      "-": 63,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Location.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Attraction\u0027s location in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Location {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Locations can take any values, and it should not be blank.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The first character of the location must not be a whitespace,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Location}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param location A valid location."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Location(String location) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(isValidLocation(location), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        value \u003d location;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if a given string is a valid location."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static boolean isValidLocation(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof Location // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 value.equals(((Location) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 1,
      "limkoonkiat": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/OpeningHours.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Attraction\u0027s Opening hours in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidOpeningHours(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class OpeningHours {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Opening Hours should be of the format \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"opening time (in 24 hour format) - closing time (in 24 hour format).\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            \"([01][0-9]|2[0-3])[0-5][0-9]-([01][0-9]|2[0-3])[0-5][0-9]|^$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Constructs an {@code OpeningHours}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param openingHours A valid opening hour."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public OpeningHours(String openingHours) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(openingHours);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        checkArgument(isValidOpeningHours(openingHours), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d openingHours;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Constructs an {@code OpeningHours} without value."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public OpeningHours() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns if a given string is a valid opening hour."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static boolean isValidOpeningHours(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                || (other instanceof OpeningHours // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 value.equals(((OpeningHours) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 57,
      "peter-yeh": 1,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Phone.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Attraction\u0027s phone number in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            \"Phone numbers should only contain numbers, and it should be at least 3 digits long.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\d{3,}|^$\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Constructs a {@code Phone} without value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public Phone() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid phone number."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "leeyorktat": 1,
      "peter-yeh": 8,
      "-": 49,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/PriceRange.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Attraction\u0027s price range in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPriceRange(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class PriceRange {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Price Range should be either \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"LOW, MEDIUM, or HIGH.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)\\\\bLOW\\\\b|\\\\bMEDIUM\\\\b|\\\\bHIGH\\\\b|^$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code PriceRange}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @param priceRange A valid price range."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public PriceRange(String priceRange) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(priceRange);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        checkArgument(isValidPriceRange(priceRange), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        value \u003d priceRange.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code PriceRange} without value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public PriceRange() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns if a given string is a valid price range."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static boolean isValidPriceRange(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (value.equalsIgnoreCase(\"LOW\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return \"$\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } else if (value.equalsIgnoreCase(\"MEDIUM\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return \"$$\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } else if (value.equalsIgnoreCase(\"HIGH\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return \"$$$\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                || (other instanceof PriceRange // instanceof handles nulls"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 value.equals(((PriceRange) other).value)); // state check"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 56,
      "Robinho98": 6,
      "peter-yeh": 3,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Rating.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Attraction\u0027s rating in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidRating(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class Rating {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Rating should only contain a number \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"between 0.0 to 5.0(inclusive), to 1 decimal place.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^([0-4]\\\\.[0-9]|5\\\\.0)$|^$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Rating}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @param rating A valid rating."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Rating(String rating) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(rating);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        checkArgument(isValidRating(rating), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d rating;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Rating} without value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Rating() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns if a given string is a valid rating."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static boolean isValidRating(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (value.isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            return value + \"/5.0\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                || (other instanceof Rating // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 value.equals(((Rating) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 60,
      "peter-yeh": 1,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/UniqueAttractionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.exceptions.AttractionNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.exceptions.DuplicateAttractionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * A list of attractions that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * An attraction is considered unique by comparing using {@code Attraction#isSameAttraction(Attraction)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * adding and updating of attractions uses Attraction#isSameAttraction(Attraction) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * the attraction being added or updated is unique in terms of identity in the UniqueAttractionList. However, the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * removal of an attraction uses Attraction#equals(Object) so as to ensure that the attraction with exactly the same"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * @see Attraction#isSameAttraction(Attraction)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class UniqueAttractionList implements Iterable\u003cAttraction\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final ObservableList\u003cAttraction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final ObservableList\u003cAttraction\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if the list contains an equivalent attraction as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean contains(Attraction toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameAttraction);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Adds a attraction to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * The attraction must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void add(Attraction toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new DuplicateAttractionException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Replaces the attraction {@code target} in the list with {@code editedAttraction}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * The attraction identity of {@code editedAttraction} must not be the same as another existing attraction in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireAllNonNull(target, editedAttraction);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new AttractionNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!target.isSameAttraction(editedAttraction) \u0026\u0026 contains(editedAttraction)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new DuplicateAttractionException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        internalList.set(index, editedAttraction);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Removes the equivalent attraction from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * The attraction must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void remove(Attraction toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new AttractionNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions(UniqueAttractionList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Replaces the contents of this list with {@code attractions}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * {@code attractions} must not contain duplicate attractions."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions(List\u003cAttraction\u003e attractions) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        requireAllNonNull(attractions);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        if (!attractionsAreUnique(attractions)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            throw new DuplicateAttractionException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        internalList.setAll(attractions);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public ObservableList\u003cAttraction\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public Iterator\u003cAttraction\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                || (other instanceof UniqueAttractionList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueAttractionList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Returns true if {@code attractions} contains only unique attractions."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private boolean attractionsAreUnique(List\u003cAttraction\u003e attractions) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        for (int i \u003d 0; i \u003c attractions.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            for (int j \u003d i + 1; j \u003c attractions.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                if (attractions.get(i).isSameAttraction(attractions.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 136,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/Visited.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Attraction\u0027s visited status in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidVisited(String)} (String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class Visited {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Visited should be either \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \"TRUE or FALSE.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?i)\\\\bTRUE\\\\b|\\\\bFALSE\\\\b|^$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Visited}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param visited A valid visited status."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public Visited(String visited) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(visited);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        checkArgument(isValidVisited(visited), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        value \u003d visited.toUpperCase();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Visited} without value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public Visited() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns if a given string is a valid visited status."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static boolean isValidVisited(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (value.equalsIgnoreCase(\"TRUE\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return \"Visited\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                || (other instanceof Visited // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                \u0026\u0026 value.equals(((Visited) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 58,
      "peter-yeh": 1,
      "limkoonkiat": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/exceptions/AttractionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Signals that the operation is unable to find the specified attraction."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class AttractionNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 5,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/attraction/exceptions/DuplicateAttractionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Signals that the operation will result in duplicate Attractions (Attractions are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class DuplicateAttractionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public DuplicateAttractionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        super(\"Operation would result in duplicate attractions.\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 3,
      "peter-yeh": 1,
      "-": 5,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an item\u0027s description in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Descriptions can take any values.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Any String is fine, including empty ones."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \".*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d description;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Description} with an empty description value."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Description() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 value.equals(((Description) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 60,
      "peter-yeh": 1,
      "limkoonkiat": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/commons/Name.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an item\u0027s name in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            \"Names should only contain alphanumeric characters and spaces, and it should not be blank.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 1,
      "limkoonkiat": 3,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Budget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Itinerary\u0027s budget in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            \"Budget should only be a non-negative number, and if it contains decimal values it should only be\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    + \" up to two decimal places.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^?[0-9]+(\\\\.[0-9]{1,2})?$|^$\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Budget}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param budget A valid budget value."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Budget(String budget) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(isValidBudget(budget), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        value \u003d String.format(\"%.2f\", Double.parseDouble(budget));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Budget} without value."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Budget() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns if a given string is a valid budget."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static boolean isValidBudget(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (value.equals(\"\")) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return \"$\" + value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof Budget// instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 value.equals(((Budget) other).value)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "peter-yeh": 1,
      "limkoonkiat": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Day.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.exceptions.DuplicateItineraryAttractionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.exceptions.ItineraryAttractionNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Itinerary\u0027s day in TrackPad."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Day {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Day should be a positive number, not be blank, and\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \" should exist within the date range of the itinerary.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public final Integer value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cItineraryAttraction\u003e itineraryAttractions;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs an empty {@code Day} of day {@code dayNumber}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param dayNumber A valid day number."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Day(Integer dayNumber) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(dayNumber);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(isValidDayNumber(dayNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        value \u003d dayNumber;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryAttractions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code Day} of day {@code dayNumber} with the specified itinerary attractions."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param dayNumber            A valid day number."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param itineraryAttractions Itinerary attractions to include in the Day."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Day(Integer dayNumber, List\u003cItineraryAttraction\u003e itineraryAttractions) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(dayNumber);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(isValidDayNumber(dayNumber), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        value \u003d dayNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryAttractions \u003d itineraryAttractions;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a list of all the itinerary attractions."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public List\u003cItineraryAttraction\u003e getItineraryAttractions() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryAttractions;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds an itinerary attraction and sorts them based on their start times."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void addItineraryAttraction(ItineraryAttraction toAdd) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(!hasTimingClash(toAdd), \"The timing clashes with another attraction in the itinerary\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryAttractions.add(toAdd);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryAttractions.sort(new Comparator\u003cItineraryAttraction\u003e() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            public int compare(ItineraryAttraction first, ItineraryAttraction second) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                if (first.getStartTime().isEarlierThan(second.getStartTime())) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    return -1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                } else if (first.getStartTime().isLaterThan(second.getStartTime())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    return 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    return 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Deletes the itinerary attraction specified by the index."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void deleteItineraryAttraction(Index index) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryAttractions.remove(index.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Edits the specified itinerary attraction."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void editItineraryAttraction(ItineraryAttraction target, ItineraryAttraction editedItineraryAttraction) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        int index \u003d itineraryAttractions.indexOf(target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ItineraryAttractionNotFoundException();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!target.isSameItineraryAttraction(editedItineraryAttraction) \u0026\u0026 contains(editedItineraryAttraction)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DuplicateItineraryAttractionException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryAttractions.set(index, editedItineraryAttraction);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if the itinerary attraction is found in the Day."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean contains(ItineraryAttraction itineraryAttraction) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryAttractions.contains(itineraryAttraction);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if the itinerary attraction has a timing that clashes with another itinerary attraction already"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * in the Day."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean hasTimingClash(ItineraryAttraction toCheck) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (ItineraryAttraction itineraryAttraction : itineraryAttractions) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (toCheck.isTimingClash(itineraryAttraction)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns true if the itinerary attraction has a timing that clashes with another itinerary attraction already"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * in the Day."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Overloaded method only for EditItineraryAttractionCommand."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Does not run toCheck with the itineraryAttraction it is replacing."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean hasTimingClash(ItineraryAttraction toCheck, ItineraryAttraction toReplace) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        for (ItineraryAttraction itineraryAttraction : itineraryAttractions) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toReplace.equals(itineraryAttraction)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (toCheck.isTimingClash(itineraryAttraction)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if a given int is a valid day number."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static boolean isValidDayNumber(Integer test) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return test \u003e 0;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return String.format(\"Day %d\", value);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof Day // instanceof handles nulls"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 value.equals(((Day) other).value)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 itineraryAttractions.equals(((Day) other).itineraryAttractions)); // state check"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return Objects.hash(value, itineraryAttractions);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 19,
      "limkoonkiat": 144
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/Itinerary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents an Itinerary in TrackPad."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class Itinerary {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ItineraryDate startDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ItineraryDate endDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cDay\u003e days \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Itinerary(Name name, Description description, ItineraryDate startDate, ItineraryDate endDate,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                     Budget budget, List\u003cDay\u003e days) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireAllNonNull(name, description, startDate, endDate, budget, days);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(startDate.isBefore(endDate) || startDate.isEqual(endDate),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \"Start date should come before end date.\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 0; i \u003c getNumberOfDays(); i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (i \u003c days.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                this.days.add(new Day(i + 1, days.get(i).getItineraryAttractions()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                this.days.add(new Day(i + 1));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryDate getStartDate() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return startDate;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryDate getEndDate() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return endDate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public List\u003cDay\u003e getDays() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return Collections.unmodifiableList(days);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public Day getDay(Index day) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this.days.get(day.getZeroBased());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int getNumberOfDays() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assert startDate.isBefore(endDate) || startDate.isEqual(endDate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return ItineraryDate.daysBetween(startDate, endDate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns a string of all the locations of the itinerary attractions ordered by day and time."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String getLocations() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cLocation\u003e locations \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (Day day : days) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            for (ItineraryAttraction itineraryAttraction : day.getItineraryAttractions()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Location location \u003d itineraryAttraction.getAttraction().getLocation();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                if (!locations.contains(location)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    locations.add(location);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return locations.stream().map(Object::toString).collect(Collectors.joining(\" -\u003e \"));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public List\u003cItineraryAttraction\u003e getItineraryAttractions() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cItineraryAttraction\u003e itineraryAttractions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (Day day : days) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            itineraryAttractions.addAll(day.getItineraryAttractions());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryAttractions;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds an itinerary attraction to the specified day in the itinerary."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void addItineraryAttraction(ItineraryAttraction toAdd, Index day) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(day.getOneBased() \u003e 0 \u0026\u0026 day.getOneBased() \u003c\u003d getNumberOfDays(),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \"Day is not valid\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        getDay(day).addItineraryAttraction(toAdd);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Removes the itinerary attraction specified by the index and day from the itinerary."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary attraction must exist in the list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void deleteItineraryAttraction(Index index, Index day) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(day.getOneBased() \u003e 0 \u0026\u0026 (day.getOneBased() \u003c\u003d getNumberOfDays()),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \"Day is not valid\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        getDay(day).deleteItineraryAttraction(index);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Edits the corresponding itinerary attraction in the itinerary."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void editItineraryAttraction(ItineraryAttraction target, ItineraryAttraction editedItineraryAttraction,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                        Index day) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(editedItineraryAttraction);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        getDay(day).editItineraryAttraction(target, editedItineraryAttraction);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if an itinerary attraction in the itinerary list with the same identity as"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code itineraryAttraction} exists."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean contains(ItineraryAttraction itineraryAttraction) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itineraryAttraction);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (Day day : days) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (day.contains(itineraryAttraction)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if both itineraries of the same name have the same start and end dates."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * This defines a weaker notion of equality between two itineraries."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isSameItinerary(Itinerary otherItinerary) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (otherItinerary \u003d\u003d this) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return otherItinerary !\u003d null"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getName().equals(getName())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getEndDate().equals(getEndDate());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if both itineraries have the same identity and data fields."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * This defines a stronger notion of equality between two itineraries."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!(other instanceof Itinerary)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary otherItinerary \u003d (Itinerary) other;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return otherItinerary.getName().equals(getName())"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getStartDate().equals(getStartDate())"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getEndDate().equals(getEndDate())"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getBudget().equals(getBudget())"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getDays().equals(getDays())"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 otherItinerary.getItineraryAttractions().equals(getItineraryAttractions());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return Objects.hash(name, description, startDate, endDate, budget, days);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(\" Start date: \")"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(getStartDate())"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(\" End date: \")"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(getEndDate());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!getDescription().value.isEmpty()) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            builder.append(\" Description: \").append(getDescription());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!getBudget().value.isEmpty()) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            builder.append(\" Budget: \").append(getBudget());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 6,
      "limkoonkiat": 209
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryAttraction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Child class of an attraction which additionally stores start time and end time"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Is-a attraction specific to a particular Itinerary."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class ItineraryAttraction extends Attraction {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final ItineraryTime startTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final ItineraryTime endTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Constructs a Itinerary attraction."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param a         attraction to visit."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param startTime time to visit the attraction."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param endTime   time to leave the attraction."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttraction(Attraction a, ItineraryTime startTime, ItineraryTime endTime) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        super(a.getName(),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                a.getPhone(),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                a.getEmail(),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                a.getAddress(),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                a.getDescription(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                a.getLocation(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                a.getOpeningHours(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                a.getPriceRange(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                a.getRating(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                a.getVisited(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                a.getTags());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns name of the attraction in this itinerary attraction."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return super.getName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the attraction in this itinerary attraction."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Attraction getAttraction() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the start time of this itinerary attraction."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryTime getStartTime() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the end time of this itinerary attraction."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryTime getEndTime() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Method for ItineraryAttractionIndexCounter"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @return null"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ItineraryAttraction getItineraryAttraction() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Method for ItineraryAttractionIndexCounter"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @return 0"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return 0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns true if both ItineraryAttraction has the same start and end time."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @param otherItineraryAttraction the ItineraryAttraction to compare with."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean isSameTiming(ItineraryAttraction otherItineraryAttraction) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this.startTime.equals(otherItineraryAttraction.startTime)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 this.endTime.equals(otherItineraryAttraction.endTime);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // todo remove this as this weaker equal method is not useful."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns true if both itinerary attractions are of the same name, have the same visiting timing."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * This defines a weaker notion of equality between two itinerary attractions."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @return otherItineraryAttraction the itineraryAttraction to compare with."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isSameItineraryAttraction(ItineraryAttraction otherItineraryAttraction) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (otherItineraryAttraction \u003d\u003d this) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return isSameAttraction(otherItineraryAttraction.getAttraction())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 isSameTiming(otherItineraryAttraction);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns false if timing does not clash with this itinerary attraction."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean isTimingClash(ItineraryAttraction itineraryAttraction) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return (this.getStartTime().isEarlierThan(itineraryAttraction.getEndTime()))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 (itineraryAttraction.getStartTime().isEarlierThan(this.getEndTime()));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if both itinerary attractions have the same identity and data fields."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * This defines a stronger notion of equality between two itinerary attractions."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Attraction, startTime, endTime, dayVisiting must be the same to return true."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!(other instanceof ItineraryAttraction)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryAttraction otherItineraryAttraction \u003d (ItineraryAttraction) other;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // calls equals of Attraction and checks the timing."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return super.equals(otherItineraryAttraction)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \u0026\u0026 isSameTiming(otherItineraryAttraction);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return Objects.hash(this, startTime, endTime);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        builder.append(super.toString())"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(\" Start time: \")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .append(startTime)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .append(\" End time: \")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .append(endTime);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 16,
      "peter-yeh": 85,
      "limkoonkiat": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryAttractionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Tests that a {@code ItineraryAttraction}\u0027s {@code Name}, {@code Address}, {@code Description},"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * {@code Email}, {@code Location}, {@code OpeningHours}, {@code Phone}, {@code PriceRange}, {@code Rating},"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * {@code StartTime}, {@code EndTime}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * matches any of the keywords given."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryAttractionContainsKeywordsPredicate implements Predicate\u003cItineraryAttraction\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryAttractionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean test(ItineraryAttraction itiAttraction) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(itiAttraction.getStartTime().toString(), keyword)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(itiAttraction.getEndTime().toString(), keyword)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        || new AttractionContainsKeywordsPredicate(keywords).test(itiAttraction.getAttraction())"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                );"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof ItineraryAttractionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 keywords.equals(((ItineraryAttractionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryAttractionDayCounter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Child class of an itinerary attraction."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Designed to hold the day number in ItineraryAttractionList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class ItineraryAttractionDayCounter extends ItineraryAttraction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final int day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Constructs a Itinerary attraction day counter."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param itineraryAttraction Original itinerary attraction."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param day Day of visit."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ItineraryAttractionDayCounter(ItineraryAttraction itineraryAttraction, int day) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        super(itineraryAttraction.getAttraction(), itineraryAttraction.getStartTime(),"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                itineraryAttraction.getEndTime());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public int getDay() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    // todo determine if this method should stay"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Returns true if both itinerary attractions have the same identity and data fields."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * This defines a stronger notion of equality between two itinerary attractions."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Attraction, startTime, endTime, dayVisiting must be the same to return true."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!(other instanceof ItineraryAttractionDayCounter)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        ItineraryAttractionDayCounter otherItineraryAttraction \u003d (ItineraryAttractionDayCounter) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // calls equals of Attraction and checks the timing."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return super.equals(otherItineraryAttraction)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                \u0026\u0026 isSameTiming(otherItineraryAttraction);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return Objects.hash(this, day);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return \"Day \" + day;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryAttractionIndexCounter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* Child class of an itinerary attraction."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "* Designed to hold the index number in ItineraryAttractionList."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class ItineraryAttractionIndexCounter extends ItineraryAttraction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final ItineraryAttraction itineraryAttraction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final int index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Constructs a Itinerary attraction index counter."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param itineraryAttraction Original itinerary attraction."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @param index Index of itinerary attraction, relative to the list of attractions in that day."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ItineraryAttractionIndexCounter(ItineraryAttraction itineraryAttraction, int index) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        super(itineraryAttraction.getAttraction(), itineraryAttraction.getStartTime(),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                itineraryAttraction.getEndTime());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.itineraryAttraction \u003d itineraryAttraction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ItineraryAttraction getItineraryAttraction() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return itineraryAttraction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public int getIndex() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    // todo determine if this method should stay"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Returns true if both itinerary attractions have the same identity and data fields."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * This defines a stronger notion of equality between two itinerary attractions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Attraction, startTime, endTime, dayVisiting must be the same to return true."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!(other instanceof ItineraryAttractionIndexCounter)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        ItineraryAttractionIndexCounter otherItineraryAttraction \u003d (ItineraryAttractionIndexCounter) other;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // calls equals of Attraction and checks the timing."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return super.equals(otherItineraryAttraction)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                \u0026\u0026 isSameTiming(otherItineraryAttraction);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return Objects.hash(this, index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return Integer.toString(index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryAttractionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryAttractionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class ItineraryAttractionList implements ReadOnlyItineraryAttractionList {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private ObservableList\u003cItineraryAttraction\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private int indexCounter \u003d 1;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private ItineraryAttraction testingItineraryAttraction \u003d new ItineraryAttraction("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            new Attraction(new Name(\"test\"), new Phone(), new Email(), new Address(), new Description(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Location(\"Test\"), new OpeningHours(), new PriceRange(), new Rating(), new Visited(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new HashSet\u003c\u003e()), new ItineraryTime(\"0000\"), new ItineraryTime(\"0100\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ItineraryAttractionList(Itinerary currentItinerary) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        setItineraryAttractionList(currentItinerary);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void setItineraryAttractionList(Itinerary currentItinerary) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        requireNonNull(currentItinerary);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        for (Day day : currentItinerary.getDays()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            internalList.add(new ItineraryAttractionDayCounter(testingItineraryAttraction,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    day.value));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            indexCounter \u003d 1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            for (ItineraryAttraction itineraryAttraction : day.getItineraryAttractions()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                internalList.add(new ItineraryAttractionIndexCounter(itineraryAttraction, indexCounter));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                indexCounter++;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ObservableList\u003cItineraryAttraction\u003e getItineraryAttractionList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 53,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Tests that a {@code Itinerary}\u0027s {@code Name}, {@code Description},"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * {@code StartTime}, {@code EndTime}, {@code Budget} and all its itinerary attractions"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryContainsKeywordsPredicate implements Predicate\u003cItinerary\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean test(Itinerary itinerary) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(itinerary.getName().fullName, keyword)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(itinerary.getDescription().value, keyword)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(itinerary.getStartDate().toString(), keyword)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        || StringUtil.containsWordIgnoreCase(itinerary.getEndDate().toString(), keyword)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        || itinerary.getBudget().value.contains(keyword) // numerical budget value"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        || itinerary.getBudget().toString().contains(keyword) // budget value with $"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                )"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            // Also checks through each itinerary attraction"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            ItineraryAttractionContainsKeywordsPredicate iaPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    new ItineraryAttractionContainsKeywordsPredicate(keywords);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            for (ItineraryAttraction ia : itinerary.getItineraryAttractions()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                if (iaPredicate.test(ia)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof ItineraryContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 keywords.equals(((ItineraryContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryDate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.DateTimeFormatterBuilder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.format.ResolverStyle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.temporal.ChronoUnit;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryDate {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Date should be of the format dd-mm-yyyy,\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            + \" and must be a valid date.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final DateTimeFormatter DTF \u003d new DateTimeFormatterBuilder()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .appendPattern(\"dd-MM-uuuu\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .toFormatter()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withResolverStyle(ResolverStyle.STRICT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code ItineraryDate}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryDate(String date) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        value \u003d date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the itinerary date in {@code LocalDate} format."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public LocalDate getLocalDate() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return LocalDate.parse(value, DTF);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns if a given string is a valid itinerary date."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            LocalDate.parse(test, DTF);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns if this itinerary date is before the given itinerary date."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isBefore(ItineraryDate otherDate) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return getLocalDate().isBefore(otherDate.getLocalDate());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns if this itinerary date is the same as the given itinerary date."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isEqual(ItineraryDate otherDate) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return getLocalDate().isEqual(otherDate.getLocalDate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns if this itinerary date is after the given itinerary date."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean isAfter(ItineraryDate otherDate) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return getLocalDate().isAfter(otherDate.getLocalDate());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the number of days between two itinerary dates."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static int daysBetween(ItineraryDate startDate, ItineraryDate endDate) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return (int) ChronoUnit.DAYS.between(startDate.getLocalDate(), endDate.getLocalDate()) + 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof ItineraryDate// instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 value.equals(((ItineraryDate) other).value)); // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 1,
      "limkoonkiat": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/ItineraryTime.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Wrapper to hold the time and perform time related functions."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class ItineraryTime {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Time should be of the format HHMM and from 0000 to 2359.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"([01][0-9]|2[0-3])[0-5][0-9]\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final int time;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryTime(String time) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.time \u003d Integer.parseInt(time);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns if a given string is an valid time."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static boolean isValidItineraryTime(String test) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns true if the time is earlier than time given."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean isEarlierThan(ItineraryTime time) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this.time \u003c time.time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns ture if the time is later than the time given."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean isLaterThan(ItineraryTime time) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this.time \u003e time.time;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (this \u003d\u003d other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (!(other instanceof ItineraryTime)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime otherTime \u003d (ItineraryTime) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return time \u003d\u003d otherTime.time; // state check"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return String.format(\"%04d\", time);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return time * 103;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 59,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/UniqueItineraryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.exceptions.DuplicateItineraryException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.exceptions.ItineraryNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A list of itineraries that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * An itinerary is considered unique by comparing using {@code Itinerary#isSameItinerary(Itinerary)}. As such,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * adding and updating of itineraries uses Itinerary#isSameItinerary(Itinerary) for equality so as to ensure that"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * the itinerary being added or updated is unique in terms of identity in the UniqueItineraryList. However, the"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * removal of an itinerary uses Itinerary#equals(Object) so as to ensure that the itinerary with exactly the same"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * fields will be removed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * @see Itinerary#isSameItinerary (Itinerary)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class UniqueItineraryList implements Iterable\u003cItinerary\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ObservableList\u003cItinerary\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ObservableList\u003cItinerary\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if the list contains an equivalent itinerary as the given argument."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean contains(Itinerary toCheck) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameItinerary);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds an itinerary to the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary must not already exist in the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void add(Itinerary toAdd) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DuplicateItineraryException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces the itinerary {@code target} in the list with {@code editedItinerary}."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary identity of {@code editedItinerary} must not be the same as another existing itinerary in"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * the list."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireAllNonNull(target, editedItinerary);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ItineraryNotFoundException();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!target.isSameItinerary(editedItinerary) \u0026\u0026 contains(editedItinerary)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DuplicateItineraryException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        internalList.set(index, editedItinerary);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Removes the equivalent itinerary from the list."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * The itinerary must exist in the list."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void remove(Itinerary toRemove) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new ItineraryNotFoundException();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraries(UniqueItineraryList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Replaces the contents of this list with {@code itineraries}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code items} must not contain duplicate itineraries."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraries(List\u003cItinerary\u003e itineraries) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireAllNonNull(itineraries);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!itinerariesAreUnique(itineraries)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DuplicateItineraryException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        internalList.setAll(itineraries);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ObservableList\u003cItinerary\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Iterator\u003cItinerary\u003e iterator() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                || (other instanceof UniqueItineraryList // instanceof handles nulls"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueItineraryList) other).internalList));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns true if {@code itineraries} contains only unique itineraries."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private boolean itinerariesAreUnique(List\u003cItinerary\u003e itineraries) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 0; i \u003c itineraries.size() - 1; i++) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            for (int j \u003d i + 1; j \u003c itineraries.size(); j++) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                if (itineraries.get(i).isSameItinerary(itineraries.get(j))) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 140
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/exceptions/DuplicateItineraryAttractionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Signals that the operation will result in duplicate itinerary attractions in an itinerary (Itinerary"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * attractions are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DuplicateItineraryAttractionException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public DuplicateItineraryAttractionException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        super(\"Operation would result in duplicate attractions in the itinerary\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/exceptions/DuplicateItineraryException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Signals that the operation will result in duplicate Itineraries (Itineraries are considered duplicates if"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DuplicateItineraryException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public DuplicateItineraryException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        super(\"Operation would result in duplicate itineraries\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/exceptions/ItineraryAttractionNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Signals that the operation is unable to find the specified itinerary attraction in the itinerary."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryAttractionNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/itinerary/exceptions/ItineraryNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Signals that the operation is unable to find the specified itinerary."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a Tag in TrackPad."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 1,
      "-": 52,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Contains utility methods for populating {@code AttractionList} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public static Attraction[] getSampleAttractions() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        return new Attraction[] {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            new Attraction(new Name(\"Jurong Bird Park\"), new Phone(\"94351253\"), new Email(\"birdpark@example.com\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Address(\"2 Jurong Hill\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Description(\"The park offers a haven for close to 3500 birds across 400 species.\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new OpeningHours(\"1000-1800\"), new PriceRange(\"MEDIUM\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"4.5\"), new Visited(\"FALSE\"), getTagSet(\"animals\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            new Attraction(new Name(\"Night Safari\"), new Phone(\"98765432\"), new Email(\"nightsafari@example.com\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Address(\"80 Mandai Lake Rd\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Description(\"The world\u0027s first nocturnal zoo.\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new OpeningHours(\"1000-1800\"), new PriceRange(\"MEDIUM\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"4.2\"), new Visited(\"FALSE\"), getTagSet(\"animals\", \"night\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            new Attraction(new Name(\"River Safari\"), new Phone(\"93210283\"), new Email(\"riversafari@example.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Address(\"80 Mandai Lake Rd\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Description(\"A river-themed zoo and aquarium in Singapore.\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new OpeningHours(\"1000-1800\"), new PriceRange(\"MEDIUM\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"4.4\"), new Visited(\"FALSE\"), getTagSet(\"animals\", \"panda\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            new Attraction(new Name(\"Universal Studios Singapore\"), new Phone(\"65482651\"), new Email(\"uss@example.com\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Address(\"8 Sentosa Gateway, 098269\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Description(\"A world-renowned theme park with thrilling rides.\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new OpeningHours(\"1400-2100\"), new PriceRange(\"HIGH\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"4.6\"), new Visited(\"FALSE\"), getTagSet(\"activities\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            new Attraction(new Name(\"Snow City\"), new Phone(\"65602306\"), new Email(\"snowcity@example.com\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Address(\"21 Jurong Town Hall Rd, 609433\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Description(\"A winter wonderland amidst the tropical Singapore climate.\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new OpeningHours(\"1000-1700\"), new PriceRange(\"LOW\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"3.6\"), new Visited(\"FALSE\"), getTagSet(\"activities\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            new Attraction(new Name(\"Trick Eye Museum\"), new Phone(\"67952371\"), new Email(\"trickeye@example.com\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Address(\"26 Sentosa Gateway, 098138\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Description(\"Unique museum with a large array of 3-dimensional \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                            + \"artwork for interactive optical illusions.\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new OpeningHours(\"1000-1800\"), new PriceRange(\"LOW\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"4.2\"), new Visited(\"FALSE\"), getTagSet(\"activities\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            new Attraction(new Name(\"Singapore Zoo\"), new Phone(\"62693411\"), new Email(\"riversafari@example.com\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Address(\"80 Mandai Lake Rd\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Description(\"Singapore Zoo\u0027s world-famous \\\"Open Concept” offers the opportunity to \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                            + \"experience and be inspired by the wonders of nature.\"),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Location(\"Singapore, Singapore\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new OpeningHours(\"0830-1800\"), new PriceRange(\"MEDIUM\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                    new Rating(\"4.6\"), new Visited(\"FALSE\"), getTagSet(\"animals\", \"tiger\"))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static ReadOnlyAttractionList getSampleAttractionsList() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList sampleAl \u003d new AttractionList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        for (Attraction sampleAttraction : getSampleAttractions()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            sampleAl.addAttraction(sampleAttraction);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return sampleAl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Sample itinerary list will be blank"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static ReadOnlyItineraryList getSampleItineraryList() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new ItineraryList();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 18,
      "Robinho98": 27,
      "leeyorktat": 7,
      "-": 27,
      "limkoonkiat": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AttractionListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a storage for {@link AttractionList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public interface AttractionListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the file path of the attraction list data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getAttractionListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns AttractionList data as a {@link ReadOnlyAttractionList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Optional\u003cReadOnlyAttractionList\u003e readAttractionList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @see #getAttractionListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Optional\u003cReadOnlyAttractionList\u003e readAttractionList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Saves the given {@link ReadOnlyAttractionList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param attractionList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void saveAttractionList(ReadOnlyAttractionList attractionList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @see #saveAttractionList(ReadOnlyAttractionList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void saveAttractionList(ReadOnlyAttractionList attractionList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ItineraryListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Represents a storage for {@link ItineraryList}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public interface ItineraryListStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the file path of the itinerary list data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getItineraryListFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns ItineraryList data as a {@link ReadOnlyItineraryList}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Optional\u003cReadOnlyItineraryList\u003e readItineraryList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @see #getItineraryListFilePath()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Optional\u003cReadOnlyItineraryList\u003e readItineraryList(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Saves the given {@link ReadOnlyItineraryList} to the storage."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param itineraryList cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void saveItineraryList(ReadOnlyItineraryList itineraryList) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @see #saveItineraryList(ReadOnlyItineraryList)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void saveItineraryList(ReadOnlyItineraryList itineraryList, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedAttraction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Jackson-friendly version of {@link Attraction}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "class JsonAdaptedAttraction {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Attraction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String location;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final String openingHours;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final String priceRange;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final String rating;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final String visited;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code JsonAdaptedAttraction} with the given attraction details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public JsonAdaptedAttraction(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"phone\") String phone,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"email\") String email,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"address\") String address,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"location\") String location,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"openingHours\") String openingHours,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"priceRange\") String priceRange,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"rating\") String rating,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                                 @JsonProperty(\"visited\") String visited,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                                 @JsonProperty(\"tagged\") List\u003cJsonAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.location \u003d location;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.openingHours \u003d openingHours;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.priceRange \u003d priceRange;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.rating \u003d rating;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.visited \u003d visited;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged.addAll(tagged);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Converts a given {@code Attraction} into this class for Jackson use."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public JsonAdaptedAttraction(Attraction source) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        location \u003d source.getLocation().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        openingHours \u003d source.getOpeningHours().value;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        priceRange \u003d source.getPriceRange().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        rating \u003d source.getRating().value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        visited \u003d source.getVisited().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged.addAll(source.getTags().stream()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts this Jackson-friendly adapted attraction object into the model\u0027s {@code Attraction} object."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted attraction."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Attraction toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Name modelName;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Phone modelPhone;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Email modelEmail;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Address modelAddress;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final Description modelDescription;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Location modelLocation;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final OpeningHours modelOpeningHours;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final PriceRange modelPriceRange;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final Rating modelRating;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        final Visited modelVisited;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final List\u003cTag\u003e attractionTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        for (JsonAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            attractionTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Name is not optional"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Phone is optional"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (phone.equals(\"\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelPhone \u003d new Phone();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Email is optional"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (email.equals(\"\")) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelEmail \u003d new Email();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Address is optional"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        if (address \u003d\u003d null) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (address.equals(\"\")) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelAddress \u003d new Address();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Address.isValidAddress(address)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelAddress \u003d new Address(address);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // Description is optional"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelDescription \u003d new Description();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Location is not optional"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (location \u003d\u003d null) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    Location.class.getSimpleName()));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Location.isValidLocation(location)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelLocation \u003d new Location(location);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // OpeningHours is optional"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (openingHours \u003d\u003d null) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    OpeningHours.class.getSimpleName()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (openingHours.equals(\"\")) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelOpeningHours \u003d new OpeningHours();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (!OpeningHours.isValidOpeningHours(openingHours)) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(OpeningHours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelOpeningHours \u003d new OpeningHours(openingHours);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // PriceRange is optional"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (priceRange \u003d\u003d null) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    PriceRange.class.getSimpleName()));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (priceRange.equals(\"\")) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelPriceRange \u003d new PriceRange();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (!PriceRange.isValidPriceRange(priceRange)) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(PriceRange.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelPriceRange \u003d new PriceRange(priceRange);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // Rating is optional"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (rating \u003d\u003d null) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName()));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (rating.equals(\"\")) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelRating \u003d new Rating();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else if (!Rating.isValidRating(rating)) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            throw new IllegalValueException(Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            modelRating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // Visited is optional"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (visited \u003d\u003d null) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Visited.class.getSimpleName()));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } else if (visited.equals(\"\")) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            modelVisited \u003d new Visited();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } else if (!Visited.isValidVisited(visited)) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new IllegalValueException(Visited.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            modelVisited \u003d new Visited(visited);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(attractionTags);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new Attraction(modelName, modelPhone, modelEmail, modelAddress, modelDescription,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                modelLocation, modelOpeningHours, modelPriceRange, modelRating, modelVisited, modelTags);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 90,
      "Robinho98": 18,
      "leeyorktat": 1,
      "-": 75,
      "limkoonkiat": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedDay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Jackson-friendly version of {@link Day}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonAdaptedDay {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final int day;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cJsonAdaptedItineraryAttraction\u003e itineraryAttractions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code JsonAdaptedDay} with the given day details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAdaptedDay(@JsonProperty(\"day\") int day,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                          @JsonProperty(\"itineraryAttractions\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                  List\u003cJsonAdaptedItineraryAttraction\u003e itineraryAttractions) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (itineraryAttractions !\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            this.itineraryAttractions.addAll(itineraryAttractions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts a given {@code Day} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAdaptedDay(Day source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        day \u003d source.value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryAttractions.addAll(source.getItineraryAttractions().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .map(JsonAdaptedItineraryAttraction::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Day toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final List\u003cItineraryAttraction\u003e modelItineraryAttractions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!Day.isValidDayNumber(day)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (JsonAdaptedItineraryAttraction itineraryAttraction : itineraryAttractions) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelItineraryAttractions.add(itineraryAttraction.toModelType());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Day(day, modelItineraryAttractions);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedItinerary.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Jackson-friendly version of {@link Itinerary}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class JsonAdaptedItinerary {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Itinerary\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String budget;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cJsonAdaptedDay\u003e days \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code JsonAdaptedItinerary} with the given itinerary details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAdaptedItinerary(@JsonProperty(\"name\") String name,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                @JsonProperty(\"description\") String description,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                @JsonProperty(\"startDate\") String startDate,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                @JsonProperty(\"endDate\") String endDate,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                @JsonProperty(\"budget\") String budget,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                @JsonProperty(\"days\") List\u003cJsonAdaptedDay\u003e days) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (days !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            this.days.addAll(days);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts a given {@code Itinerary} into this class for Jackson use."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAdaptedItinerary(Itinerary source) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        description \u003d source.getDescription().value;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        startDate \u003d source.getStartDate().toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        endDate \u003d source.getEndDate().toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        budget \u003d source.getBudget().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        days.addAll(source.getDays().stream()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .map(JsonAdaptedDay::new)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts this Jackson-friendly adapted itinerary object into the model\u0027s {@code Itinerary} object."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted itinerary."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Itinerary toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Name modelName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Description modelDescription;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final ItineraryDate modelStartDate;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final ItineraryDate modelEndDate;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Budget modelBudget;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final List\u003cDay\u003e modelDays \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (JsonAdaptedDay day : days) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelDays.add(day.toModelType());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Name is not optional"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Description is optional"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (description.equals(\"\")) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelDescription \u003d new Description();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Start date is not optional"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (startDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    ItineraryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!ItineraryDate.isValidDate(startDate)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(ItineraryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelStartDate \u003d new ItineraryDate(startDate);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // End date is not optional"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (endDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    ItineraryDate.class.getSimpleName()));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!ItineraryDate.isValidDate(endDate)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(ItineraryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelEndDate \u003d new ItineraryDate(endDate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Budget is optional"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    Budget.class.getSimpleName()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (budget.equals(\"\")) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelBudget \u003d new Budget();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!Budget.isValidBudget(budget)) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(Budget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelBudget \u003d new Budget(budget);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Itinerary(modelName, modelDescription, modelStartDate, modelEndDate, modelBudget, modelDays);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAdaptedItineraryAttraction.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Jackson-friendly version of {@link ItineraryAttraction}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class JsonAdaptedItineraryAttraction {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Itinerary attraction\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final JsonAdaptedAttraction attraction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code JsonAdaptedItineraryAttraction} with the given itinerary attraction details."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAdaptedItineraryAttraction(@JsonProperty(\"attraction\") JsonAdaptedAttraction attraction,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                          @JsonProperty(\"startTime\") String startTime,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                                          @JsonProperty(\"endTime\") String endTime) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attraction \u003d attraction;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts a given {@code ItineraryAttraction} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAdaptedItineraryAttraction(ItineraryAttraction source) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attraction \u003d new JsonAdaptedAttraction(source.getAttraction());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        startTime \u003d source.getStartTime().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        endTime \u003d source.getEndTime().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts this Jackson-friendly adapted itinerary attraction object into the model\u0027s {@code ItineraryAttraction}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted itinerary attraction."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryAttraction toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final Attraction modelAttraction;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final ItineraryTime modelStartTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final ItineraryTime modelEndTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Start time is not optional"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (startTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    ItineraryTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!ItineraryTime.isValidItineraryTime(startTime)) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelStartTime \u003d new ItineraryTime(startTime);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // End time is not optional"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (endTime \u003d\u003d null) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    ItineraryTime.class.getSimpleName()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else if (!ItineraryTime.isValidItineraryTime(endTime)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelEndTime \u003d new ItineraryTime(endTime);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Attraction is not optional"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (attraction \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    Attraction.class.getSimpleName()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            modelAttraction \u003d attraction.toModelType();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new ItineraryAttraction(modelAttraction, modelStartTime, modelEndTime);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonAttractionListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A class to access AttractionList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonAttractionListStorage implements AttractionListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAttractionListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonAttractionListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyAttractionList\u003e readAttractionList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return readAttractionList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Similar to {@link #readAttractionList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyAttractionList\u003e readAttractionList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Optional\u003cJsonSerializableAttractionList\u003e jsonAttractionList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                filePath, JsonSerializableAttractionList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!jsonAttractionList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return Optional.of(jsonAttractionList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveAttractionList(ReadOnlyAttractionList attractionList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        saveAttractionList(attractionList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Similar to {@link #saveAttractionList(ReadOnlyAttractionList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveAttractionList(ReadOnlyAttractionList attractionList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(attractionList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAttractionList(attractionList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonItineraryListStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A class to access ItineraryList data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonItineraryListStorage implements ItineraryListStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonItineraryListStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonItineraryListStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyItineraryList\u003e readItineraryList() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return readItineraryList(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Similar to {@link #readItineraryList()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyItineraryList\u003e readItineraryList(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Optional\u003cJsonSerializableItineraryList\u003e jsonItineraryList \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                filePath, JsonSerializableItineraryList.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        if (!jsonItineraryList.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return Optional.of(jsonItineraryList.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveItineraryList(ReadOnlyItineraryList itineraryList) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        saveItineraryList(itineraryList, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Similar to {@link #saveItineraryList(ReadOnlyItineraryList)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveItineraryList(ReadOnlyItineraryList itineraryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(itineraryList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableItineraryList(itineraryList), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableAttractionList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * An Immutable AttractionList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "@JsonRootName(value \u003d \"attractionlist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class JsonSerializableAttractionList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ATTRACTION \u003d \"Attraction list contains duplicate attraction(s).\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final List\u003cJsonAdaptedAttraction\u003e attractions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code JsonSerializableAttractionList} with the given attractions."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonSerializableAttractionList(@JsonProperty(\"attractions\") List\u003cJsonAdaptedAttraction\u003e attractions) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.attractions.addAll(attractions);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts a given {@code ReadOnlyAttractionList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAttractionList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonSerializableAttractionList(ReadOnlyAttractionList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        attractions.addAll(source.getAttractionList().stream().map(JsonAdaptedAttraction::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts this attraction list into the model\u0027s {@code AttractionList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList attractionList \u003d new AttractionList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        for (JsonAdaptedAttraction jsonAdaptedAttraction : attractions) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            Attraction attraction \u003d jsonAdaptedAttraction.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (attractionList.hasAttraction(attraction)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            attractionList.addAttraction(attraction);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 42,
      "leeyorktat": 2,
      "limkoonkiat": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/JsonSerializableItineraryList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * An Immutable ItineraryList that is serializable to JSON format."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "@JsonRootName(value \u003d \"itinerarylist\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class JsonSerializableItineraryList {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ITINERARY \u003d \"Itinerary list contains duplicate itineraries.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final List\u003cJsonAdaptedItinerary\u003e itineraries \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Constructs a {@code JsonSerializableItineraryList} with the given itineraries."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonSerializableItineraryList(@JsonProperty(\"itineraries\") List\u003cJsonAdaptedItinerary\u003e itineraries) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraries.addAll(itineraries);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts a given {@code ReadOnlyItineraryList} into this class for Jackson use."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableItineraryList}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public JsonSerializableItineraryList(ReadOnlyItineraryList source) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraries.addAll(source.getItineraryList().stream().map(JsonAdaptedItinerary::new)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Converts this itinerary list into the model\u0027s {@code ItineraryList} object."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryList itineraryList \u003d new ItineraryList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (JsonAdaptedItinerary jsonAdaptedItinerary : itineraries) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            Itinerary itinerary \u003d jsonAdaptedItinerary.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (itineraryList.hasItinerary(itinerary)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ITINERARY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            itineraryList.addItinerary(itinerary);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public interface Storage extends AttractionListStorage, ItineraryListStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d User prefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Attraction List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getAttractionListFilePath();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Optional\u003cReadOnlyAttractionList\u003e readAttractionList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void saveAttractionList(ReadOnlyAttractionList attractionList) throws IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Itinerary List \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Path getItineraryListFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    Optional\u003cReadOnlyItineraryList\u003e readItineraryList() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    void saveItineraryList(ReadOnlyItineraryList itineraryList) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "limkoonkiat": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Manages storage of TrackPad data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private AttractionListStorage attractionListStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private ItineraryListStorage itineraryListStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code AttractionListStorage}, {@code ItineraryListStorage} and"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code UserPrefStorage}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public StorageManager(AttractionListStorage attractionListStorage, ItineraryListStorage itineraryListStorage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                          UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attractionListStorage \u003d attractionListStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryListStorage \u003d itineraryListStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AttractionList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionListStorage.getAttractionListFilePath();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyAttractionList\u003e readAttractionList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return readAttractionList(attractionListStorage.getAttractionListFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyAttractionList\u003e readAttractionList(Path filePath)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionListStorage.readAttractionList(filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveAttractionList(ReadOnlyAttractionList attractionList) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        saveAttractionList(attractionList, attractionListStorage.getAttractionListFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveAttractionList(ReadOnlyAttractionList attractionList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionListStorage.saveAttractionList(attractionList, filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ItineraryList methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryListStorage.getItineraryListFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyItineraryList\u003e readItineraryList() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return readItineraryList(itineraryListStorage.getItineraryListFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Optional\u003cReadOnlyItineraryList\u003e readItineraryList(Path filePath)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryListStorage.readItineraryList(filePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveItineraryList(ReadOnlyItineraryList itineraryList) throws IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        saveItineraryList(itineraryList, itineraryListStorage.getItineraryListFilePath());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveItineraryList(ReadOnlyItineraryList itineraryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryListStorage.saveItineraryList(itineraryList, filePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "-": 62,
      "limkoonkiat": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttractionCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * An UI component that displays information of a {@code Attraction}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AttractionCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String FXML \u003d \"AttractionListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public final Attraction attraction;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // For JavaFX, rename location to locale as location is a reserved keyword in JavaFX"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Label locale;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    //optional fields"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Label field1;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Label field2;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Label field3;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Label field4;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Creates a {@code AttractionCode} with the given {@code Attraction} and index to display."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionCard(Attraction attraction, int displayedIndex) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        this.attraction \u003d attraction;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        name.setText(attraction.getName().fullName);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        locale.setText(\"\\uD83C\\uDF0E \" + attraction.getLocation().value);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        locale.setWrapText(true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        //optional fields"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        description.setText(attraction.getDescription().value);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        description.setWrapText(true);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        int fieldsFilled \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!attraction.getAddress().value.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            String address \u003d \"\\uD83C\\uDFE0 \" + attraction.getAddress().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            field1.setText(address);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            field1.setWrapText(true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            fieldsFilled++;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!attraction.getPhone().value.isEmpty()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            String phone \u003d \"📞 \" + attraction.getPhone().value;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            if (fieldsFilled \u003d\u003d 0) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                field1.setText(phone);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                field2.setText(phone);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field2.setWrapText(true);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            fieldsFilled++;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!attraction.getEmail().value.isEmpty()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            String email \u003d \"\\uD83D\\uDCE7 \" + attraction.getEmail().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            if (fieldsFilled \u003d\u003d 0) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                field1.setText(email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            } else if (fieldsFilled \u003d\u003d 1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                field2.setText(email);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                field3.setText(email);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field3.setWrapText(true);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            fieldsFilled++;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!attraction.getOpeningHours().value.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            String openingHours \u003d \"\\uD83C\\uDE3A \" + attraction.getOpeningHours().value;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            if (fieldsFilled \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                field1.setText(openingHours);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            } else if (fieldsFilled \u003d\u003d 1) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                field2.setText(openingHours);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            } else if (fieldsFilled \u003d\u003d 2) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                field3.setText(openingHours);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                field4.setText(openingHours);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field4.setWrapText(true);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (attraction.getPriceRange().toString() !\u003d \"\") {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            Label priceRange \u003d new Label(attraction.getPriceRange().toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            priceRange.setStyle(\"-fx-background-color: #800;\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            tags.getChildren().add(priceRange);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (attraction.getRating().toString() !\u003d \"\") {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            Label rating \u003d new Label(attraction.getRating().toString() + \"\\u2605\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            rating.setStyle(\"-fx-background-color: #080;\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            tags.getChildren().add(rating);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (attraction.getVisited().toString() !\u003d \"\") {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            Label visited \u003d new Label(attraction.getVisited().toString());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            visited.setText(attraction.getVisited().toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            visited.setStyle(\"-fx-background-color: #9933ff;\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            tags.getChildren().add(visited);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        attraction.getTags().stream()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        if (!(other instanceof AttractionCard)) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        AttractionCard card \u003d (AttractionCard) other;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u0026\u0026 attraction.equals(card.attraction);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 78,
      "Robinho98": 18,
      "leeyorktat": 4,
      "-": 58,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/AttractionListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Panel containing the list of attractions."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AttractionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String FXML \u003d \"AttractionListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(AttractionListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private ListView\u003cAttraction\u003e attractionListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Creates a {@code AttractionListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionListPanel(ObservableList\u003cAttraction\u003e attractionList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionListView.setItems(attractionList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        attractionListView.setCellFactory(listView -\u003e new AttractionListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Attraction} using a {@code AttractionCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    class AttractionListViewCell extends ListCell\u003cAttraction\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        protected void updateItem(Attraction attraction, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            super.updateItem(attraction, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            if (empty || attractionListView \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                setGraphic(new AttractionCard(attraction, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 47,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103t-t09-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "-": 101
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItineraryAttractionDayCounterCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * An UI component that displays information of a {@code ItineraryAttractionDayCounter}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class ItineraryAttractionDayCounterCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String FXML \u003d \"ItineraryAttractionDayCounterCard.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public final ItineraryAttraction itineraryAttractionDayCounter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Creates a {@code ItineraryAttractionDayCounterCard} with the given {@code ItineraryAttractionDayCounter}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ItineraryAttractionDayCounterCard(ItineraryAttraction itineraryAttractionDayCounter) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.itineraryAttractionDayCounter \u003d itineraryAttractionDayCounter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        day.setText(itineraryAttractionDayCounter.toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!(other instanceof ItineraryAttractionDayCounterCard)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        ItineraryAttractionDayCounterCard card \u003d (ItineraryAttractionDayCounterCard) other;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return day.getText().equals(card.day.getText())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                \u0026\u0026 itineraryAttractionDayCounter.equals(card.itineraryAttractionDayCounter);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItineraryAttractionListCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * An UI component that displays information of a {@code ItineraryAttraction}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class ItineraryAttractionListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String FXML \u003d \"ItineraryAttractionListCard.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public final ItineraryAttraction itineraryAttraction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    // Compulsory Fields"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label startEndTime;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    // For JavaFX, rename location to locale as location is a reserved keyword in JavaFX"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label locale;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    // Optional Fields"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label field1;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label field2;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label field3;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label field4;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Creates a {@code ItineraryAttractionCode} with the given {@code ItineraryAttraction} and index to display."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ItineraryAttractionListCard(ItineraryAttraction itineraryAttraction) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.itineraryAttraction \u003d itineraryAttraction.getItineraryAttraction();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        id.setText(itineraryAttraction.getIndex() + \". \");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        name.setText(itineraryAttraction.getName().fullName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        locale.setText(\"\\uD83C\\uDF0E \" + itineraryAttraction.getLocation().value);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        locale.setWrapText(true);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        startEndTime.setText(\"\\uD83D\\uDD56 \" + itineraryAttraction.getStartTime().toString()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + \"-\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + itineraryAttraction.getEndTime().toString());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        startEndTime.setWrapText(true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        //optional fields"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        description.setText(itineraryAttraction.getDescription().value);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        description.setWrapText(true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        int fieldsFilled \u003d 0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!itineraryAttraction.getAddress().value.isEmpty()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            String address \u003d \"\\uD83C\\uDFE0 \" + itineraryAttraction.getAddress().value;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            field1.setText(address);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            field1.setWrapText(true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            fieldsFilled++;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!itineraryAttraction.getPhone().value.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            String phone \u003d \"📞 \" + itineraryAttraction.getPhone().value;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            if (fieldsFilled \u003d\u003d 0) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field1.setText(phone);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field2.setText(phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field2.setWrapText(true);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            fieldsFilled++;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!itineraryAttraction.getEmail().value.isEmpty()) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            String email \u003d \"\\uD83D\\uDCE7 \" + itineraryAttraction.getEmail().value;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            if (fieldsFilled \u003d\u003d 0) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field1.setText(email);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            } else if (fieldsFilled \u003d\u003d 1) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field2.setText(email);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field3.setText(email);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field3.setWrapText(true);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            fieldsFilled++;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!itineraryAttraction.getOpeningHours().value.isEmpty()) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            String openingHours \u003d \"\\uD83C\\uDE3A \" + itineraryAttraction.getOpeningHours().value;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            if (fieldsFilled \u003d\u003d 0) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field1.setText(openingHours);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            } else if (fieldsFilled \u003d\u003d 1) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field2.setText(openingHours);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            } else if (fieldsFilled \u003d\u003d 2) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field3.setText(openingHours);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field4.setText(openingHours);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                field4.setWrapText(true);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (itineraryAttraction.getPriceRange().toString() !\u003d \"\") {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            Label priceRange \u003d new Label(itineraryAttraction.getPriceRange().toString());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            priceRange.setStyle(\"-fx-background-color: #800;\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            tags.getChildren().add(priceRange);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (itineraryAttraction.getRating().toString() !\u003d \"\") {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            Label rating \u003d new Label(itineraryAttraction.getRating().toString());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            rating.setStyle(\"-fx-background-color: #080;\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            tags.getChildren().add(rating);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (itineraryAttraction.getVisited().toString() !\u003d \"\") {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            Label visited \u003d new Label(itineraryAttraction.getVisited().toString());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            if (itineraryAttraction.getVisited().equals(new Visited(\"TRUE\"))) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                visited.setText(itineraryAttraction.getVisited().toString());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                visited.setText(\"Not Visited\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            visited.setStyle(\"-fx-background-color: #9933ff;\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            tags.getChildren().add(visited);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        itineraryAttraction.getTags().stream()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .sorted(Comparator.comparing(tag -\u003e tag.tagName))"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!(other instanceof ItineraryAttractionListCard)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        ItineraryAttractionListCard card \u003d (ItineraryAttractionListCard) other;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                \u0026\u0026 itineraryAttraction.equals(card.itineraryAttraction);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 171
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItineraryAttractionListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttractionDayCounter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttractionIndexCounter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Panel containing the list of itinerary attractions."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class ItineraryAttractionListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String FXML \u003d \"ItineraryAttractionListPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ItineraryAttractionListPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private ListView\u003cItineraryAttraction\u003e itineraryAttractionListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Creates a {@code ItineraryAttractionListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ItineraryAttractionListPanel(ObservableList\u003cItineraryAttraction\u003e itineraryAttractionList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        itineraryAttractionListView.setItems(itineraryAttractionList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        itineraryAttractionListView.setCellFactory(listView -\u003e new ItineraryAttractionListViewCell());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code ItineraryAttraction} using"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * a {@code ItineraryAttractionListCard}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    class ItineraryAttractionListViewCell extends ListCell\u003cItineraryAttraction\u003e {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        protected void updateItem(ItineraryAttraction itineraryAttraction, boolean empty) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            super.updateItem(itineraryAttraction, empty);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            if (empty || itineraryAttractionListView \u003d\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            } else if (itineraryAttraction instanceof ItineraryAttractionDayCounter) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                setGraphic(new ItineraryAttractionDayCounterCard(itineraryAttraction).getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            } else if (itineraryAttraction instanceof ItineraryAttractionIndexCounter) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                setGraphic(new ItineraryAttractionListCard(itineraryAttraction).getRoot());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItineraryListCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class ItineraryListCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String FXML \u003d \"ItineraryListCard.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public final Itinerary itinerary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label locale;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label startEndDate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label budget;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Creates a {@code ItineraryCode} with the given {@code Itinerary} and index to display."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ItineraryListCard(Itinerary itinerary, int displayedIndex) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        name.setText(itinerary.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        name.setWrapText(true);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        startEndDate.setText(\"\\uD83D\\uDCC6 \" + itinerary.getStartDate().value"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + \" to \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + itinerary.getEndDate().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        description.setText(itinerary.getDescription().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        description.setWrapText(true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!itinerary.getBudget().value.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            budget.setText(\"\\uD83D\\uDCB5 \" + itinerary.getBudget().toString());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            budget.setWrapText(true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!itinerary.getLocations().isEmpty()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            locale.setText(\"\\uD83C\\uDF0E \" + itinerary.getLocations());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            locale.setWrapText(true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        if (!(other instanceof ItineraryListCard)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        ItineraryListCard card \u003d (ItineraryListCard) other;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                \u0026\u0026 itinerary.equals(card.itinerary);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Robinho98": 83,
      "leeyorktat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ItineraryListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * Panel containing the list of itineraries."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class ItineraryListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String FXML \u003d \"ItineraryListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ItineraryListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private ListView\u003cItinerary\u003e itineraryListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Creates a {@code ItineraryListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ItineraryListPanel(ObservableList\u003cItinerary\u003e itineraryList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        itineraryListView.setItems(itineraryList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        itineraryListView.setCellFactory(listView -\u003e new ItineraryListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Itinerary} using a {@code ItineraryCard}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    class ItineraryListViewCell extends ListCell\u003cItinerary\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        protected void updateItem(Itinerary itinerary, boolean empty) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            super.updateItem(itinerary, empty);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            if (empty || itineraryListView \u003d\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                setGraphic(new ItineraryListCard(itinerary, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 47,
      "leeyorktat": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private AttractionListPanel attractionListPanel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private ItineraryListPanel itineraryListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private ItineraryAttractionListPanel itineraryAttractionListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private SplitPane splitPane;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private StackPane attractionListPanelPlaceholder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private StackPane itineraryListPanelPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Label listTitle;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Label attractionListTitle;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "         * TO-DO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        attractionListPanel \u003d new AttractionListPanel(logic.getFilteredAttractionList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        attractionListPanelPlaceholder.getChildren().add(attractionListPanel.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        handleChangeToItineraryPanel();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        attractionListTitle.setText(\"Attractions\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Switches panel to show list of itineraries."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private void handleChangeToItineraryPanel() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        listTitle.setText(\"Itineraries\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        itineraryListPanel \u003d new ItineraryListPanel(logic.getFilteredItineraryList());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        itineraryListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        itineraryListPanelPlaceholder.getChildren().add(itineraryListPanel.getRoot());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Switches panel to show itinerary attractions."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void handleChangeToItineraryAttractionPanel() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        listTitle.setText(\"Attractions in Selected Itinerary\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        itineraryAttractionListPanel \u003d new ItineraryAttractionListPanel(logic.getFilteredItineraryAttractionList());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        itineraryListPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        itineraryListPanelPlaceholder.getChildren().add(itineraryAttractionListPanel.getRoot());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionListPanel getAttractionListPanel() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return attractionListPanel;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ItineraryListPanel getItineraryListPanel() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return itineraryListPanel;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public ItineraryAttractionListPanel getItineraryAttractionListPanel() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return itineraryAttractionListPanel;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see seedu.address.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            if (commandResult.isSwitchToItineraryAttraction() \u003d\u003d CommandResult.ToSwitchItineraryPanels.YES) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                handleChangeToItineraryAttractionPanel();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            } else if (commandResult.isSwitchToItineraryAttraction() \u003d\u003d CommandResult.ToSwitchItineraryPanels.NO) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                handleChangeToItineraryPanel();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 41,
      "yuxuanxc": 11,
      "leeyorktat": 3,
      "peter-yeh": 1,
      "-": 191
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/track_pad_32.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "-": 88
    }
  },
  {
    "path": "src/main/resources/view/AttractionListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cHBox id\u003d\"attractionCardPane\" fx:id\u003d\"attractionCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003cLabel fx:id\u003d\"locale\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003cLabel fx:id\u003d\"field1\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003cLabel fx:id\u003d\"field2\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003cLabel fx:id\u003d\"field3\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003cLabel fx:id\u003d\"field4\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "         \u003cGridPane.margin\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            \u003cInsets bottom\u003d\"3.0\" left\u003d\"3.0\" right\u003d\"3.0\" top\u003d\"3.0\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "         \u003c/GridPane.margin\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 17,
      "-": 29
    }
  },
  {
    "path": "src/main/resources/view/AttractionListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  \u003cListView fx:id\u003d\"attractionListView\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "         \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003c/VBox.margin\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 6,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     -fx-background-color: transparent;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     -fx-border-color: transparent;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "#visited {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-background-color: #cf0c0c;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "#visited .notexists {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-background-color: #33cc33;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 2,
      "Robinho98": 20,
      "-": 350
    }
  },
  {
    "path": "src/main/resources/view/Extensions.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ".error {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: #BB0000 !important; /* The error class should always override the default text-fill style */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ".listHeader {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Empty cells will not have alternating colours */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-background: #f5dce0;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ".tag-selector {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 3;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ".tooltip-text {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 3,
      "Robinho98": 1,
      "leeyorktat": 2,
      "-": 19
    }
  },
  {
    "path": "src/main/resources/view/ItineraryAttractionDayCounterCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cHBox id\u003d\"dayCardPane\" fx:id\u003d\"dayCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"10\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_day_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        \u003cLabel fx:id\u003d\"day\" styleClass\u003d\"cell_day_label\" text\u003d\"\\$day\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 9,
      "yuxuanxc": 1,
      "-": 26
    }
  },
  {
    "path": "src/main/resources/view/ItineraryAttractionListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cHBox id\u003d\"itineraryAttractionCardPane\" fx:id\u003d\"itineraryAttractionCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003cHBox alignment\u003d\"CENTER_LEFT\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$description\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003cLabel fx:id\u003d\"startEndTime\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startEndTime\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003cLabel fx:id\u003d\"locale\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$location\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003cLabel fx:id\u003d\"field1\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003cLabel fx:id\u003d\"field2\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003cLabel fx:id\u003d\"field3\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003cLabel fx:id\u003d\"field4\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "         \u003cRowConstraints /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "      \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 43,
      "yuxuanxc": 1
    }
  },
  {
    "path": "src/main/resources/view/ItineraryAttractionListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  \u003cListView fx:id\u003d\"itineraryAttractionListView\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \u003c/VBox.margin\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 7,
      "yuxuanxc": 5
    }
  },
  {
    "path": "src/main/resources/view/ItineraryListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cHBox id\u003d\"itineraryCardPane\" fx:id\u003d\"itineraryCardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            \u003cLabel fx:id\u003d\"description\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            \u003cLabel fx:id\u003d\"locale\" styleClass\u003d\"cell_small_label\"/\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            \u003cLabel fx:id\u003d\"startEndDate\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$startEndDate\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            \u003cLabel fx:id\u003d\"budget\" styleClass\u003d\"cell_small_label\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "Robinho98": 5,
      "leeyorktat": 30
    }
  },
  {
    "path": "src/main/resources/view/ItineraryListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \u003cListView fx:id\u003d\"itineraryListView\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            \u003cInsets bottom\u003d\"5.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        \u003c/VBox.margin\u003e\u003c/ListView\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 5,
      "leeyorktat": 7
    }
  },
  {
    "path": "src/main/resources/view/LightTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-image: url(\"TP_background.jpg\");"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 30px;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 30px;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-margin: 10px;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 30px;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-focus-color;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 30px;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 10px;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-opacity: 0.8;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #F5DCE0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".list-cell:filled:even #attractionCardPane {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #7EE5B1;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 15px;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".list-cell:filled:odd #attractionCardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #DBFFD6;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 15px;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".list-cell:filled:selected #attractionCardPane {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #C1E7E3;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 15px;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".list-cell:filled:even #itineraryCardPane {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #6EB5FF;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 15px;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".list-cell:filled:odd #itineraryCardPane {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #85E3FF;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 15px;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".list-cell:filled:selected #itineraryCardPane {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #ACE7FF;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-color: transparent;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 15px;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".list-cell:filled #dayCardPane {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #A79AFF;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 10px;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".list-cell:filled:even #itineraryAttractionCardPane {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #FF9CEE;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 15px;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".list-cell:filled:odd #itineraryAttractionCardPane {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #FFB5E8;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 15px;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ".cell_day_label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-font-size: 20px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     -fx-background-color: #F5DCE0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     -fx-background-radius: 30px;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     -fx-background-color: #F5DCE0;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     -fx-border-color: transparent;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     -fx-opacity: 0.91;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #FFABAB;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 30px;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: derive(#F5DCE0, 30%);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-color: derive(#F5DCE0, 25%);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: derive(#F5DCE0, 30%);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-color: derive(#F5DCE0, 30%);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: derive(#FFABAB, 30%);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: derive(#FFABAB, 50%);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: derive(#FFABAB, 20%);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #FFABAB;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/*"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #F5DCE0;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-color: #F5DCE0, #F5DCE0;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #F5DCE0;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #F5DCE0;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #F5DCE0;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: derive(black, 25%);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-fill: black;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: derive(#F5DCE0, 20%);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: derive(#F5DCE0, 50%);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#attractionCardPane {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#itineraryCardPane {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#filterField, #attractionListPanel, #attractionWebpage {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #F5DCE0;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#visited {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #cf0c0c;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "#visited .notexists {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-color: #33cc33;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-family: \"Book Antiqua\";"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-font-size: 12px;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 414,
      "Robinho98": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "\u003cfx:root minHeight\u003d\"600\" minWidth\u003d\"450\" onCloseRequest\u003d\"#handleExit\" title\u003d\"TrackPad App\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \u003cImage url\u003d\"@/images/track_pad_32.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        \u003cURL value\u003d\"@LightTheme.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "      \u003cVBox styleClass\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        \u003cStackPane fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"resultDisplayPlaceholder\" maxHeight\u003d\"100.0\" minHeight\u003d\"100\" prefHeight\u003d\"100.0\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            \u003cInsets bottom\u003d\"5\" left\u003d\"10\" right\u003d\"10\" top\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.5\" prefHeight\u003d\"51.0\" prefWidth\u003d\"690.0\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "          \u003cVBox fx:id\u003d\"attractionList\" maxWidth\u003d\"1000\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            \u003cLabel fx:id\u003d\"attractionListTitle\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" lineSpacing\u003d\"9.0\" styleClass\u003d\"listHeader\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            \u003cStackPane fx:id\u003d\"attractionListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "          \u003cVBox fx:id\u003d\"itineraryList\" maxWidth\u003d\"1000\" minWidth\u003d\"340\" prefWidth\u003d\"340\" styleClass\u003d\"pane-with-border\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            \u003cLabel fx:id\u003d\"listTitle\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" lineSpacing\u003d\"9.0\" styleClass\u003d\"listHeader\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "              \u003cpadding\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \u003cInsets left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "              \u003c/padding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                     \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        \u003cInsets left\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                     \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003c/Label\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            \u003cStackPane fx:id\u003d\"itineraryListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "               \u003cVBox.margin\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                  \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "               \u003c/VBox.margin\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 31,
      "Robinho98": 1,
      "leeyorktat": 8,
      "-": 46
    }
  },
  {
    "path": "src/test/data/JsonSerializableTrackPadTest/duplicateAttractionTrackPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  \"attractions\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\": \"Singapore Zoo\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"email\": \"sgzoo@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"address\": \"123, Jurong West Ave 6, #08-111\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"description\": \"Rainforest environment\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"openingHours\" : \"1000-1800\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"priceRange\": \"MEDIUM\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"rating\": \"4.6\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"visited\": \"TRUE\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"tagged\": [ \"animals\" ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\": \"Singapore Zoo\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"phone\": \"94351253\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"email\": \"wrs@example.com\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"description\": \"Rainforest environment\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"openingHours\" : \"1000-1800\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"priceRange\": \"MEDIUM\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"rating\": \"4.6\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"visited\": \"TRUE\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"location\": \"Singapore, Singapore\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 21,
      "Robinho98": 2,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/test/data/JsonSerializableTrackPadTest/duplicateItineraryTrackPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \"itineraries\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"name\" : \"Japan trip\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"description\" : \"Visit Japan\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"startDate\" : \"12-12-2020\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"endDate\" : \"14-12-2020\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"budget\" : \"3020\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"days\" : [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"1\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"2\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"3\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"name\" : \"Japan trip\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"description\" : \"Visit Japan\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"startDate\" : \"12-12-2020\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"endDate\" : \"14-12-2020\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"budget\" : \"3020\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"days\" : [ {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"1\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"2\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"3\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 35
    }
  },
  {
    "path": "src/test/data/JsonSerializableTrackPadTest/invalidAttractionTrackPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  \"attractions\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\": \"Singapore Zoo\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"invalid@email!3e\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"location\": \"Singapore, Singapore\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 2,
      "-": 5,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/test/data/JsonSerializableTrackPadTest/invalidItineraryTrackPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \"itineraries\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"name\" : \"Japan trip\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"description\" : \"Visit Japan\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"startDate\" : \"12-122-2020\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"endDate\" : \"14-12-2020\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"budget\" : \"3020\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 9
    }
  },
  {
    "path": "src/test/data/JsonSerializableTrackPadTest/typicalAttractionsTrackPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \"_comment\": \"TrackPad save file which contains the same Attraction values as in TypicalAttractions#getTypicalAttractions()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  \"attractions\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\" : \"JurongBirdPark\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"phone\" : \"94351253\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"email\" : \"birdpark@example.com\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"address\" : \"2 Jurong Hill\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"description\" : \"The park offers a haven for close to 3500 birds across 400 species.\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"openingHours\": \"1000-1800\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"priceRange\": \"\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"rating\": \"\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"visited\": \"\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"tagged\" : [ \"animals\" ]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\" : \"Night Safari\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"email\" : \"nightsafari@example.com\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"address\" : \"80 Mandai Lake Rd\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"description\" : \"The world\u0027s first nocturnal zoo.\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"openingHours\": \"1800-2300\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"priceRange\": \"\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"rating\": \"\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"visited\": \"\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"tagged\" : [ \"animals\", \"night\" ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\" : \"Singapore Zoo\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"email\" : \"singaporezoo@example.com\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"address\" : \"80 Mandai Lake Rd\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"description\" : \"\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"openingHours\": \"1000-1800\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"priceRange\": \"\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"rating\": \"\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"visited\": \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\" : \"River Safari\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"email\" : \"riversafari@example.com\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"address\" : \"80 Mandai Lake Rd\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"description\" : \"A river-themed zoo and aquarium in Singapore.\","
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"openingHours\": \"1000-1800\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"priceRange\": \"\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"rating\": \"\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"visited\": \"\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"tagged\" : [ \"panda\" ]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\" : \"Orchard Road\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"phone\" : \"9482224\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"email\" : \"orchardroad@example.com\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"address\" : \"Orchard Road\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"description\" : \"Orchard Road is Singapore’s retail heart, with discount outlets, department stores and upscale boutiques, alongside luxury hotels.\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"openingHours\": \"\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"priceRange\": \"\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"rating\": \"\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"visited\": \"\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\" : \"Botanic Gardens\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"phone\" : \"9482427\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"email\" : \"botanicgardens@example.com\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"address\" : \"1 Cluny Rd\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"description\" : \"The only tropical garden to be honoured as a UNESCO World Heritage Site.\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"openingHours\": \"\","
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"priceRange\": \"\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"rating\": \"\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"visited\": \"\","
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\" : \"Jurong Lake\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"phone\" : \"9482442\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"email\" : \"juronglake@example.com\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"address\" : \"Jurong\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"description\" : \"Sprawling park around a lake \u0026 swamp forest with a boardwalk, playgrounds, a dog run \u0026 water sports.\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"openingHours\": \"\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"priceRange\": \"\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"rating\": \"\","
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"visited\": \"\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"tagged\" : [ ]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 67,
      "Robinho98": 7,
      "limkoonkiat": 14
    }
  },
  {
    "path": "src/test/data/JsonSerializableTrackPadTest/typicalItinerariesTrackPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \"_comment\": \"TrackPad save file which contains the same Itinerary values as in TypicalItineraries#getTypicalItineraries()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \"itineraries\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"name\" : \"Singapore Zoos\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"description\" : \"Rediscover our wildlife parks!\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"startDate\" : \"06-07-2019\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"endDate\" : \"07-07-2019\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"budget\" : \"500.00\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"days\" : [ {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"1\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"attraction\" : {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"name\" : \"Singapore Zoo\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"phone\" : \"95352563\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"email\" : \"singaporezoo@example.com\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"address\" : \"80 Mandai Lake Rd\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"description\" : \"\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"location\" : \"Singapore, Singapore\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"openingHours\" : \"1000-1800\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"priceRange\" : \"\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"rating\" : \"\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"visited\" : \"\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"tagged\" : [ ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        },"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"startTime\" : \"1000\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"endTime\" : \"1700\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"attraction\" : {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"name\" : \"Night Safari\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"phone\" : \"98765432\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"email\" : \"nightsafari@example.com\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"address\" : \"80 Mandai Lake Rd\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"description\" : \"The world\u0027s first nocturnal zoo.\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"openingHours\": \"1800-2300\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"priceRange\": \"\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"rating\": \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"visited\": \"\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"tagged\" : [ \"animals\", \"night\" ]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        },"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"startTime\" : \"1900\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"endTime\" : \"2300\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"2\","
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"attraction\" : {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"name\" : \"River Safari\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"phone\" : \"87652533\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"email\" : \"riversafari@example.com\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"address\" : \"80 Mandai Lake Rd\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"description\" : \"A river-themed zoo and aquarium in Singapore.\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"openingHours\": \"1000-1800\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"priceRange\": \"\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"rating\": \"\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"visited\": \"\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"tagged\" : [ \"panda\" ]"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        },"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"startTime\" : \"1200\","
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"endTime\" : \"1800\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"name\" : \"Paris Trip\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"description\" : \"Visit the City of Light\","
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"startDate\" : \"21-12-2020\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"endDate\" : \"26-12-2020\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"budget\" : \"\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"days\" : [ {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"1\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"attraction\" : {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"name\" : \"Eiffel Tower\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"phone\" : \"33892701239\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"email\" : \"eiffel@example.com\","
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"address\" : \"Champ de Mars, 5 Avenue Anatole France, 75007\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"description\" : \"Gustave Eiffel\u0027s iconic, wrought-iron 1889 tower, with steps and elevators to observation decks.\","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"location\" : \"Paris, France\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"openingHours\" : \"1000-2200\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"priceRange\" : \"HIGH\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"rating\" : \"4.8\","
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"visited\" : \"FALSE\","
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"tagged\" : [ \"activity\" ]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        },"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"startTime\" : \"0900\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"endTime\" : \"1500\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"2\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"attraction\" : {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"name\" : \"Louvre Museum\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"phone\" : \"330140205317\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"email\" : \"info@louvre.fr\","
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"address\" : \"Rue de Rivoli, 75001\","
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"description\" : \"The Louvre, or the Louvre Museum, is the world\u0027s largest art museum and a historic monument in Paris, France.\","
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"location\": \"Paris, France\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"openingHours\": \"0900-1800\","
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"priceRange\": \"MEDIUM\","
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"rating\": \"4.7\","
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"visited\": \"FALSE\","
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"tagged\" : [ ]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        },"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"startTime\" : \"1100\","
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"endTime\" : \"1800\""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"3\","
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"attraction\" : {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"name\" : \"Cathedrale Notre Dame de Paris\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"phone\" : \"\","
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"email\" : \"\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"address\" : \"6 Parvis Notre-Dame - Pl. Jean-Paul II, 75004\","
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"description\" : \"\","
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"location\": \"Paris, France\","
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"openingHours\": \"\","
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"priceRange\": \"\","
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"rating\": \"\","
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"visited\": \"\","
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "          \"tagged\" : [ ]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        },"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"startTime\" : \"1200\","
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        \"endTime\" : \"1500\""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      } ]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 129
    }
  },
  {
    "path": "src/test/data/JsonTrackPadStorageTest/invalidAndValidAttractionTrackPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  \"attractions\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\": \"Valid Attraction\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"description\" : \"Rainforest environment\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"openingHours\" : \"1000-1800\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"priceRange\": \"MEDIUM\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"rating\": \"4.6\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"visited\": \"TRUE\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\": \"Attraction With Invalid Phone Field\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"948asdf2424\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"description\" : \"Rainforest environment\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"openingHours\" : \"1000-1800\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"priceRange\": \"MEDIUM\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"rating\": \"4.6\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"visited\": \"TRUE\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 11,
      "Robinho98": 4,
      "-": 8,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/test/data/JsonTrackPadStorageTest/invalidAndValidItineraryTrackPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \"itineraries\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"name\" : \"Valid itinerary\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"description\" : \"Visit Japan\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"startDate\" : \"12-12-2020\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"endDate\" : \"14-12-2020\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"budget\" : \"2030\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"days\" : [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"1\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"2\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"3\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"name\" : \"Itinerary with invalid budget field\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"description\" : \"invalid budget field\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"startDate\" : \"12-11-2020\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"endDate\" : \"13-11-2020\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"budget\" : \"2003.234\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"days\" : [ {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"1\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"2\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 32
    }
  },
  {
    "path": "src/test/data/JsonTrackPadStorageTest/invalidAttractionTrackPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "  \"attractions\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"name\": \"Attraction with invalid name field: S!ng@pore Z00\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"phone\": \"9482424\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"email\": \"hans@example.com\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"address\": \"4th street\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"description\" : \"Rainforest environment\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"location\": \"Singapore, Singapore\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"openingHours\" : \"1000-1800\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    \"priceRange\": \"MEDIUM\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"rating\": \"4.6\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    \"visited\": \"TRUE\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 6,
      "Robinho98": 2,
      "-": 5,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/test/data/JsonTrackPadStorageTest/invalidItineraryTrackPad.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \"itineraries\" : [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"name\" : \"Itinerary with invalid name field )@paN\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"description\" : \"Visit Japan\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"startDate\" : \"12-12-2020\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"endDate\" : \"14-12-2020\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"budget\" : \"3020\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    \"days\" : [ {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"1\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"2\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"day\" : \"3\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "      \"itineraryAttractions\" : [ ]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  } ]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 19
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \"attractionListFilePath\" : \"attractionlist.json\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \"itineraryListFilePath\" : \"itinerarylist.json\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \"attractionListFilePath\" : \"attractionlist.json\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "  \"itineraryListFilePath\" : \"itinerarylist.json\""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 10,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/track_pad_32.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 1,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_EIFFEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_RANGE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISITED_DESC_EIFFEL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.EIFFEL_TOWER;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.AddAttractionCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.ListAttractionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.storage.JsonAttractionListStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.storage.JsonItineraryListStorage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAttractionListStorage attractionListStorage \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonAttractionListStorage(temporaryFolder.resolve(\"attractionlist.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonItineraryListStorage itineraryListStorage \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonItineraryListStorage(temporaryFolder.resolve(\"itinerarylist.json\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        StorageManager storage \u003d new StorageManager(attractionListStorage, itineraryListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String deleteAttractionCommand \u003d \"delete-attraction 9\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandException(deleteAttractionCommand, MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String listAttractionCommand \u003d ListAttractionCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(listAttractionCommand, ListAttractionCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Setup LogicManager with JsonAttractionListIoExceptionThrowingStub"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAttractionListStorage attractionListStorage \u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonAttractionListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionAttractions.json\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonItineraryListStorage itineraryListStorage \u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonItineraryListIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionItineraries.json\"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        StorageManager storage \u003d new StorageManager(attractionListStorage, itineraryListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String addAttractionCommand \u003d AddAttractionCommand.COMMAND_WORD + NAME_DESC_EIFFEL"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction expectedAttraction \u003d new AttractionBuilder(EIFFEL_TOWER).withTags().build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.addAttraction(expectedAttraction);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(addAttractionCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void getFilteredAttractionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredAttractionList().remove(0));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void getFilteredItineraryList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredItineraryList().remove(0));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static class JsonAttractionListIoExceptionThrowingStub extends JsonAttractionListStorage {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        private JsonAttractionListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void saveAttractionList(ReadOnlyAttractionList attractionList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static class JsonItineraryListIoExceptionThrowingStub extends JsonItineraryListStorage {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        private JsonItineraryListIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void saveItineraryList(ReadOnlyItineraryList itineraryList, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 8,
      "yuxuanxc": 14,
      "-": 134,
      "limkoonkiat": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.NIL)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.NIL)));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.NIL)));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.NIL).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.NIL).hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different switchToItineraryPanels value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.YES).hashCode());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 14,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.EditAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.EditItineraryAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.EditItineraryDescriptorBuilder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d For valid Attraction \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_NAME_EIFFEL \u003d \"Eiffel Tower\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_NAME_MBS \u003d \"Marina Bay Sands\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_PHONE_EIFFEL \u003d \"33892701239\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_PHONE_MBS \u003d \"66888888\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_EMAIL_EIFFEL \u003d \"eiffel@example.com\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_EMAIL_MBS \u003d \"mbs@example.com\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_ADDRESS_EIFFEL \u003d \"Champ de Mars, 5 Avenue Anatole France, 75007\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_ADDRESS_MBS \u003d \"10 Bayfront Ave, 018956\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_DESCRIPTION_EIFFEL \u003d \"Gustave Eiffel\u0027s iconic, \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"wrought-iron 1889 tower, with steps and elevators to observation decks.\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_DESCRIPTION_MBS \u003d \"The Marina Bay Sands is an integrated \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            + \"resort fronting Marina Bay within the Downtown Core district of Singapore.\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_LOCATION_EIFFEL \u003d \"Paris, France\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_LOCATION_MBS \u003d \"Singapore, Singapore\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_OPENING_HOURS_EIFFEL \u003d \"1000-2200\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_OPENING_HOURS_MBS \u003d \"0000-2359\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_PRICE_RANGE_EIFFEL \u003d \"HIGH\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_PRICE_RANGE_MBS \u003d \"MEDIUM\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_RATING_EIFFEL \u003d \"4.8\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_RATING_MBS \u003d \"4.7\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_VISITED_EIFFEL \u003d \"FALSE\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_VISITED_MBS \u003d \"TRUE\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String VALID_TAG_SIGHTSEEING \u003d \"sightseeing\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VALID_TAG_ACTIVITY \u003d \"activity\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String NAME_DESC_EIFFEL \u003d \" \" + PREFIX_NAME + VALID_NAME_EIFFEL;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String NAME_DESC_MBS \u003d \" \" + PREFIX_NAME + VALID_NAME_MBS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String PHONE_DESC_EIFFEL \u003d \" \" + PREFIX_PHONE + VALID_PHONE_EIFFEL;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String PHONE_DESC_MBS \u003d \" \" + PREFIX_PHONE + VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String EMAIL_DESC_EIFFEL \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_EIFFEL;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String EMAIL_DESC_MBS \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String ADDRESS_DESC_EIFFEL \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_EIFFEL;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String ADDRESS_DESC_MBS \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String DESCRIPTION_DESC_EIFFEL \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_EIFFEL;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String DESCRIPTION_DESC_MBS \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_MBS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String LOCATION_DESC_EIFFEL \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_EIFFEL;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String LOCATION_DESC_MBS \u003d \" \" + PREFIX_LOCATION + VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String OPENING_HOURS_DESC_EIFFEL \u003d \" \" + PREFIX_OPENING_HOURS + VALID_OPENING_HOURS_EIFFEL;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String OPENING_HOURS_DESC_MBS \u003d \" \" + PREFIX_OPENING_HOURS + VALID_OPENING_HOURS_MBS;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String PRICE_RANGE_DESC_EIFFEL \u003d \" \" + PREFIX_PRICE_RANGE + VALID_PRICE_RANGE_EIFFEL;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String PRICE_RANGE_DESC_MBS \u003d \" \" + PREFIX_PRICE_RANGE + VALID_PRICE_RANGE_MBS;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String RATING_DESC_EIFFEL \u003d \" \" + PREFIX_RATING + VALID_RATING_EIFFEL;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String RATING_DESC_MBS \u003d \" \" + PREFIX_RATING + VALID_RATING_MBS;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VISITED_DESC_EIFFEL \u003d \" \" + PREFIX_VISITED + VALID_VISITED_EIFFEL;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String VISITED_DESC_MBS \u003d \" \" + PREFIX_VISITED + VALID_VISITED_MBS;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String TAG_DESC_SIGHTSEEING \u003d \" \" + PREFIX_TAG + VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String TAG_DESC_ACTIVITY \u003d \" \" + PREFIX_TAG + VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d For valid Itinerary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_NAME_PARIS_TRIP \u003d \"Paris Trip\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_NAME_JAPAN_TRIP \u003d \"7D Japan Adventure\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_DESCRIPTION_PARIS_TRIP \u003d \"Visit the City of Light\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_DESCRIPTION_JAPAN_TRIP \u003d \"Have fun in Japan!\";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_START_DATE_PARIS_TRIP \u003d \"03-06-2020\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_START_DATE_JAPAN_TRIP \u003d \"12-12-2019\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_END_DATE_PARIS_TRIP \u003d \"05-06-2020\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_END_DATE_JAPAN_TRIP \u003d \"18-12-2019\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_BUDGET_PARIS_TRIP \u003d \"4000\";"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_BUDGET_JAPAN_TRIP \u003d \"5230.60\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String NAME_DESC_PARIS_TRIP \u003d \" \" + PREFIX_NAME + VALID_NAME_PARIS_TRIP;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String NAME_DESC_JAPAN_TRIP \u003d \" \" + PREFIX_NAME + VALID_NAME_JAPAN_TRIP;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DESCRIPTION_DESC_PARIS_TRIP \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_PARIS_TRIP;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DESCRIPTION_DESC_JAPAN_TRIP \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_JAPAN_TRIP;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String START_DATE_DESC_PARIS_TRIP \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_PARIS_TRIP;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String START_DATE_DESC_JAPAN_TRIP \u003d \" \" + PREFIX_START_DATE + VALID_START_DATE_JAPAN_TRIP;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String END_DATE_DESC_PARIS_TRIP \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_PARIS_TRIP;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String END_DATE_DESC_JAPAN_TRIP \u003d \" \" + PREFIX_END_DATE + VALID_END_DATE_JAPAN_TRIP;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String BUDGET_DESC_PARIS_TRIP \u003d \" \" + PREFIX_BUDGET + VALID_BUDGET_PARIS_TRIP;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String BUDGET_DESC_JAPAN_TRIP \u003d \" \" + PREFIX_BUDGET + VALID_BUDGET_JAPAN_TRIP;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d For valid Itinerary Attraction \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_START_TIME_MBS \u003d \"1000\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_START_TIME_EIFFEL \u003d \"1200\";"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_END_TIME_MBS \u003d \"1500\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_END_TIME_EIFFEL \u003d \"1600\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_INDEX_MBS \u003d \"1\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_INDEX_EIFFEL \u003d \"2\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_DAY_VISITING_MBS \u003d \"3\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String VALID_DAY_VISITING_EIFFEL \u003d \"2\";"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String START_TIME_DESC_EIFFEL \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_EIFFEL;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String START_TIME_DESC_MBS \u003d \" \" + PREFIX_START_TIME + VALID_START_TIME_MBS;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String END_TIME_DESC_EIFFEL \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_EIFFEL;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String END_TIME_DESC_MBS \u003d \" \" + PREFIX_END_TIME + VALID_END_TIME_MBS;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String INDEX_DESC_EIFFEL \u003d VALID_INDEX_EIFFEL;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String INDEX_DESC_MBS \u003d VALID_INDEX_MBS;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String DAY_VISITING_DESC_EIFFEL \u003d \" \" + PREFIX_DAY_VISITING + VALID_DAY_VISITING_EIFFEL;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String DAY_VISITING_DESC_MBS \u003d \" \" + PREFIX_DAY_VISITING + VALID_DAY_VISITING_MBS;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d For invalids \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"Zoo\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"mbs!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String INVALID_LOCATION_DESC \u003d \" \" + PREFIX_LOCATION; // empty string not allowed for locations"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String INVALID_OPENING_HOURS_DESC \u003d \" \" + PREFIX_OPENING_HOURS + \"10-12\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String INVALID_PRICE_RANGE_DESC \u003d \" \" + PREFIX_PRICE_RANGE + \"AVERAGE\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String INVALID_RATING_DESC \u003d \" \" + PREFIX_RATING + \"5.1\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String INVALID_VISITED_DESC \u003d \" \" + PREFIX_VISITED + \"True1\"; // numbers not allowed in VISITED"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"Sightseeing*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String INVALID_START_DATE_DESC \u003d \" \" + PREFIX_START_DATE + \"1 Jan 2011\"; // \u0027Jan\u0027 invalid date"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String INVALID_END_DATE_DESC \u003d \" \" + PREFIX_END_DATE + \"35-68-2011\"; // invalid day and month"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String INVALID_BUDGET_DESC \u003d \" \" + PREFIX_BUDGET + \"23.222\"; // more than 2 decimal places"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String INVALID_START_TIME_DESC \u003d \" \" + PREFIX_START_TIME + \"12-33\"; // no dash in time"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String INVALID_END_TIME_DESC \u003d \" \" + PREFIX_END_TIME + \"12111\"; // one more digit"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String INVALID_INDEX_DESC \u003d \" -1 \"; // index cannot be negative"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String INVALID_DAY_VISITING_DESC \u003d \" \" + PREFIX_DAY_VISITING + \"-2232\"; // negative day"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final EditAttractionCommand.EditAttractionDescriptor DESC_EIFFEL;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final EditAttractionCommand.EditAttractionDescriptor DESC_MBS;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final EditItineraryAttractionCommand.EditItineraryAttractionDescriptor DESC_EIFFEL_IA;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final EditItineraryAttractionCommand.EditItineraryAttractionDescriptor DESC_MBS_IA;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final EditItineraryCommand.EditItineraryDescriptor DESC_PARIS_TRIP;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final EditItineraryCommand.EditItineraryDescriptor DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d For Attraction \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DESC_EIFFEL \u003d new EditAttractionDescriptorBuilder().withName(VALID_NAME_EIFFEL)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withPhone(VALID_PHONE_EIFFEL).withEmail(VALID_EMAIL_EIFFEL)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withAddress(VALID_ADDRESS_EIFFEL).withDescription(VALID_DESCRIPTION_EIFFEL)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withLocation(VALID_LOCATION_EIFFEL).withOpeningHours(VALID_OPENING_HOURS_EIFFEL)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withPriceRange(VALID_PRICE_RANGE_EIFFEL).withRating(VALID_RATING_EIFFEL)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withVisited(VALID_VISITED_EIFFEL).withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        DESC_MBS \u003d new EditAttractionDescriptorBuilder().withName(VALID_NAME_MBS)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withPhone(VALID_PHONE_MBS).withEmail(VALID_EMAIL_MBS)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withAddress(VALID_ADDRESS_MBS).withDescription(VALID_DESCRIPTION_MBS)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withLocation(VALID_LOCATION_MBS).withOpeningHours(VALID_OPENING_HOURS_MBS)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withPriceRange(VALID_PRICE_RANGE_MBS).withRating(VALID_RATING_MBS)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withVisited(VALID_VISITED_MBS).withTags(VALID_TAG_ACTIVITY, VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d For Itinerary \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DESC_PARIS_TRIP \u003d new EditItineraryDescriptorBuilder()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withName(VALID_NAME_PARIS_TRIP)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_PARIS_TRIP)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withStartDate(VALID_START_DATE_PARIS_TRIP)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withEndDate(VALID_END_DATE_PARIS_TRIP)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withBudget(VALID_BUDGET_PARIS_TRIP)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DESC_JAPAN_TRIP \u003d new EditItineraryDescriptorBuilder()"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withName(VALID_NAME_JAPAN_TRIP)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JAPAN_TRIP)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withStartDate(VALID_START_DATE_JAPAN_TRIP)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withEndDate(VALID_END_DATE_JAPAN_TRIP)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withBudget(VALID_BUDGET_JAPAN_TRIP)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d For Itinerary Attraction \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DESC_EIFFEL_IA \u003d new EditItineraryAttractionDescriptorBuilder().withName(VALID_NAME_EIFFEL)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withPhone(VALID_PHONE_EIFFEL).withEmail(VALID_EMAIL_EIFFEL)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withAddress(VALID_ADDRESS_EIFFEL).withDescription(VALID_DESCRIPTION_EIFFEL)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withLocation(VALID_LOCATION_EIFFEL).withOpeningHours(VALID_OPENING_HOURS_EIFFEL)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withPriceRange(VALID_PRICE_RANGE_EIFFEL).withRating(VALID_RATING_EIFFEL)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withVisited(VALID_VISITED_EIFFEL).withTags(VALID_TAG_SIGHTSEEING)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withStartTime(VALID_START_TIME_EIFFEL).withEndTime(VALID_END_TIME_EIFFEL).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DESC_MBS_IA \u003d new EditItineraryAttractionDescriptorBuilder().withName(VALID_NAME_MBS)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withPhone(VALID_PHONE_MBS).withEmail(VALID_EMAIL_MBS)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withAddress(VALID_ADDRESS_MBS).withDescription(VALID_DESCRIPTION_MBS)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withLocation(VALID_LOCATION_MBS).withOpeningHours(VALID_OPENING_HOURS_MBS)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withPriceRange(VALID_PRICE_RANGE_MBS).withRating(VALID_RATING_MBS)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withVisited(VALID_VISITED_MBS).withTags(VALID_TAG_ACTIVITY, VALID_TAG_SIGHTSEEING)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withStartTime(VALID_START_TIME_MBS).withEndTime(VALID_END_TIME_MBS).build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                                            Model expectedModel) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * - AttractionList, filtered attraction list and selected attraction in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList expectedAttractionList \u003d new AttractionList(actualModel.getAttractionList());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        List\u003cAttraction\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredAttractionList());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedAttractionList, actualModel.getAttractionList());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredAttractionList());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the attraction at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code model}\u0027s AttractionList."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static void showAttractionAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredAttractionList().size());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attraction \u003d model.getFilteredAttractionList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        final String[] splitName \u003d attraction.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.updateFilteredAttractionList(new AttractionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertEquals(1, model.getFilteredAttractionList().size());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the itinerary at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * {@code model}\u0027s ItineraryList."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static void showItineraryAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredItineraryList().size());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itinerary \u003d model.getFilteredItineraryList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final String[] splitName \u003d itinerary.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.updateFilteredItineraryList(new ItineraryContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(1, model.getFilteredItineraryList().size());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 37,
      "Robinho98": 36,
      "peter-yeh": 32,
      "-": 85,
      "limkoonkiat": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.NIL);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                CommandResult.ToSwitchItineraryPanels.NIL);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/AddAttractionCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddAttractionCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AddAttractionCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_newAttraction_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction validAttraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.addAttraction(validAttraction);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(new AddAttractionCommand(validAttraction), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                String.format(AddAttractionCommand.MESSAGE_SUCCESS, validAttraction), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_duplicateAttraction_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction attractionInList \u003d model.getAttractionList().getAttractionList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(new AddAttractionCommand(attractionInList), model,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                AddAttractionCommand.MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 6,
      "yuxuanxc": 6,
      "limkoonkiat": 6,
      "-": 29
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/AddAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryAttractionList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AddAttractionCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void constructor_nullAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddAttractionCommand(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_attractionAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        ModelStubAcceptingAttractionAdded modelStub \u003d new ModelStubAcceptingAttractionAdded();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction validAttraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        CommandResult commandResult \u003d new AddAttractionCommand(validAttraction).execute(modelStub);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(String.format(AddAttractionCommand.MESSAGE_SUCCESS, validAttraction),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertEquals(Arrays.asList(validAttraction), modelStub.attractionsAdded);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_duplicateAttraction_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction validAttraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        AddAttractionCommand addAttractionCommand \u003d new AddAttractionCommand(validAttraction);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithAttraction(validAttraction);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                AddAttractionCommand.MESSAGE_DUPLICATE_ATTRACTION, () -\u003e addAttractionCommand.execute(modelStub));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction singaporeZoo \u003d new AttractionBuilder().withName(\"Singapore Zoo\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction nightSafari \u003d new AttractionBuilder().withName(\"Night Safari\").build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        AddAttractionCommand addSingaporeZooCommand \u003d new AddAttractionCommand(singaporeZoo);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        AddAttractionCommand addNightSafariCommand \u003d new AddAttractionCommand(nightSafari);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(addSingaporeZooCommand.equals(addSingaporeZooCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        AddAttractionCommand addSingaporeZooCommandCopy \u003d new AddAttractionCommand(singaporeZoo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(addSingaporeZooCommand.equals(addSingaporeZooCommandCopy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(addSingaporeZooCommand.equals(1));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(addSingaporeZooCommand.equals(null));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different attraction -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(addSingaporeZooCommand.equals(addNightSafariCommand));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setAttractionList(ReadOnlyAttractionList newData) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void deleteAttraction(Attraction target) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void markVisitedAttraction(Attraction target) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setItineraryList(ReadOnlyItineraryList newData) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void deleteItinerary(Itinerary target) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setCurrentItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public ReadOnlyItineraryAttractionList getItineraryAttractionList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public ObservableList\u003cItineraryAttraction\u003e getFilteredItineraryAttractionList() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * A Model stub that contains a single attraction."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private class ModelStubWithAttraction extends ModelStub {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        private final Attraction attraction;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        ModelStubWithAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            requireNonNull(attraction);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            this.attraction \u003d attraction;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            requireNonNull(attraction);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return this.attraction.isSameAttraction(attraction);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * A Model stub that always accept the attraction being added."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private class ModelStubAcceptingAttractionAdded extends ModelStub {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        final ArrayList\u003cAttraction\u003e attractionsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            requireNonNull(attraction);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            return attractionsAdded.stream().anyMatch(attraction::isSameAttraction);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            requireNonNull(attraction);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            attractionsAdded.add(attraction);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new AttractionList();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 52,
      "yuxuanxc": 11,
      "peter-yeh": 10,
      "limkoonkiat": 69,
      "-": 134
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/ClearAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class ClearAttractionCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_emptyTrackPad_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(new ClearAttractionCommand(), model,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                ClearAttractionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_nonEmptyAttractionList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setAttractionList(new AttractionList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(new ClearAttractionCommand(), model,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                ClearAttractionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 5,
      "Robinho98": 1,
      "limkoonkiat": 8,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/DeleteAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAttractionAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteAttractionCommand}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class DeleteAttractionCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction attractionToDelete \u003d model.getFilteredAttractionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteAttractionCommand \u003d new DeleteAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                DeleteAttractionCommand.MESSAGE_DELETE_ATTRACTION_SUCCESS, attractionToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.deleteAttraction(attractionToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(deleteAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAttractionList().size() + 1);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteAttractionCommand \u003d new DeleteAttractionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(deleteAttractionCommand, model, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction attractionToDelete \u003d model.getFilteredAttractionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteAttractionCommand \u003d new DeleteAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                DeleteAttractionCommand.MESSAGE_DELETE_ATTRACTION_SUCCESS, attractionToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.deleteAttraction(attractionToDelete);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        showNoAttraction(expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(deleteAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of attraction list"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAttractionList().getAttractionList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteAttractionCommand \u003d new DeleteAttractionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(deleteAttractionCommand, model, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteFirstCommand \u003d new DeleteAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteSecondCommand \u003d new DeleteAttractionCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand deleteFirstCommandCopy \u003d new DeleteAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different attraction -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private void showNoAttraction(Model model) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.updateFilteredAttractionList(p -\u003e false);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(model.getFilteredAttractionList().isEmpty());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 10,
      "yuxuanxc": 16,
      "limkoonkiat": 17,
      "-": 69
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/EditAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EIFFEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_MBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MBS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAttractionAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.testutil.EditAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code EditAttractionCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class EditAttractionCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction editedAttraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder(editedAttraction).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(EditAttractionCommand.MESSAGE_EDIT_ATTRACTION_SUCCESS, editedAttraction);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.setAttraction(model.getFilteredAttractionList().get(0), editedAttraction);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(editAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Index indexLastAttraction \u003d Index.fromOneBased(model.getFilteredAttractionList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction lastAttraction \u003d model.getFilteredAttractionList().get(indexLastAttraction.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        AttractionBuilder attractionInList \u003d new AttractionBuilder(lastAttraction);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction editedAttraction \u003d attractionInList.withName(VALID_NAME_MBS).withPhone(VALID_PHONE_MBS)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withName(VALID_NAME_MBS)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withPhone(VALID_PHONE_MBS).withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(indexLastAttraction, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(EditAttractionCommand.MESSAGE_EDIT_ATTRACTION_SUCCESS, editedAttraction);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.setAttraction(lastAttraction, editedAttraction);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(editAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new EditAttractionDescriptor());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d EditAttractionCommand.MESSAGE_DUPLICATE_ATTRACTION;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandFailure(editAttractionCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Attraction attractionInFilteredList \u003d model.getFilteredAttractionList()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction editedAttraction \u003d new AttractionBuilder(attractionInFilteredList).withName(VALID_NAME_MBS).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new EditAttractionDescriptorBuilder().withName(VALID_NAME_MBS).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(EditAttractionCommand.MESSAGE_EDIT_ATTRACTION_SUCCESS, editedAttraction);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()), model.getItineraryList(),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.setAttraction(model.getFilteredAttractionList().get(0), editedAttraction);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(editAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_duplicateAttractionUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction firstAttraction \u003d model.getFilteredAttractionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder(firstAttraction).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(editAttractionCommand, model, EditAttractionCommand.MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_duplicateAttractionFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // edit attraction in filtered list into a duplicate in AttractionList"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction attractionInList \u003d model.getAttractionList()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .getAttractionList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new EditAttractionDescriptorBuilder(attractionInList).build());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(editAttractionCommand, model, EditAttractionCommand.MESSAGE_DUPLICATE_ATTRACTION);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_invalidAttractionIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAttractionList().size() + 1);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withName(VALID_NAME_MBS).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(editAttractionCommand, model, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * but smaller than size of AttractionList list"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_invalidAttractionIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of the AttractionList list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAttractionList().getAttractionList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand editAttractionCommand \u003d new EditAttractionCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new EditAttractionDescriptorBuilder().withName(VALID_NAME_MBS).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandFailure(editAttractionCommand, model, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        final EditAttractionCommand standardCommand \u003d new EditAttractionCommand(INDEX_FIRST, DESC_EIFFEL);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditAttractionDescriptor copyDescriptor \u003d new EditAttractionDescriptor(DESC_EIFFEL);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand commandWithSameValues \u003d new EditAttractionCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearAttractionCommand()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAttractionCommand(INDEX_SECOND, DESC_EIFFEL)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(standardCommand.equals(new EditAttractionCommand(INDEX_FIRST, DESC_MBS)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 30,
      "yuxuanxc": 28,
      "limkoonkiat": 34,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/EditAttractionDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EIFFEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_MBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MBS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MBS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_MBS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_MBS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_MBS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_MBS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.EditAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class EditAttractionDescriptorTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditAttractionDescriptor descriptorWithSameValues \u003d new EditAttractionDescriptor(DESC_EIFFEL);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(DESC_EIFFEL.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(DESC_EIFFEL.equals(DESC_EIFFEL));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(5));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(DESC_MBS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditAttractionDescriptor editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withName(VALID_NAME_MBS).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withPhone(VALID_PHONE_MBS).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withEmail(VALID_EMAIL_MBS).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withAddress(VALID_ADDRESS_MBS).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withLocation(VALID_LOCATION_MBS).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withDescription(VALID_DESCRIPTION_MBS).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different opening hours -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withOpeningHours(VALID_OPENING_HOURS_MBS).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different price range -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withPriceRange(VALID_PRICE_RANGE_MBS).build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withRating(VALID_RATING_MBS).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different visited -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withVisited(VALID_VISITED_MBS).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedEiffel \u003d new EditAttractionDescriptorBuilder(DESC_EIFFEL).withTags(VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_EIFFEL.equals(editedEiffel));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 44,
      "yuxuanxc": 23,
      "limkoonkiat": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/FindAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ATTRACTIONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.BOTANIC_GARDENS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.ORCHARD_ROAD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.RIVER_SAFARI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.SINGAPORE_ZOO;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindAttractionCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class FindAttractionCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand findFirstCommand \u003d new FindAttractionCommand(firstPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand findSecondCommand \u003d new FindAttractionCommand(secondPredicate);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand findFirstCommandCopy \u003d new FindAttractionCommand(firstPredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different attraction -\u003e returns false"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_zeroKeywords_noAttractionFound() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ATTRACTIONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand command \u003d new FindAttractionCommand(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.updateFilteredAttractionList(predicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredAttractionList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_multipleKeywords_multipleAttractionsFound() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ATTRACTIONS_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d preparePredicate(\"Zoo Orchard Gardens\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand command \u003d new FindAttractionCommand(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.updateFilteredAttractionList(predicate);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(Arrays.asList(SINGAPORE_ZOO, RIVER_SAFARI, ORCHARD_ROAD, BOTANIC_GARDENS),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                model.getFilteredAttractionList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses {@code userInput} into a {@code AttractionContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private AttractionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new AttractionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 8,
      "yuxuanxc": 10,
      "peter-yeh": 4,
      "limkoonkiat": 16,
      "-": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/ListAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAttractionAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListAttractionCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class ListAttractionCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(new ListAttractionCommand(), model, ListAttractionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertCommandSuccess(new ListAttractionCommand(), model, ListAttractionCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 1,
      "yuxuanxc": 4,
      "limkoonkiat": 7,
      "-": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/attraction/MarkVisitedAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showAttractionAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code MarkVisitedAttractionCommand}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class MarkVisitedAttractionCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attractionToMarkVisited \u003d model.getFilteredAttractionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedAttractionCommand \u003d new MarkVisitedAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction markedVisitedAttraction \u003d new Attraction(attractionToMarkVisited.getName(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getPhone(), attractionToMarkVisited.getEmail(),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getAddress(), attractionToMarkVisited.getDescription(),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getLocation(), attractionToMarkVisited.getOpeningHours(),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getPriceRange(), attractionToMarkVisited.getRating(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new Visited(\"TRUE\"), attractionToMarkVisited.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                MarkVisitedAttractionCommand.MESSAGE_MARKVISITED_ATTRACTION_SUCCESS, markedVisitedAttraction);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.setAttraction(attractionToMarkVisited, markedVisitedAttraction);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertCommandSuccess(markVisitedAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredAttractionList().size() + 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedAttractionCommand \u003d new MarkVisitedAttractionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertCommandFailure(markVisitedAttractionCommand, model, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attractionToMarkVisited \u003d model.getFilteredAttractionList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedAttractionCommand \u003d new MarkVisitedAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction markedVisitedAttraction \u003d new Attraction(attractionToMarkVisited.getName(),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getPhone(), attractionToMarkVisited.getEmail(),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getAddress(), attractionToMarkVisited.getDescription(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getLocation(), attractionToMarkVisited.getOpeningHours(),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                attractionToMarkVisited.getPriceRange(), attractionToMarkVisited.getRating(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new Visited(\"TRUE\"), attractionToMarkVisited.getTags());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                MarkVisitedAttractionCommand.MESSAGE_MARKVISITED_ATTRACTION_SUCCESS, markedVisitedAttraction);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedModel.setAttraction(attractionToMarkVisited, markedVisitedAttraction);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertCommandSuccess(markVisitedAttractionCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        showAttractionAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of trackPad list"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAttractionList().getAttractionList().size());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedAttractionCommand \u003d new MarkVisitedAttractionCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertCommandFailure(markVisitedAttractionCommand, model, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedFirstCommand \u003d new MarkVisitedAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedSecondCommand \u003d new MarkVisitedAttractionCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(markVisitedFirstCommand.equals(markVisitedFirstCommand));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        MarkVisitedAttractionCommand markVisitedFirstCommandCopy \u003d new MarkVisitedAttractionCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(markVisitedFirstCommand.equals(markVisitedFirstCommandCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(markVisitedFirstCommand.equals(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(markVisitedFirstCommand.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different attraction -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(markVisitedFirstCommand.equals(markVisitedSecondCommand));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private void showNoAttraction(Model model) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        model.updateFilteredAttractionList(p -\u003e false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(model.getFilteredAttractionList().isEmpty());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 130,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/AddItineraryCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.PARIS_TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddItineraryCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AddItineraryCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_newItinerary_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary validItinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.addItinerary(validItinerary);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(new AddItineraryCommand(validItinerary), model,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                String.format(AddItineraryCommand.MESSAGE_SUCCESS, validItinerary), expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_duplicateItinerary_throwsCommandException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryInList \u003d model.getItineraryList().getItineraryList().get(0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandFailure(new AddItineraryCommand(itineraryInList), model,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                AddItineraryCommand.MESSAGE_DUPLICATE_ITINERARY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_hasCurrentItineraryBefore_noCurrentItineraryAfter() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Follows execute_newItinerary_success() except with current itinerary"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary validItinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.addItinerary(validItinerary);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setCurrentItinerary(PARIS_TRIP);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(new AddItineraryCommand(validItinerary), model,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                String.format(AddItineraryCommand.MESSAGE_SUCCESS, validItinerary), expectedModel);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/AddItineraryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryAttractionList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class AddItineraryCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_nullItinerary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddItineraryCommand(null));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_itineraryAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubAcceptingItineraryAdded modelStub \u003d new ModelStubAcceptingItineraryAdded();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary validItinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        CommandResult commandResult \u003d new AddItineraryCommand(validItinerary).execute(modelStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(String.format(AddItineraryCommand.MESSAGE_SUCCESS, validItinerary),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(Arrays.asList(validItinerary), modelStub.itinerariesAdded);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_duplicateItinerary_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary validItinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AddItineraryCommand addItineraryCommand \u003d new AddItineraryCommand(validItinerary);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithItinerary(validItinerary);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                AddItineraryCommand.MESSAGE_DUPLICATE_ITINERARY, () -\u003e addItineraryCommand.execute(modelStub));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary singaporeZoos \u003d new ItineraryBuilder().withName(\"Singapore Zoos\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary parisTrip \u003d new ItineraryBuilder().withName(\"Paris Trip\").build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AddItineraryCommand addSingaporeZoosCommand \u003d new AddItineraryCommand(singaporeZoos);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AddItineraryCommand addParisTripCommand \u003d new AddItineraryCommand(parisTrip);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(addSingaporeZoosCommand.equals(addSingaporeZoosCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AddItineraryCommand addSingaporeZooCommandCopy \u003d new AddItineraryCommand(singaporeZoos);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(addSingaporeZoosCommand.equals(addSingaporeZooCommandCopy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(addSingaporeZoosCommand.equals(1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(addSingaporeZoosCommand.equals(null));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different itinerary -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(addSingaporeZoosCommand.equals(addParisTripCommand));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setAttractionList(ReadOnlyAttractionList newData) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void deleteAttraction(Attraction target) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void markVisitedAttraction(Attraction target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setItineraryList(ReadOnlyItineraryList newData) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void deleteItinerary(Itinerary target) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setCurrentItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public ReadOnlyItineraryAttractionList getItineraryAttractionList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public ObservableList\u003cItineraryAttraction\u003e getFilteredItineraryAttractionList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * A Model stub that contains a single itinerary."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private class ModelStubWithItinerary extends AddItineraryCommandTest.ModelStub {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        private final Itinerary itinerary;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ModelStubWithItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            requireNonNull(itinerary);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            requireNonNull(itinerary);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return this.itinerary.isSameItinerary(itinerary);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * A Model stub that always accept the itinerary being added."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private class ModelStubAcceptingItineraryAdded extends AddItineraryCommandTest.ModelStub {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final ArrayList\u003cItinerary\u003e itinerariesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            requireNonNull(itinerary);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return itinerariesAdded.stream().anyMatch(itinerary::isSameItinerary);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            requireNonNull(itinerary);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            itinerariesAdded.add(itinerary);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            return new ItineraryList();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 12,
      "peter-yeh": 7,
      "limkoonkiat": 255
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/ClearItineraryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.PARIS_TRIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ClearItineraryCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_emptyTrackPad_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(new ClearItineraryCommand(), model, ClearItineraryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_nonEmptyItineraryList_success() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setItineraryList(new ItineraryList());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(new ClearItineraryCommand(), model, ClearItineraryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_hasCurrentItineraryBefore_noCurrentItineraryAfter() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Follows execute_nonEmptyItineraryList_success() except with current itinerary"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setCurrentItinerary(PARIS_TRIP);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setItineraryList(new ItineraryList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(new ClearItineraryCommand(), model, ClearItineraryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/DeleteItineraryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showItineraryAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.JAPAN_TRIP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteItineraryCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DeleteItineraryCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryToDelete \u003d model.getFilteredItineraryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteItineraryCommand \u003d new DeleteItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteItineraryCommand.MESSAGE_DELETE_ITINERARY_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                itineraryToDelete);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.deleteItinerary(itineraryToDelete);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(deleteItineraryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredItineraryList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteItineraryCommand \u003d new DeleteItineraryCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandFailure(deleteItineraryCommand, model, Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showItineraryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryToDelete \u003d model.getFilteredItineraryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteItineraryCommand \u003d new DeleteItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteItineraryCommand.MESSAGE_DELETE_ITINERARY_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                itineraryToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.deleteItinerary(itineraryToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showNoItinerary(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(deleteItineraryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showItineraryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of itinerary list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getItineraryList().getItineraryList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteItineraryCommand \u003d new DeleteItineraryCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandFailure(deleteItineraryCommand, model, Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_hasCurrentItineraryBefore_noCurrentItineraryAfter() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Follows execute_validIndexUnfilteredList_success() except with current itinerary"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryToDelete \u003d model.getFilteredItineraryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteItineraryCommand \u003d new DeleteItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteItineraryCommand.MESSAGE_DELETE_ITINERARY_SUCCESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                itineraryToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.deleteItinerary(itineraryToDelete);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setCurrentItinerary(JAPAN_TRIP);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(deleteItineraryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteFirstCommand \u003d new DeleteItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteSecondCommand \u003d new DeleteItineraryCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand deleteFirstCommandCopy \u003d new DeleteItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different itinerary -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no itinerary."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private void showNoItinerary(Model model) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.updateFilteredItineraryList(p -\u003e false);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(model.getFilteredItineraryList().isEmpty());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/EditItineraryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_PARIS_TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PARIS_TRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_PARIS_TRIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showItineraryAtIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.PARIS_TRIP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand.EditItineraryDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.EditItineraryDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code EditItineraryCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class EditItineraryCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryToEdit \u003d model.getFilteredItineraryList().get(0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary editedItinerary \u003d new ItineraryBuilder().withDays(itineraryToEdit.getDays()).build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor descriptor \u003d new EditItineraryDescriptorBuilder(editedItinerary).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand editItineraryCommand \u003d new EditItineraryCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(EditItineraryCommand.MESSAGE_EDIT_ITINERARY_SUCCESS, editedItinerary);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setItinerary(itineraryToEdit, editedItinerary);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(editItineraryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index indexLastItinerary \u003d Index.fromOneBased(model.getFilteredItineraryList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary lastItinerary \u003d model.getFilteredItineraryList().get(indexLastItinerary.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryBuilder itineraryInList \u003d new ItineraryBuilder(lastItinerary);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary editedItinerary \u003d itineraryInList.withName(VALID_NAME_PARIS_TRIP)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withStartDate(VALID_START_DATE_PARIS_TRIP)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor descriptor \u003d new EditItineraryDescriptorBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withName(VALID_NAME_PARIS_TRIP)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withStartDate(VALID_START_DATE_PARIS_TRIP)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand editItineraryCommand \u003d new EditItineraryCommand(indexLastItinerary, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(EditItineraryCommand.MESSAGE_EDIT_ITINERARY_SUCCESS, editedItinerary);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setItinerary(lastItinerary, editedItinerary);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(editItineraryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_failure() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand editItineraryCommand \u003d new EditItineraryCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new EditItineraryDescriptor());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d EditItineraryCommand.MESSAGE_DUPLICATE_ITINERARY;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandFailure(editItineraryCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showItineraryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryInFilteredList \u003d model.getFilteredItineraryList()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary editedItinerary \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryBuilder(itineraryInFilteredList).withName(VALID_NAME_PARIS_TRIP).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand editItineraryCommand \u003d new EditItineraryCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new EditItineraryDescriptorBuilder().withName(VALID_NAME_PARIS_TRIP).build());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(EditItineraryCommand.MESSAGE_EDIT_ITINERARY_SUCCESS, editedItinerary);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setItinerary(model.getFilteredItineraryList().get(0), editedItinerary);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(editItineraryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_hasCurrentItineraryBefore_noCurrentItineraryAfter() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Follows execute_allFieldsSpecifiedUnfilteredList_success() except with current itinerary"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryToEdit \u003d model.getFilteredItineraryList().get(0);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary editedItinerary \u003d new ItineraryBuilder().withDays(itineraryToEdit.getDays()).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor descriptor \u003d new EditItineraryDescriptorBuilder(editedItinerary).build();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand editItineraryCommand \u003d new EditItineraryCommand(INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(EditItineraryCommand.MESSAGE_EDIT_ITINERARY_SUCCESS, editedItinerary);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setItinerary(itineraryToEdit, editedItinerary);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setCurrentItinerary(PARIS_TRIP);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(editItineraryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_duplicateItineraryUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary firstItinerary \u003d model.getFilteredItineraryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor descriptor \u003d new EditItineraryDescriptorBuilder(firstItinerary).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand editItineraryCommand \u003d new EditItineraryCommand(INDEX_SECOND, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandFailure(editItineraryCommand, model, EditItineraryCommand.MESSAGE_DUPLICATE_ITINERARY);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_duplicateItineraryFilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showItineraryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // edit itinerary in filtered list into a duplicate in ItineraryList"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itineraryInList \u003d model.getItineraryList()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .getItineraryList().get(INDEX_SECOND.getZeroBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand editItineraryCommand \u003d new EditItineraryCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new EditItineraryDescriptorBuilder(itineraryInList).build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandFailure(editItineraryCommand, model, EditItineraryCommand.MESSAGE_DUPLICATE_ITINERARY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_invalidItineraryIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredItineraryList().size() + 1);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor descriptor \u003d new EditItineraryDescriptorBuilder()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withName(VALID_NAME_PARIS_TRIP).build();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand editItineraryCommand \u003d new EditItineraryCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandFailure(editItineraryCommand, model, Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * but smaller than size of ItineraryList list"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_invalidItineraryIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showItineraryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of the ItineraryList list"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getItineraryList().getItineraryList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand editItineraryCommand \u003d new EditItineraryCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new EditItineraryDescriptorBuilder().withName(VALID_NAME_PARIS_TRIP).build());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandFailure(editItineraryCommand, model, Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        final EditItineraryCommand standardCommand \u003d new EditItineraryCommand(INDEX_FIRST, DESC_PARIS_TRIP);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor copyDescriptor \u003d new EditItineraryDescriptor(DESC_PARIS_TRIP);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand commandWithSameValues \u003d new EditItineraryCommand(INDEX_FIRST, copyDescriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearItineraryCommand()));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(standardCommand.equals(new EditItineraryCommand(INDEX_SECOND, DESC_PARIS_TRIP)));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(standardCommand.equals(new EditItineraryCommand(INDEX_FIRST, DESC_JAPAN_TRIP)));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 202
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/EditItineraryDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_PARIS_TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_JAPAN_TRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JAPAN_TRIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_JAPAN_TRIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JAPAN_TRIP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_JAPAN_TRIP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand.EditItineraryDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.EditItineraryDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class EditItineraryDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor descriptorWithSameValues \u003d new EditItineraryDescriptor(DESC_PARIS_TRIP);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(DESC_PARIS_TRIP.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(DESC_PARIS_TRIP.equals(DESC_PARIS_TRIP));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_PARIS_TRIP.equals(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_PARIS_TRIP.equals(5));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_PARIS_TRIP.equals(DESC_JAPAN_TRIP));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor editedParisTrip \u003d new EditItineraryDescriptorBuilder(DESC_PARIS_TRIP)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withName(VALID_NAME_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_PARIS_TRIP.equals(editedParisTrip));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedParisTrip \u003d new EditItineraryDescriptorBuilder(DESC_PARIS_TRIP)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_PARIS_TRIP.equals(editedParisTrip));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedParisTrip \u003d new EditItineraryDescriptorBuilder(DESC_PARIS_TRIP)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withStartDate(VALID_START_DATE_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_PARIS_TRIP.equals(editedParisTrip));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different end date -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedParisTrip \u003d new EditItineraryDescriptorBuilder(DESC_PARIS_TRIP)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withEndDate(VALID_END_DATE_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_PARIS_TRIP.equals(editedParisTrip));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different budget -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedParisTrip \u003d new EditItineraryDescriptorBuilder(DESC_PARIS_TRIP)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withBudget(VALID_BUDGET_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(DESC_PARIS_TRIP.equals(editedParisTrip));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/FindItineraryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ITINERARIES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.JAPAN_TRIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.PARIS_TRIP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.SG_ZOOS_TOUR;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindItineraryCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class FindItineraryCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        FindItineraryCommand findFirstCommand \u003d new FindItineraryCommand(firstPredicate);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        FindItineraryCommand findSecondCommand \u003d new FindItineraryCommand(secondPredicate);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        FindItineraryCommand findFirstCommandCopy \u003d new FindItineraryCommand(firstPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different itinerary -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_zeroKeywords_noItineraryFound() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ITINERARIES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        FindItineraryCommand command \u003d new FindItineraryCommand(predicate);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.updateFilteredItineraryList(predicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredItineraryList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_multipleKeywords_multipleItinerariesFound() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ITINERARIES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate predicate \u003d preparePredicate(\"Zoo paris\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        FindItineraryCommand command \u003d new FindItineraryCommand(predicate);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.updateFilteredItineraryList(predicate);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(Arrays.asList(SG_ZOOS_TOUR, PARIS_TRIP),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                model.getFilteredItineraryList());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_hasCurrentItineraryBefore_noCurrentItineraryAfter() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Follows execute_multipleKeywords_multipleItinerariesFound() except with current itinerary"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ITINERARIES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate predicate \u003d preparePredicate(\"Zoo paris\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        FindItineraryCommand command \u003d new FindItineraryCommand(predicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.updateFilteredItineraryList(predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setCurrentItinerary(JAPAN_TRIP);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Parses {@code userInput} into a {@code ItineraryContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private ItineraryContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new ItineraryContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/ListItineraryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showItineraryAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.PARIS_TRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListItineraryCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class ListItineraryCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(new ListItineraryCommand(), model, ListItineraryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        showItineraryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(new ListItineraryCommand(), model, ListItineraryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void execute_hasCurrentItineraryBefore_noCurrentItineraryAfter() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        model.setCurrentItinerary(PARIS_TRIP);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedModel.setCurrentItinerary(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertCommandSuccess(new ListItineraryCommand(), model, ListItineraryCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itinerary/SelectItineraryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.commands.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showItineraryAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * {@code SelectItineraryCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class SelectItineraryCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Itinerary itineraryToSelect \u003d model.getFilteredItineraryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        SelectItineraryCommand selectItineraryCommand \u003d new SelectItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        String expectedMessage \u003d String.format(SelectItineraryCommand.MESSAGE_SELECT_ITINERARY_SUCCESS,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            itineraryToSelect);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        expectedModel.setCurrentItinerary(itineraryToSelect);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertCommandSuccess(selectItineraryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredItineraryList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        SelectItineraryCommand selectItineraryCommand \u003d new SelectItineraryCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertCommandFailure(selectItineraryCommand, model, Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        showItineraryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Itinerary itineraryToSelect \u003d model.getFilteredItineraryList().get(INDEX_FIRST.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        SelectItineraryCommand selectItineraryCommand \u003d new SelectItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        String expectedMessage \u003d String.format(SelectItineraryCommand.MESSAGE_SELECT_ITINERARY_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            itineraryToSelect);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        showItineraryAtIndex(expectedModel, INDEX_FIRST);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        expectedModel.setCurrentItinerary(itineraryToSelect);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertCommandSuccess(selectItineraryCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        showItineraryAtIndex(model, INDEX_FIRST);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of trackPad list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getItineraryList().getItineraryList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        SelectItineraryCommand selectItineraryCommand \u003d new SelectItineraryCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertCommandFailure(selectItineraryCommand, model, Messages.MESSAGE_INVALID_ITINERARY_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        SelectItineraryCommand selectFirstCommand \u003d new SelectItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        SelectItineraryCommand selectSecondCommand \u003d new SelectItineraryCommand(INDEX_SECOND);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        SelectItineraryCommand selectFirstCommandCopy \u003d new SelectItineraryCommand(INDEX_FIRST);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different itinerary -\u003e returns false"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no itinerary."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private void showNoItinerary(Model model) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        model.updateFilteredItineraryList(p -\u003e false);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(model.getFilteredItineraryList().isEmpty());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 113
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itineraryattraction/AddItineraryAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.commands.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ATTRACTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITINERARY_DAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ITINERARY_NOT_SELECTED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TIMING_CLASH;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryAttractionList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.AttractionListBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.ItineraryAttractionBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class AddItineraryAttractionCommandTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // A itinerary time instance for testing exceptions"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // does not throw error for same start and end time as this was checked in the parser"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final ItineraryTime timeObject \u003d new ItineraryTime(\"1000\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void constructor_nullItineraryAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddItineraryAttractionCommand(null, null, null, null));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_itineraryNotSelected_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubNoItinerarySelected model \u003d new ModelStubNoItinerarySelected();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand \u003d new AddItineraryAttractionCommand("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, timeObject, timeObject, INDEX_FIRST);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_ITINERARY_NOT_SELECTED, () -\u003e addIaCommand.execute(model));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_invalidAttractionIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithEmptyAttractionInFilteredList model \u003d new ModelStubWithEmptyAttractionInFilteredList();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand \u003d new AddItineraryAttractionCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, timeObject, timeObject, INDEX_FIRST);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX, ()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e addIaCommand.execute(model)); // test on empty filtered list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItineraryAttraction model2 \u003d new ModelStubWithItineraryAttraction(new ItineraryBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withItineraryAttraction(new ItineraryAttractionBuilder().withAttraction(new AttractionBuilder()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .build()).build(), INDEX_FIRST).build());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand2 \u003d new AddItineraryAttractionCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_SECOND, timeObject, timeObject, INDEX_FIRST);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX, ()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e addIaCommand2.execute(model2)); // test on filtered list with 1 element"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_timingClash_throwsCommandException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // start time of new itineraryAttraction conflicts with end time of existing itineraryAttraction"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction ia \u003d new ItineraryAttractionBuilder().withStartTime(\"0900\").withEndTime(\"1100\").build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(ia, INDEX_THIRD).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItineraryAttraction model \u003d new ModelStubWithItineraryAttraction(itinerary);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand \u003d new AddItineraryAttractionCommand("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, new ItineraryTime(\"1000\"), new ItineraryTime(\"1300\"), INDEX_THIRD);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_TIMING_CLASH, ()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e addIaCommand.execute(model));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_timingClash2_throwsCommandException() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // end time of new itineraryAttraction conflicts with start time of existing itineraryAttraction"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction ia \u003d new ItineraryAttractionBuilder().withStartTime(\"0900\").withEndTime(\"1100\").build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(ia, INDEX_THIRD).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItineraryAttraction model \u003d new ModelStubWithItineraryAttraction(itinerary);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand \u003d new AddItineraryAttractionCommand("
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, new ItineraryTime(\"0600\"), new ItineraryTime(\"1000\"), INDEX_THIRD);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_TIMING_CLASH, ()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e addIaCommand.execute(model));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_invalidDay_throwsCommandException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItineraryAttraction model \u003d new ModelStubWithItineraryAttraction(itinerary);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand \u003d new AddItineraryAttractionCommand(INDEX_FIRST, timeObject,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                timeObject, Index.fromZeroBased(4));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_ITINERARY_DAY, ()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e addIaCommand.execute(model));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_duplicateItineraryAttraction_throwsCommandException() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItineraryAttraction model \u003d new ModelStubWithItineraryAttraction(new ItineraryBuilder()"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withItineraryAttraction(new ItineraryAttractionBuilder().withAttraction(new AttractionBuilder()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .build()).build(), INDEX_FIRST).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction expectedIa \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withAttraction(new AttractionBuilder().build()).build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand \u003d new AddItineraryAttractionCommand("
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, expectedIa.getStartTime(), expectedIa.getEndTime(), INDEX_FIRST);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_ATTRACTION, ()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e addIaCommand.execute(model));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // test itinerary attraction command equals"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime startTime \u003d new ItineraryTime(\"1200\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryTime endTime \u003d new ItineraryTime(\"1300\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index index \u003d Index.fromOneBased(9);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index day \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand \u003d new AddItineraryAttractionCommand(index, startTime, endTime, day);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand addIaCommand2 \u003d new AddItineraryAttractionCommand(index, startTime, endTime, day);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(addIaCommand, addIaCommand2);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // test itinerary attraction command not equal index"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        index \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        addIaCommand2 \u003d new AddItineraryAttractionCommand(index, startTime, endTime, day);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(addIaCommand, addIaCommand2);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // test itinerary attraction command not equal day, set addIaCommand index to 1"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        day \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        addIaCommand \u003d new AddItineraryAttractionCommand(index, startTime, endTime, day);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(addIaCommand, addIaCommand2);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        startTime \u003d new ItineraryTime(\"1159\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        addIaCommand \u003d new AddItineraryAttractionCommand(index, startTime, endTime, day);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(addIaCommand, addIaCommand2);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // test itinerary attraction command not equal end time"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        endTime \u003d new ItineraryTime(\"1359\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        addIaCommand2 \u003d new AddItineraryAttractionCommand(index, startTime, endTime, day);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(addIaCommand, addIaCommand2);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // tests itinerary attraction class"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryAttraction ia1 \u003d new ItineraryAttractionBuilder().withStartTime(\"1200\").build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryAttraction ia2 \u003d new ItineraryAttractionBuilder().withStartTime(\"1200\").build();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(ia1, ia1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(ia2, ia2);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(ia1, ia2);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(ia1, 1);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(ia1, null);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_attractionAccepted_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItineraryAttraction model \u003d new ModelStubWithItineraryAttraction(new ItineraryBuilder().build());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction validIa \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        CommandResult commandResult \u003d new AddItineraryAttractionCommand("
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, validIa.getStartTime(), validIa.getEndTime(), INDEX_FIRST).execute(model);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(String.format(AddItineraryAttractionCommand.MESSAGE_ADD_ATTRACTION_SUCCESS, validIa),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(Arrays.asList(validIa), model.getDay(INDEX_FIRST).getItineraryAttractions());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A default model stub that throws exception for all method calls."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttractionList(ReadOnlyAttractionList newData) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void deleteAttraction(Attraction target) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public void markVisitedAttraction(Attraction target) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItineraryList(ReadOnlyItineraryList newData) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void deleteItinerary(Itinerary target) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setCurrentItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public ReadOnlyItineraryAttractionList getItineraryAttractionList() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public ObservableList\u003cItineraryAttraction\u003e getFilteredItineraryAttractionList() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A Model stub that returns no itinerary selected."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStubNoItinerarySelected extends ModelStub {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A Model stub that contains a empty filtered list of Attraction type."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * filteredAttractions does not contain anything."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStubWithEmptyAttractionInFilteredList extends ModelStub {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private final FilteredList\u003cAttraction\u003e filteredAttractions \u003d new FilteredList\u003c\u003e("
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new AttractionListBuilder().build().getAttractionList());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return filteredAttractions;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A Model stub that contains 1 Itinerary and 1 ItineraryAttraction in Day 1 with non null filteredAttractions."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStubWithItineraryAttraction extends ModelStub {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private final Itinerary itinerary;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private final FilteredList\u003cAttraction\u003e filteredAttractions;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ModelStubWithItineraryAttraction(Itinerary itinerary) {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            this.filteredAttractions \u003d new FilteredList\u003c\u003e(new AttractionListBuilder()"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    .withAttraction(new AttractionBuilder().build()).build().getAttractionList());"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return filteredAttractions;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return itinerary;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private Day getDay(Index index) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return itinerary.getDay(index);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 16,
      "peter-yeh": 387,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itineraryattraction/DeleteItineraryAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.commands.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITINERARY_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ITINERARY_NOT_SELECTED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryAttractionList;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.ItineraryAttractionBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * {@code DeleteAttractionCommand}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class DeleteItineraryAttractionCommandTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_validIndexValidDay_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand delIaCommand \u003d new DeleteItineraryAttractionCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction itineraryAttraction \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(itineraryAttraction, INDEX_FIRST).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        model.setCurrentItinerary(itinerary);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteItineraryAttractionCommand.MESSAGE_DELETE_ATTRACTION_SUCCESS,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                itineraryAttraction);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary expectedItinerary \u003d new ItineraryBuilder().withItineraryAttraction("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new ItineraryAttractionBuilder().build(), INDEX_FIRST).build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedModel.setCurrentItinerary(expectedItinerary);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedModel.getCurrentItinerary().deleteItineraryAttraction(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertCommandSuccess(delIaCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_commandFailure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand delIaCommand \u003d new DeleteItineraryAttractionCommand(INDEX_SECOND, INDEX_FIRST);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction itineraryAttraction \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(itineraryAttraction, INDEX_FIRST).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        model.setCurrentItinerary(itinerary);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String expectedMessage \u003d Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAttractionList(), model.getItineraryList(),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new UserPrefs());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary expectedItinerary \u003d new ItineraryBuilder().withItineraryAttraction("
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new ItineraryAttractionBuilder().build(), INDEX_FIRST).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedModel.setCurrentItinerary(expectedItinerary);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedModel.getCurrentItinerary().deleteItineraryAttraction(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertCommandFailure(delIaCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        delIaCommand \u003d new DeleteItineraryAttractionCommand(INDEX_SECOND, INDEX_THIRD);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        itineraryAttraction \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        itinerary \u003d new ItineraryBuilder().withItineraryAttraction(itineraryAttraction, INDEX_FIRST).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        model.setCurrentItinerary(itinerary);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedMessage \u003d Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertCommandFailure(delIaCommand, model, expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_invalidAttractionIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand delIaCommand \u003d new DeleteItineraryAttractionCommand(INDEX_THIRD, INDEX_FIRST);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItinerary modelWithItinerary \u003d new ModelStubWithItinerary(new ItineraryBuilder().build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX, () -\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                delIaCommand.execute(modelWithItinerary));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_invalidDay_throwsCommandException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItinerary model \u003d new ModelStubWithItinerary(itinerary);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand delIaCommand \u003d new DeleteItineraryAttractionCommand(INDEX_FIRST,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Index.fromZeroBased(4));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_ITINERARY_DAY, ()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e delIaCommand.execute(model));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_itineraryNotSelected_throwsCommandException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubNoItinerarySelected model \u003d new ModelStubNoItinerarySelected();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand delIaCommand \u003d new DeleteItineraryAttractionCommand(INDEX_FIRST, INDEX_FIRST);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_ITINERARY_NOT_SELECTED, () -\u003e delIaCommand.execute(model));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand deleteFirstCommand;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand deleteSecondCommand;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        deleteFirstCommand \u003d new DeleteItineraryAttractionCommand(INDEX_FIRST, INDEX_THIRD);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(deleteFirstCommand, deleteFirstCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // diff index -\u003e return false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        deleteSecondCommand \u003d new DeleteItineraryAttractionCommand(INDEX_SECOND, INDEX_THIRD);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, deleteSecondCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // diff day visiting -\u003e return false"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        deleteFirstCommand \u003d new DeleteItineraryAttractionCommand(INDEX_SECOND, INDEX_FIRST);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, deleteSecondCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertNotEquals(deleteFirstCommand, null);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A default model stub that throws exception for all method calls."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttractionList(ReadOnlyAttractionList newData) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void deleteAttraction(Attraction target) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void markVisitedAttraction(Attraction target) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItineraryList(ReadOnlyItineraryList newData) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void deleteItinerary(Itinerary target) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setCurrentItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public ReadOnlyItineraryAttractionList getItineraryAttractionList() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public ObservableList\u003cItineraryAttraction\u003e getFilteredItineraryAttractionList() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A Model stub that contains a itinerary in itineraryList."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStubWithItinerary extends ModelStub {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private final Itinerary itinerary;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ModelStubWithItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return this.itinerary;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A Model stub that returns no itinerary selected."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStubNoItinerarySelected extends ModelStub {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 11,
      "peter-yeh": 309
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itineraryattraction/EditItineraryAttractionCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.commands.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_DUPLICATE_ATTRACTION;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_ITINERARY_DAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_START_TIME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_ITINERARY_NOT_SELECTED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_TIMING_CLASH;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand.EditItineraryAttractionDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryAttractionList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.EditItineraryAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.ItineraryAttractionBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class EditItineraryAttractionCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final EditItineraryAttractionDescriptor descriptor \u003d new EditItineraryAttractionDescriptorBuilder().build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_itineraryNotSelected_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubNoItinerarySelected model \u003d new ModelStubNoItinerarySelected();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand editIaCommand \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_ITINERARY_NOT_SELECTED, () -\u003e editIaCommand.execute(model));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_invalidDay_throwsCommandException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItinerarySelected model \u003d new ModelStubWithItinerarySelected(itinerary);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand editIaCommand \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, Index.fromZeroBased(4), descriptor);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_ITINERARY_DAY, ()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e editIaCommand.execute(model));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_invalidIaIndex_throwsCommandException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new ItineraryAttractionBuilder().build(), INDEX_FIRST).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItinerarySelected model \u003d new ModelStubWithItinerarySelected(itinerary);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand editIaCommand \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_SECOND, INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // tests with 1 ItineraryAttraction in a day"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX, ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e editIaCommand.execute(model));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary2 \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItinerarySelected model2 \u003d new ModelStubWithItinerarySelected(itinerary2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand editIaCommand2 \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // tests with no ItineraryAttraction in a day"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_ATTRACTION_DISPLAYED_INDEX, ()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e editIaCommand2.execute(model2));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_duplicateItineraryAttraction_throwsCommandException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction attraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction itineraryAttraction \u003d new ItineraryAttractionBuilder().withAttraction(attraction).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(itineraryAttraction, INDEX_FIRST).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItinerarySelected model \u003d new ModelStubWithItinerarySelected(itinerary);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand editIaCommand \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, INDEX_FIRST, descriptor);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_DUPLICATE_ATTRACTION, ()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e editIaCommand.execute(model));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_invalidStartTime_throwsCommandException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // same start time and end time"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction ia \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(ia, INDEX_THIRD).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItinerarySelected model \u003d new ModelStubWithItinerarySelected(itinerary);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor descriptor \u003d new EditItineraryAttractionDescriptorBuilder()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withStartTime(\"1000\").withEndTime(\"1000\").build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand editIaCommand \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, INDEX_THIRD, descriptor);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_START_TIME, ()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e editIaCommand.execute(model));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_invalidStartTime2_throwsCommandException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // start time later than end time"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction ia \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(ia, INDEX_THIRD).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItinerarySelected model \u003d new ModelStubWithItinerarySelected(itinerary);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor descriptor \u003d new EditItineraryAttractionDescriptorBuilder()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withStartTime(\"1001\").withEndTime(\"1000\").build();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand editIaCommand \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, INDEX_THIRD, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_INVALID_START_TIME, ()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e editIaCommand.execute(model));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_timingClash_throwsCommandException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // edits the end time of ia, end time conflicts with the start time of ia2"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction ia \u003d new ItineraryAttractionBuilder().withStartTime(\"0900\").withEndTime(\"1000\").build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction ia2 \u003d new ItineraryAttractionBuilder().withStartTime(\"1000\").withEndTime(\"1200\").build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(ia, INDEX_THIRD)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withItineraryAttraction(ia2, INDEX_THIRD).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItinerarySelected model \u003d new ModelStubWithItinerarySelected(itinerary);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor descriptor \u003d new EditItineraryAttractionDescriptorBuilder()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withEndTime(\"1001\").build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand editIaCommand \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST, INDEX_THIRD, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_TIMING_CLASH, ()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e editIaCommand.execute(model));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_timingClash2_throwsCommandException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // used new test cases as the variables used in lambda must be effectively final"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // edits the start time of ia2, end time conflicts with the start time of ia"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction ia \u003d new ItineraryAttractionBuilder().withStartTime(\"0900\").withEndTime(\"1000\").build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction ia2 \u003d new ItineraryAttractionBuilder().withStartTime(\"1000\").withEndTime(\"1200\").build();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(ia, INDEX_THIRD)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withItineraryAttraction(ia2, INDEX_THIRD).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ModelStubWithItinerarySelected model \u003d new ModelStubWithItinerarySelected(itinerary);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor descriptor \u003d new EditItineraryAttractionDescriptorBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withStartTime(\"0959\").build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand editIaCommand \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_SECOND, INDEX_THIRD, descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(CommandException.class, MESSAGE_TIMING_CLASH, ()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e editIaCommand.execute(model));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void execute_fieldSpecified_success() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index day \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // original"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        ItineraryAttraction itineraryAttraction \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(itineraryAttraction, day)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        .build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        EditItineraryAttractionDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //                new EditItineraryAttractionDescriptorBuilder().withPhone(\"12312\").build();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        EditItineraryAttractionCommand editIaCommand \u003d new EditItineraryAttractionCommand(index, day,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        descriptor);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        ModelStubWithItinerarySelected model \u003d new ModelStubWithItinerarySelected(itinerary);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        // expected"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        ItineraryAttraction expectedIa \u003d new ItineraryAttractionBuilder().withPhone(\"12312\").build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        Itinerary expectedI \u003d new ItineraryBuilder().withItineraryAttraction(expectedIa, day).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        ModelStubWithItinerarySelected expectedModel \u003d new ModelStubWithItinerarySelected(expectedI);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        String expectedMessage \u003d String.format(EditItineraryAttractionCommand"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        .MESSAGE_EDIT_ATTRACTION_SUCCESS, expectedIa);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        ItineraryAttraction itineraryAttraction \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        Itinerary itinerary \u003d new ItineraryBuilder().withItineraryAttraction(itineraryAttraction).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        Model model \u003d new ModelManager(getTypicalAttractionList(), getTypicalItineraryList(), new UserPrefs"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        ());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        model.setCurrentItinerary(itinerary);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        ItineraryAttraction editedIa \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        EditItineraryAttractionDescriptor descriptor \u003d new EditItineraryAttractionDescriptorBuilder"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        (editedIa).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        EditItineraryAttractionCommand editIaCommand \u003d new EditItineraryAttractionCommand(index, day,"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        String expectedMessage \u003d String.format(EditItineraryAttractionCommand"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        .MESSAGE_EDIT_ATTRACTION_SUCCESS, editedIa);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        Model expectedModel \u003d new ModelManager(new AttractionList(model.getAttractionList()),"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //                new ItineraryList(model.getItineraryList()),"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //                new UserPrefs());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        Itinerary itinerary \u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        expectedModel.setItinerary();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        //        assertCommandSuccess(editIaCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A default model stub that throws exception for all method calls."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Path getAttractionListFilePath() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttractionListFilePath(Path attractionListFilePath) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Path getItineraryListFilePath() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItineraryListFilePath(Path itineraryListFilePath) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void addAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttractionList(ReadOnlyAttractionList newData) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyAttractionList getAttractionList() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean hasAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void deleteAttraction(Attraction target) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setAttraction(Attraction target, Attraction editedAttraction) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void markVisitedAttraction(Attraction target) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getFilteredAttractionList() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void updateFilteredAttractionList(Predicate\u003cAttraction\u003e predicate) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void addItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItineraryList(ReadOnlyItineraryList newData) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ReadOnlyItineraryList getItineraryList() {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public boolean hasItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void deleteItinerary(Itinerary target) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setItinerary(Itinerary target, Itinerary editedItinerary) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ObservableList\u003cItinerary\u003e getFilteredItineraryList() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void updateFilteredItineraryList(Predicate\u003cItinerary\u003e predicate) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public void setCurrentItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public ReadOnlyItineraryAttractionList getItineraryAttractionList() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        public ObservableList\u003cItineraryAttraction\u003e getFilteredItineraryAttractionList() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            throw new AssertionError(\"This methods should not be called.\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A Model stub that returns no itinerary selected."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStubNoItinerarySelected extends ModelStub {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * A Model stub that returns a itinerary selected."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private class ModelStubWithItinerarySelected extends ModelStub {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        private final Itinerary itinerary;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public ModelStubWithItinerarySelected(Itinerary itinerary) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            this.itinerary \u003d itinerary;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        public Itinerary getCurrentItinerary() {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            return itinerary;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 11,
      "peter-yeh": 376
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/itineraryattraction/EditItineraryAttractionDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.commands.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_EIFFEL_IA;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_MBS_IA;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MBS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_MBS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MBS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_MBS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_MBS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_MBS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_MBS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_MBS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand.EditItineraryAttractionDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.EditItineraryAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class EditItineraryAttractionDescriptorTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor descriptorWithSameValues \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new EditItineraryAttractionDescriptor(DESC_EIFFEL_IA);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(DESC_EIFFEL_IA.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(DESC_EIFFEL_IA.equals(DESC_EIFFEL_IA));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(5));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(DESC_MBS_IA));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor editedEiffel \u003d new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withName(VALID_NAME_MBS).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        editedEiffel \u003d new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA).withPhone(VALID_PHONE_MBS).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        editedEiffel \u003d new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA).withEmail(VALID_EMAIL_MBS).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        editedEiffel \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA).withAddress(VALID_ADDRESS_MBS).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        editedEiffel \u003d new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withLocation(VALID_LOCATION_MBS).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        editedEiffel \u003d new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_MBS).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different opening hours -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        editedEiffel \u003d new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withOpeningHours(VALID_OPENING_HOURS_MBS).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different price range -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        editedEiffel \u003d new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withPriceRange(VALID_PRICE_RANGE_MBS).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        editedEiffel \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA).withRating(VALID_RATING_MBS).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different visited -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        editedEiffel \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA).withVisited(VALID_VISITED_MBS).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        editedEiffel \u003d"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA).withTags(VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different start time -\u003e returns false"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        editedEiffel \u003d new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withStartTime(VALID_START_TIME_MBS).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // different end time -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        editedEiffel \u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new EditItineraryAttractionDescriptorBuilder(DESC_EIFFEL_IA).withEndTime(VALID_END_TIME_MBS).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(DESC_EIFFEL_IA.equals(editedEiffel));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Bot@nic Gardens\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+6471 7138\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_OPENING_HOURS \u003d \"1-2\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String INVALID_PRICE_RANGE \u003d \"MEDUM\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_RATING \u003d \"9\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String INVALID_VISITED \u003d \"Fase\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#nature\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_ITINERARY_DATE \u003d \"3 february\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_BUDGET \u003d \"345.123\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_ITINERARY_TIME \u003d \"10\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_NAME \u003d \"Botanic Gardens\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_PHONE \u003d \"64717138\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"1 Cluny Rd, 259569\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"botanicgardens@example.com\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"First UNESCO Heritage Site in Singapore\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_LOCATION \u003d \"Singapore, Singapore\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_OPENING_HOURS \u003d \"1000-1800\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_PRICE_RANGE \u003d \"LOW\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_RATING \u003d \"4.9\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_VISITED \u003d \"FALSE\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"nature\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"sightseeing\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_ITINERARY_DATE \u003d \"03-02-2016\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_BUDGET \u003d \"100.50\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_ITINERARY_TIME \u003d \"1000\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseDescription_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseDescription_validValueWithoutWhitespace_returnsDescription() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseDescription_validValueWithWhitespace_returnsTrimmedDescription() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String descriptionWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(descriptionWithWhitespace));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseLocation_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLocation((String) null));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseLocation_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseLocation(INVALID_LOCATION));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseLocation_validValueWithoutWhitespace_returnsLocation() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Location expectedLocation \u003d new Location(VALID_LOCATION);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedLocation, ParserUtil.parseLocation(VALID_LOCATION));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseLocation_validValueWithWhitespace_returnsTrimmedLocation() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String locationWithWhitespace \u003d WHITESPACE + VALID_LOCATION + WHITESPACE;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Location expectedLocation \u003d new Location(VALID_LOCATION);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedLocation, ParserUtil.parseLocation(locationWithWhitespace));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseOpeningHours_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseOpeningHours((String) null));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseOpeningHours_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseOpeningHours(INVALID_OPENING_HOURS));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseOpeningHours_validValueWithoutWhitespace_returnsOpeningHours() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        OpeningHours expectedOpeningHours \u003d new OpeningHours(VALID_OPENING_HOURS);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedOpeningHours, ParserUtil.parseOpeningHours(VALID_OPENING_HOURS));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseOpeningHours_validValueWithWhitespace_returnsTrimmedOpeningHours() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String openingHoursWithWhitespace \u003d WHITESPACE + VALID_OPENING_HOURS + WHITESPACE;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        OpeningHours expectedOpeningHours \u003d new OpeningHours(VALID_OPENING_HOURS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedOpeningHours, ParserUtil.parseOpeningHours(openingHoursWithWhitespace));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parsePriceRange_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePriceRange((String) null));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parsePriceRange_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parsePriceRange(INVALID_PRICE_RANGE));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parsePriceRange_validValueWithoutWhitespace_returnsPriceRange() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        PriceRange expectedPriceRange \u003d new PriceRange(VALID_PRICE_RANGE);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedPriceRange, ParserUtil.parsePriceRange(VALID_PRICE_RANGE));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parsePriceRange_validValueWithWhitespace_returnsTrimmedPriceRange() throws Exception {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String priceRangeWithWhitespace \u003d WHITESPACE + VALID_PRICE_RANGE + WHITESPACE;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        PriceRange expectedPriceRange \u003d new PriceRange(VALID_PRICE_RANGE);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedPriceRange, ParserUtil.parsePriceRange(priceRangeWithWhitespace));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseRating_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseRating((String) null));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseRating_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseRating(INVALID_RATING));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseRating_validValueWithoutWhitespace_returnsRating() throws Exception {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(VALID_RATING));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseRating_validValueWithWhitespace_returnsTrimmedRating() throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String ratingWithWhitespace \u003d WHITESPACE + VALID_RATING + WHITESPACE;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Rating expectedRating \u003d new Rating(VALID_RATING);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedRating, ParserUtil.parseRating(ratingWithWhitespace));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void parseVisited_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseVisited((String) null));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void parseVisited_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseVisited(INVALID_VISITED));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void parseVisited_validValueWithoutWhitespace_returnsVisited() throws Exception {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Visited expectedVisited \u003d new Visited(VALID_VISITED);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertEquals(expectedVisited, ParserUtil.parseVisited(VALID_VISITED));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void parseVisited_validValueWithWhitespace_returnsTrimmedVisited() throws Exception {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String visitedWithWhitespace \u003d WHITESPACE + VALID_VISITED + WHITESPACE;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Visited expectedVisited \u003d new Visited(VALID_VISITED);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertEquals(expectedVisited, ParserUtil.parseVisited(visitedWithWhitespace));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG)));"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseItineraryDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseItineraryDate((String) null));"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseItineraryDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseItineraryDate(INVALID_ITINERARY_DATE));"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseItineraryDate_validValueWithoutWhitespace_returnsItineraryDate() throws Exception {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryDate expectedItineraryDate \u003d new ItineraryDate(VALID_ITINERARY_DATE);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedItineraryDate, ParserUtil.parseItineraryDate(VALID_ITINERARY_DATE));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseItineraryDate_validValueWithWhitespace_returnsTrimmedItineraryDate() throws Exception {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String itineraryDateWithWhitespace \u003d WHITESPACE + VALID_ITINERARY_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryDate expectedItineraryDate \u003d new ItineraryDate(VALID_ITINERARY_DATE);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedItineraryDate, ParserUtil.parseItineraryDate(itineraryDateWithWhitespace));"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseBudget_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseBudget((String) null));"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseBudget_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseBudget(INVALID_BUDGET));"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseBudget_validValueWithoutWhitespace_returnsBudget() throws Exception {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Budget expectedBudget \u003d new Budget(VALID_BUDGET);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedBudget, ParserUtil.parseBudget(VALID_BUDGET));"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseBudget_validValueWithWhitespace_returnsTrimmedBudget() throws Exception {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String budgetWithWhitespace \u003d WHITESPACE + VALID_BUDGET + WHITESPACE;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Budget expectedBudget \u003d new Budget(VALID_BUDGET);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedBudget, ParserUtil.parseBudget(budgetWithWhitespace));"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parseDayIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDayIndex(\"10 a\"));"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parseDayIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ParseException.class, Day.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e ParserUtil.parseDayIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ParseException.class, Day.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e ParserUtil.parseDayIndex(Long.toString(-2)));"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ParseException.class, Day.MESSAGE_CONSTRAINTS, ()"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            -\u003e ParserUtil.parseDayIndex(Long.toString(0)));"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parseDayIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseDayIndex(\"1\"));"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(INDEX_FIRST, ParserUtil.parseDayIndex(\"  1  \"));"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseItineraryTime_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseItineraryTime((String) null));"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseItineraryTime_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseItineraryTime(INVALID_ITINERARY_TIME));"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseItineraryTime_validValueWithoutWhitespace_returnsItineraryTime() throws Exception {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        ItineraryTime expectedItineraryTime \u003d new ItineraryTime(VALID_ITINERARY_TIME);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedItineraryTime, ParserUtil.parseItineraryTime(VALID_ITINERARY_TIME));"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void parseItineraryTime_validValueWithWhitespace_returnsTrimmedItineraryTime() throws Exception {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String itineraryTimeWithWhitespace \u003d WHITESPACE + VALID_ITINERARY_TIME + WHITESPACE;"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        ItineraryTime expectedItineraryTime \u003d new ItineraryTime(VALID_ITINERARY_TIME);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(expectedItineraryTime, ParserUtil.parseItineraryTime(itineraryTimeWithWhitespace));"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 38,
      "yuxuanxc": 123,
      "peter-yeh": 21,
      "-": 174,
      "limkoonkiat": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/TrackPadParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.AddAttractionCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.ClearAttractionCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.DeleteAttractionCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.FindAttractionCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.ListAttractionCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.attraction.MarkVisitedAttractionCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.AddItineraryCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.ClearItineraryCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.DeleteItineraryCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand.EditItineraryDescriptor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.FindItineraryCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.ListItineraryCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.SelectItineraryCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.AddItineraryAttractionCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.DeleteItineraryAttractionCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand.EditItineraryAttractionDescriptor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.testutil.AttractionUtil;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.testutil.EditAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.EditItineraryAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.EditItineraryDescriptorBuilder;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.ItineraryAttractionBuilder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.ItineraryAttractionUtil;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.ItineraryUtil;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class TrackPadParserTest {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private final TrackPadParser parser \u003d new TrackPadParser();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final ItineraryTime startTime \u003d new ItineraryTime(\"1000\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final ItineraryTime endTime \u003d new ItineraryTime(\"1300\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index index \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final Index day \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                HelpCommand.MESSAGE_USAGE), () -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Attraction Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_addAttraction() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        AddAttractionCommand command \u003d (AddAttractionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                AttractionUtil.getAddAttractionCommand(attraction));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(new AddAttractionCommand(attraction), command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_clearAttraction() throws Exception {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(parser.parseCommand(ClearAttractionCommand.COMMAND_WORD) instanceof ClearAttractionCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(parser.parseCommand(ClearAttractionCommand.COMMAND_WORD + \" 3\") instanceof ClearAttractionCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_deleteAttraction() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        DeleteAttractionCommand command \u003d (DeleteAttractionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                DeleteAttractionCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(new DeleteAttractionCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_editAttraction() throws Exception {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction attraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder(attraction).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand command \u003d (EditAttractionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                EditAttractionCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + AttractionUtil.getEditAttractionDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(new EditAttractionCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_findAttraction() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand command \u003d (FindAttractionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                FindAttractionCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(new FindAttractionCommand(new AttractionContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_listAttraction() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(parser.parseCommand(ListAttractionCommand.COMMAND_WORD) instanceof ListAttractionCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(parser.parseCommand(ListAttractionCommand.COMMAND_WORD + \" 3\") instanceof ListAttractionCommand);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parseCommand_markVisitedAttraction() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        MarkVisitedAttractionCommand command \u003d (MarkVisitedAttractionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                MarkVisitedAttractionCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(new MarkVisitedAttractionCommand(index), command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Itinerary Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_addItinerary() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AddItineraryCommand command \u003d (AddItineraryCommand) parser.parseCommand("
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ItineraryUtil.getAddItineraryCommand(itinerary));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(new AddItineraryCommand(itinerary), command);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_clearItinerary() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(parser.parseCommand(ClearItineraryCommand.COMMAND_WORD) instanceof ClearItineraryCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(parser.parseCommand(ClearItineraryCommand.COMMAND_WORD + \" 3\") instanceof ClearItineraryCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_deleteItinerary() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        DeleteItineraryCommand command \u003d (DeleteItineraryCommand) parser.parseCommand("
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                DeleteItineraryCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(new DeleteItineraryCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_editItinerary() throws Exception {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor descriptor \u003d new EditItineraryDescriptorBuilder(itinerary).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand command \u003d (EditItineraryCommand) parser.parseCommand("
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                EditItineraryCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + INDEX_FIRST.getOneBased() + \" \""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + ItineraryUtil.getEditItineraryDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(new EditItineraryCommand(INDEX_FIRST, descriptor), command);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_findItinerary() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        FindItineraryCommand command \u003d (FindItineraryCommand) parser.parseCommand("
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                FindItineraryCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(new FindItineraryCommand(new ItineraryContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parseCommand_listItinerary() throws Exception {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(parser.parseCommand(ListItineraryCommand.COMMAND_WORD) instanceof ListItineraryCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(parser.parseCommand(ListItineraryCommand.COMMAND_WORD + \" 3\") instanceof ListItineraryCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void parseCommand_selectItinerary() throws Exception {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        SelectItineraryCommand command \u003d (SelectItineraryCommand) parser.parseCommand("
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                SelectItineraryCommand.COMMAND_WORD + \" \" + INDEX_FIRST.getOneBased());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertEquals(new SelectItineraryCommand(INDEX_FIRST), command);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Itinerary Attraction Commands \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parserCommand_addItineraryAttraction() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // tests if same input produces same command"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        AddItineraryAttractionCommand command \u003d (AddItineraryAttractionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                AddItineraryAttractionCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PREFIX_START_TIME + startTime.toString() + \" \" + PREFIX_END_TIME + endTime.toString() + \" \""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PREFIX_DAY_VISITING + day.getOneBased());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(new AddItineraryAttractionCommand(index, startTime, endTime, day), command);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parserCommand_editItineraryAttraction() throws Exception {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        ItineraryAttraction itineraryAttraction \u003d new ItineraryAttractionBuilder().build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor editDescriptor \u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new EditItineraryAttractionDescriptorBuilder(itineraryAttraction).build();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // tests if same input produces same command"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand command \u003d (EditItineraryAttractionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryAttractionUtil.getEditItineraryAttractionCommand(index, day, editDescriptor));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(new EditItineraryAttractionCommand(index, day, editDescriptor), command);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parserCommand_deleteItineraryAttraction() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        DeleteItineraryAttractionCommand command \u003d (DeleteItineraryAttractionCommand) parser.parseCommand("
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                DeleteItineraryAttractionCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PREFIX_DAY_VISITING + day.getOneBased());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertEquals(new DeleteItineraryAttractionCommand(index, day), command);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 23,
      "Robinho98": 6,
      "peter-yeh": 61,
      "leeyorktat": 8,
      "-": 48,
      "limkoonkiat": 89
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/attraction/AddAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_MBS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MBS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_EIFFEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_MBS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OPENING_HOURS_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_RANGE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VISITED_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_MBS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_MBS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_MBS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_MBS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_RANGE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_RANGE_DESC_MBS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_MBS;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ACTIVITY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SIGHTSEEING;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MBS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISITED_DESC_EIFFEL;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISITED_DESC_MBS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.EIFFEL_TOWER;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.MBS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.AddAttractionCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AddAttractionCommandParserTest {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private AddAttractionCommandParser parser \u003d new AddAttractionCommandParser();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction expectedAttraction \u003d new AttractionBuilder(MBS).withTags(VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_MBS"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + LOCATION_DESC_MBS + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + RATING_DESC_MBS + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + NAME_DESC_MBS + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + EMAIL_DESC_MBS + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_EIFFEL + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + EMAIL_DESC_MBS + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_EIFFEL + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + ADDRESS_DESC_MBS + DESCRIPTION_DESC_EIFFEL + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // multiple locations - last location accepted"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + DESCRIPTION_DESC_MBS + LOCATION_DESC_EIFFEL + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // multiple opening hours - last opening hours accepted"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // multiple price ranges - last price range accepted"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_EIFFEL + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // multiple ratings - last rating accepted"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_EIFFEL + RATING_DESC_MBS"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // multiple visited - last visited accepted"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + VISITED_DESC_MBS + TAG_DESC_ACTIVITY, new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Attraction expectedAttractionMultipleTags \u003d new AttractionBuilder(MBS)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withTags(VALID_TAG_ACTIVITY, VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS + TAG_DESC_SIGHTSEEING + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionMultipleTags));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction expectedAttraction \u003d new AttractionBuilder(EIFFEL_TOWER).withTags().build();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + EMAIL_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttraction));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // No phone number given"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction expectedAttractionNoPhone \u003d new AttractionBuilder(EIFFEL_TOWER).withPhone().build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + EMAIL_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoPhone));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // No email given"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction expectedAttractionNoEmail \u003d new AttractionBuilder(EIFFEL_TOWER).withEmail().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + OPENING_HOURS_DESC_EIFFEL + PRICE_RANGE_DESC_EIFFEL"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoEmail));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // No address given"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction expectedAttractionNoAddress \u003d new AttractionBuilder(EIFFEL_TOWER).withAddress().build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoAddress));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // No description given"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction expectedAttractionNoDescription \u003d new AttractionBuilder(EIFFEL_TOWER).withDescription().build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoDescription));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // No opening hours given"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction expectedAttractionNoOpeningHours \u003d new AttractionBuilder(EIFFEL_TOWER).withOpeningHours().build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoOpeningHours));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // No price range given"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction expectedAttractionNoPriceRange \u003d new AttractionBuilder(EIFFEL_TOWER).withPriceRange().build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_EIFFEL + TAG_DESC_ACTIVITY + ADDRESS_DESC_EIFFEL,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoPriceRange));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // No rating given"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Attraction expectedAttractionNoRating \u003d new AttractionBuilder(EIFFEL_TOWER).withRating().build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + TAG_DESC_ACTIVITY + ADDRESS_DESC_EIFFEL,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoRating));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // No visited given"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        Attraction expectedAttractionNoVisited \u003d new AttractionBuilder(EIFFEL_TOWER).withVisited().build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_EIFFEL + PHONE_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + RATING_DESC_EIFFEL"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + PRICE_RANGE_DESC_EIFFEL + TAG_DESC_ACTIVITY + ADDRESS_DESC_EIFFEL,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new AddAttractionCommand(expectedAttractionNoVisited));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttractionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + RATING_DESC_MBS + VISITED_DESC_MBS, expectedMessage);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // missing location prefix"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + VALID_LOCATION_MBS + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + RATING_DESC_MBS + VISITED_DESC_MBS, expectedMessage);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_MBS + VALID_PHONE_MBS + VALID_EMAIL_MBS + VALID_ADDRESS_MBS"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + VALID_LOCATION_MBS + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + RATING_DESC_MBS + VISITED_DESC_MBS, expectedMessage);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_LOCATION_DESC"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_TAG_DESC"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VALID_TAG_ACTIVITY,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid Opening hours"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_OPENING_HOURS_DESC"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                OpeningHours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid Price Range"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_PRICE_RANGE_DESC"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PriceRange.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid Rating"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_RATING_DESC"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // invalid Visited"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_MBS"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + RATING_DESC_MBS"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + INVALID_VISITED_DESC"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                Visited.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_MBS + INVALID_LOCATION_DESC + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS + VISITED_DESC_MBS, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_MBS + PHONE_DESC_MBS + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + ADDRESS_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        + PRICE_RANGE_DESC_MBS + RATING_DESC_MBS + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        + TAG_DESC_SIGHTSEEING + TAG_DESC_ACTIVITY,"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 74,
      "yuxuanxc": 86,
      "peter-yeh": 145,
      "limkoonkiat": 25,
      "-": 62
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/attraction/DeleteAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.DeleteAttractionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * outside of the DeleteAttractionCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * same path through the DeleteAttractionCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class DeleteAttractionCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private DeleteAttractionCommandParser parser \u003d new DeleteAttractionCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteAttractionCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, DeleteAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 8,
      "limkoonkiat": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/attraction/EditAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_MBS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MBS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_EIFFEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_MBS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OPENING_HOURS_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_RANGE_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VISITED_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_MBS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_MBS;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_MBS;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_RANGE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_RANGE_DESC_MBS;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_MBS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ACTIVITY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SIGHTSEEING;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_EIFFEL;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EIFFEL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MBS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_EIFFEL;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_EIFFEL;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EIFFEL;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_EIFFEL;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_MBS;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_EIFFEL;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_EIFFEL;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_MBS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_EIFFEL;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_MBS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_EIFFEL;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_MBS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISITED_DESC_EIFFEL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISITED_DESC_MBS;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.testutil.EditAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class EditAttractionCommandParserTest {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditAttractionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private EditAttractionCommandParser parser \u003d new EditAttractionCommandParser();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_EIFFEL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1\", EditAttractionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_EIFFEL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_EIFFEL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // valid prefix for itinerary but invalid for attraction being parsed as preamble"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1 b/100\", MESSAGE_INVALID_FORMAT); // budget"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1 sd/20-12-2020\", MESSAGE_INVALID_FORMAT); // start date"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1 ed/30-12-2020\", MESSAGE_INVALID_FORMAT); // end date"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1 st/1000\", MESSAGE_INVALID_FORMAT); // start time"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1 et/1400\", MESSAGE_INVALID_FORMAT); // end time"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1 day/3\", MESSAGE_INVALID_FORMAT); // day"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_LOCATION_DESC, Location.MESSAGE_CONSTRAINTS); // invalid location"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_OPENING_HOURS_DESC,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                OpeningHours.MESSAGE_CONSTRAINTS); // invalid opening hours"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PRICE_RANGE_DESC,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                PriceRange.MESSAGE_CONSTRAINTS); // invalid price range"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS); // invalid rating"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_VISITED_DESC, Visited.MESSAGE_CONSTRAINTS); // invalid visited"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_EIFFEL, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // invalid rating followed by valid address"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_RATING_DESC + ADDRESS_DESC_EIFFEL, Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_MBS + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Attraction} being edited,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_ACTIVITY + TAG_DESC_SIGHTSEEING + TAG_EMPTY, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_ACTIVITY + TAG_EMPTY + TAG_DESC_SIGHTSEEING, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_ACTIVITY + TAG_DESC_SIGHTSEEING, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + PHONE_DESC_EIFFEL + DESCRIPTION_DESC_EIFFEL + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + PRICE_RANGE_DESC_EIFFEL + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_EIFFEL + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + EMAIL_DESC_EIFFEL + ADDRESS_DESC_EIFFEL + NAME_DESC_EIFFEL + DESCRIPTION_DESC_EIFFEL"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + LOCATION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL + PRICE_RANGE_DESC_EIFFEL"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL + TAG_DESC_ACTIVITY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withName(VALID_NAME_EIFFEL)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withPhone(VALID_PHONE_EIFFEL).withEmail(VALID_EMAIL_EIFFEL).withAddress(VALID_ADDRESS_EIFFEL)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EIFFEL).withLocation(VALID_LOCATION_EIFFEL)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withOpeningHours(VALID_OPENING_HOURS_EIFFEL).withPriceRange(VALID_PRICE_RANGE_EIFFEL)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withRating(VALID_RATING_EIFFEL).withVisited(VALID_VISITED_EIFFEL)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withTags(VALID_TAG_SIGHTSEEING, VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_MBS + EMAIL_DESC_EIFFEL;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withPhone(VALID_PHONE_MBS)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withEmail(VALID_EMAIL_EIFFEL).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withName(VALID_NAME_EIFFEL).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withPhone(VALID_PHONE_EIFFEL).build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_EIFFEL;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withEmail(VALID_EMAIL_EIFFEL).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withAddress(VALID_ADDRESS_EIFFEL).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withDescription(VALID_DESCRIPTION_EIFFEL).build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // location"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + LOCATION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withLocation(VALID_LOCATION_EIFFEL).build();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // opening hours"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + OPENING_HOURS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withOpeningHours(VALID_OPENING_HOURS_EIFFEL).build();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // price range"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRICE_RANGE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withPriceRange(VALID_PRICE_RANGE_EIFFEL).build();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // rating"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RATING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withRating(VALID_RATING_EIFFEL).build();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // rating"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VISITED_DESC_EIFFEL;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withVisited(VALID_VISITED_EIFFEL).build();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_ACTIVITY;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withTags(VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_EIFFEL + ADDRESS_DESC_EIFFEL + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + LOCATION_DESC_EIFFEL + DESCRIPTION_DESC_EIFFEL + OPENING_HOURS_DESC_EIFFEL + PRICE_RANGE_DESC_EIFFEL"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + RATING_DESC_EIFFEL + VISITED_DESC_EIFFEL + TAG_DESC_ACTIVITY + PHONE_DESC_EIFFEL + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + EMAIL_DESC_EIFFEL + TAG_DESC_ACTIVITY + PHONE_DESC_MBS + ADDRESS_DESC_MBS + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + LOCATION_DESC_MBS + DESCRIPTION_DESC_MBS + OPENING_HOURS_DESC_MBS + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                + RATING_DESC_MBS + VISITED_DESC_MBS + TAG_DESC_SIGHTSEEING;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withPhone(VALID_PHONE_MBS)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withEmail(VALID_EMAIL_MBS).withAddress(VALID_ADDRESS_MBS)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withLocation(VALID_LOCATION_MBS).withDescription(VALID_DESCRIPTION_MBS)"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withOpeningHours(VALID_OPENING_HOURS_MBS).withPriceRange(VALID_PRICE_RANGE_MBS)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withRating(VALID_RATING_MBS).withVisited(VALID_VISITED_MBS)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                .withTags(VALID_TAG_ACTIVITY, VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_MBS;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withPhone(VALID_PHONE_MBS).build();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_MBS + INVALID_PHONE_DESC + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                + PHONE_DESC_MBS + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS + OPENING_HOURS_DESC_MBS;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptorBuilder().withPhone(VALID_PHONE_MBS).withEmail(VALID_EMAIL_MBS)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withAddress(VALID_ADDRESS_MBS).withDescription(VALID_DESCRIPTION_MBS)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withLocation(VALID_LOCATION_MBS).withOpeningHours(VALID_OPENING_HOURS_MBS).build();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        EditAttractionDescriptor descriptor \u003d new EditAttractionDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        EditAttractionCommand expectedCommand \u003d new EditAttractionCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 56,
      "yuxuanxc": 86,
      "limkoonkiat": 50,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/attraction/FindAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.FindAttractionCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class FindAttractionCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private FindAttractionCommandParser parser \u003d new FindAttractionCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        FindAttractionCommand expectedFindAttractionCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new FindAttractionCommand(new AttractionContainsKeywordsPredicate(Arrays.asList(\"Zoo\", \"MBS\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, \"Zoo MBS\", expectedFindAttractionCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertParseSuccess(parser, \" \\n Zoo \\n \\t MBS  \\t\", expectedFindAttractionCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 9,
      "limkoonkiat": 2,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/attraction/MarkVisitedAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.logic.commands.attraction.MarkVisitedAttractionCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * outside of the MarkVisitedAttractionCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * same path through the MarkVisitedAttractionCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class MarkVisitedAttractionCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private MarkVisitedAttractionCommandParser parser \u003d new MarkVisitedAttractionCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_validArgs_returnsMarkVisitedCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseSuccess(parser, \"1\", new MarkVisitedAttractionCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, MarkVisitedAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 31,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itinerary/AddItineraryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BUDGET_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BUDGET_DESC_PARIS_TRIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PARIS_TRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_PARIS_TRIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BUDGET_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_DATE_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PARIS_TRIP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_PARIS_TRIP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_JAPAN_TRIP;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JAPAN_TRIP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_JAPAN_TRIP;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JAPAN_TRIP;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_JAPAN_TRIP;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.JAPAN_TRIP;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.AddItineraryCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class AddItineraryCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private AddItineraryCommandParser parser \u003d new AddItineraryCommandParser();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary expectedItinerary \u003d new ItineraryBuilder(JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + END_DATE_DESC_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AddItineraryCommand(expectedItinerary));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_PARIS_TRIP + NAME_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + END_DATE_DESC_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AddItineraryCommand(expectedItinerary));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // multiple start dates - last start date accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_JAPAN_TRIP + START_DATE_DESC_PARIS_TRIP"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + START_DATE_DESC_JAPAN_TRIP + END_DATE_DESC_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + BUDGET_DESC_JAPAN_TRIP, new AddItineraryCommand(expectedItinerary));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // multiple end dates - last end date accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP + END_DATE_DESC_PARIS_TRIP"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + END_DATE_DESC_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AddItineraryCommand(expectedItinerary));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // multiple descriptions - last description accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP + END_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + DESCRIPTION_DESC_PARIS_TRIP + DESCRIPTION_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AddItineraryCommand(expectedItinerary));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // multiple budgets - last budget accepted"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP + END_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + DESCRIPTION_DESC_JAPAN_TRIP + BUDGET_DESC_PARIS_TRIP + BUDGET_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AddItineraryCommand(expectedItinerary));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // No description given"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary expectedItineraryNoDescription \u003d new ItineraryBuilder(JAPAN_TRIP).withDescription().build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + END_DATE_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AddItineraryCommand(expectedItineraryNoDescription));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // No budget given"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary expectedItineraryNoBudget \u003d new ItineraryBuilder(JAPAN_TRIP).withBudget().build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + END_DATE_DESC_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AddItineraryCommand(expectedItineraryNoBudget));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItineraryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + END_DATE_DESC_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP, expectedMessage);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // missing start date prefix"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_JAPAN_TRIP + VALID_START_DATE_JAPAN_TRIP"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + END_DATE_DESC_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP, expectedMessage);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // missing end date prefix"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + VALID_END_DATE_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP, expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_JAPAN_TRIP + VALID_START_DATE_JAPAN_TRIP"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + VALID_END_DATE_JAPAN_TRIP + VALID_DESCRIPTION_JAPAN_TRIP + VALID_BUDGET_JAPAN_TRIP, expectedMessage);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + START_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + END_DATE_DESC_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid start date"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_JAPAN_TRIP + INVALID_START_DATE_DESC"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + END_DATE_DESC_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ItineraryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid end date"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + INVALID_END_DATE_DESC + DESCRIPTION_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ItineraryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid budget"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + END_DATE_DESC_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP + INVALID_BUDGET_DESC,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Budget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + INVALID_START_DATE_DESC"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + DESCRIPTION_DESC_JAPAN_TRIP + END_DATE_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        + END_DATE_DESC_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItineraryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 147
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itinerary/DeleteItineraryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.DeleteItineraryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * outside of the DeleteItineraryCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * same path through the DeleteItineraryCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class DeleteItineraryCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private DeleteItineraryCommandParser parser \u003d new DeleteItineraryCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_validArgs_returnsDeleteItineraryCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteItineraryCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                DeleteItineraryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itinerary/EditItineraryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BUDGET_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BUDGET_DESC_PARIS_TRIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_PARIS_TRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_DATE_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BUDGET_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_DATE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_PARIS_TRIP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_DATE_DESC_PARIS_TRIP;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_JAPAN_TRIP;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JAPAN_TRIP;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_JAPAN_TRIP;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JAPAN_TRIP;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_JAPAN_TRIP;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand.EditItineraryDescriptor;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.EditItineraryDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class EditItineraryCommandParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditItineraryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private EditItineraryCommandParser parser \u003d new EditItineraryCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_JAPAN_TRIP, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\", EditItineraryCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_JAPAN_TRIP, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_JAPAN_TRIP, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_START_DATE_DESC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ItineraryDate.MESSAGE_CONSTRAINTS); // invalid start date"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_END_DATE_DESC,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ItineraryDate.MESSAGE_CONSTRAINTS); // invalid end date"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BUDGET_DESC,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Budget.MESSAGE_CONSTRAINTS); // invalid budget"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid budget followed by valid start date"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BUDGET_DESC + START_DATE_DESC_JAPAN_TRIP,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Budget.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // valid end date followed by invalid end date. The test case for invalid end date followed by valid end date"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + END_DATE_DESC_JAPAN_TRIP + INVALID_END_DATE_DESC,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ItineraryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"1\" + NAME_DESC_JAPAN_TRIP + INVALID_START_DATE_DESC"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + END_DATE_DESC_JAPAN_TRIP + VALID_DESCRIPTION_JAPAN_TRIP + INVALID_BUDGET_DESC,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ItineraryDate.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_JAPAN_TRIP + DESCRIPTION_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + START_DATE_DESC_JAPAN_TRIP + END_DATE_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor descriptor \u003d new EditItineraryDescriptorBuilder().withName(VALID_NAME_JAPAN_TRIP)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JAPAN_TRIP).withStartDate(VALID_START_DATE_JAPAN_TRIP)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withEndDate(VALID_END_DATE_JAPAN_TRIP).withBudget(VALID_BUDGET_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand expectedCommand \u003d new EditItineraryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + START_DATE_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor descriptor \u003d new EditItineraryDescriptorBuilder()"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withStartDate(VALID_START_DATE_JAPAN_TRIP)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withBudget(VALID_BUDGET_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand expectedCommand \u003d new EditItineraryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor descriptor \u003d new EditItineraryDescriptorBuilder().withName(VALID_NAME_JAPAN_TRIP)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand expectedCommand \u003d new EditItineraryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditItineraryDescriptorBuilder().withDescription(VALID_DESCRIPTION_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedCommand \u003d new EditItineraryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // start date"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + START_DATE_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditItineraryDescriptorBuilder().withStartDate(VALID_START_DATE_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedCommand \u003d new EditItineraryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // end date"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + END_DATE_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditItineraryDescriptorBuilder().withEndDate(VALID_END_DATE_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedCommand \u003d new EditItineraryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // budget"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + BUDGET_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditItineraryDescriptorBuilder().withBudget(VALID_BUDGET_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedCommand \u003d new EditItineraryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_PARIS_TRIP + END_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + NAME_DESC_PARIS_TRIP + END_DATE_DESC_JAPAN_TRIP + START_DATE_DESC_PARIS_TRIP + NAME_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + BUDGET_DESC_PARIS_TRIP + BUDGET_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + DESCRIPTION_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor descriptor \u003d new EditItineraryDescriptorBuilder().withName(VALID_NAME_JAPAN_TRIP)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JAPAN_TRIP)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withStartDate(VALID_START_DATE_JAPAN_TRIP)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withEndDate(VALID_END_DATE_JAPAN_TRIP)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withBudget(VALID_BUDGET_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand expectedCommand \u003d new EditItineraryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_START_DATE_DESC + START_DATE_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryDescriptor descriptor \u003d new EditItineraryDescriptorBuilder()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withStartDate(VALID_START_DATE_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        EditItineraryCommand expectedCommand \u003d new EditItineraryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + NAME_DESC_JAPAN_TRIP + INVALID_START_DATE_DESC"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + DESCRIPTION_DESC_JAPAN_TRIP + START_DATE_DESC_JAPAN_TRIP + BUDGET_DESC_JAPAN_TRIP"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                + END_DATE_DESC_JAPAN_TRIP;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditItineraryDescriptorBuilder().withName(VALID_NAME_JAPAN_TRIP)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withStartDate(VALID_START_DATE_JAPAN_TRIP).withEndDate(VALID_END_DATE_JAPAN_TRIP)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JAPAN_TRIP).withBudget(VALID_BUDGET_JAPAN_TRIP)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedCommand \u003d new EditItineraryCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 198
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itinerary/FindItineraryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.FindItineraryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class FindItineraryCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private FindItineraryCommandParser parser \u003d new FindItineraryCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format("
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, FindItineraryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        FindItineraryCommand expectedFindItineraryCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new FindItineraryCommand(new ItineraryContainsKeywordsPredicate(Arrays.asList(\"Zoo\", \"Paris\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, \"Zoo Paris\", expectedFindItineraryCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseSuccess(parser, \" \\n Zoo \\n \\t Paris  \\t\", expectedFindItineraryCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itinerary/SelectItineraryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.logic.parser.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.logic.commands.itinerary.SelectItineraryCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * outside of the SelectItineraryCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * same path through the SelectItineraryCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class SelectItineraryCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private SelectItineraryCommandParser parser \u003d new SelectItineraryCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void parse_validArgs_returnsSelectItineraryCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectItineraryCommand(INDEX_FIRST));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertParseFailure(parser, \"a\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                SelectItineraryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itineraryattraction/AddItineraryAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.parser.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_START_TIME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DAY_VISITING_DESC_MBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_MBS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INDEX_DESC_MBS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_VISITING_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_MBS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_VISITING_MBS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_MBS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_INDEX_MBS;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_MBS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.AddItineraryAttractionCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class AddItineraryAttractionCommandParserTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private AddItineraryAttractionCommandParser parser \u003d new AddItineraryAttractionCommandParser();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // todo really bad and messy method, simplify this afterwards."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private final AddItineraryAttractionCommand expectedAddIaCommand \u003d new AddItineraryAttractionCommand("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            Index.fromOneBased(Integer.parseInt(VALID_INDEX_MBS)),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            new ItineraryTime(VALID_START_TIME_MBS),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            new ItineraryTime(VALID_END_TIME_MBS),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            Index.fromOneBased(Integer.parseInt(VALID_DAY_VISITING_MBS)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                expectedAddIaCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // multiple start time - last start time accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_EIFFEL"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_EIFFEL // should not be accepted, else will be diff from expected"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                expectedAddIaCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // multiple end time - last end time accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_EIFFEL"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                expectedAddIaCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // multiple day visiting - last day accepted"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_EIFFEL"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                expectedAddIaCommand);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid start time followed by a valid start time, accept last value"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_START_TIME_DESC"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                expectedAddIaCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid end time followed by a valid end time"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_END_TIME_DESC"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                expectedAddIaCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid day visiting followed by a valid day visiting"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_DAY_VISITING_DESC"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                expectedAddIaCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                AddItineraryAttractionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // missing start time prefix"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                VALID_START_TIME_MBS"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // missing end time prefix"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VALID_END_TIME_MBS"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // missing day visiting prefix"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VALID_DAY_VISITING_MBS,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // all prefix missing"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                VALID_START_TIME_MBS"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VALID_END_TIME_MBS"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + VALID_DAY_VISITING_MBS,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid start time"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_START_TIME_DESC"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid end time"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_END_TIME_DESC"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid day visiting"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_DAY_VISITING_DESC,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // valid start time followed by invalid start time"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_START_TIME_DESC"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_START_TIME_DESC"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + INVALID_DAY_VISITING_DESC"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_NON_EMPTY + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddItineraryAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_invalidDayFormat_failure() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid day visiting, test day more than 0, checking if it is a valid day is not in parser."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_DAY_VISITING + \"-99\","
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_DAY_VISITING + \"0\","
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_DAY_VISITING + \"fadsdf\","
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_DAY_VISITING + \"03jklfas\","
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_DAY_VISITING + \"1#@312\","
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_DAY_VISITING + \"1O\", // !10"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_invalidTimeFormat_failure() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        final ItineraryTime earlyTime \u003d new ItineraryTime(\"1000\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        final ItineraryTime laterTime \u003d new ItineraryTime(\"2330\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // start time later than end time"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_START_TIME + laterTime"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_END_TIME + earlyTime"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                MESSAGE_INVALID_START_TIME);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // start time same as end time"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_START_TIME + earlyTime"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_END_TIME + earlyTime"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                MESSAGE_INVALID_START_TIME);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // start time same as end time"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_START_TIME + laterTime"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_END_TIME + laterTime"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                MESSAGE_INVALID_START_TIME);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid time format"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_START_TIME + \"2400\""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_END_TIME + laterTime"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid time format"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_START_TIME + \"-0000\""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_END_TIME + laterTime"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid time format"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_START_TIME + \"1-2-2\""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_END_TIME + laterTime"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid time format"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_START_TIME + \"hhmm\""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_END_TIME + laterTime"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid time format"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_START_TIME + \"fdasfa1200\""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_END_TIME + laterTime"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid time format"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_START_TIME + \"1234fasfd\""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_END_TIME + laterTime"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid time format"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_DESC_MBS"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_START_TIME + \"1fdasf\""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + \" \" + PREFIX_END_TIME + laterTime"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 323,
      "limkoonkiat": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itineraryattraction/DeleteItineraryAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.parser.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.DeleteItineraryAttractionCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * outside of the DeleteItineraryAttractionCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * same path through the DeleteItineraryAttractionCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class DeleteItineraryAttractionCommandParserTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private DeleteItineraryAttractionCommandParser parser \u003d new DeleteItineraryAttractionCommandParser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_FIRST.getOneBased() + \" \" + PREFIX_DAY_VISITING + INDEX_SECOND.getOneBased(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new DeleteItineraryAttractionCommand(INDEX_FIRST, INDEX_SECOND));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                INDEX_THIRD.getOneBased() + \" \" + PREFIX_DAY_VISITING + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new DeleteItineraryAttractionCommand(INDEX_THIRD, INDEX_FIRST));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_WHITESPACE + INDEX_THIRD.getOneBased() + \" \" + PREFIX_DAY_VISITING + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new DeleteItineraryAttractionCommand(INDEX_THIRD, INDEX_FIRST));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \"a\","
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItineraryAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \"\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItineraryAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \"1day/1\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItineraryAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \"day/23\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItineraryAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PREAMBLE_NON_EMPTY + INDEX_THIRD.getOneBased() + \" \" + PREFIX_DAY_VISITING + INDEX_FIRST.getOneBased(),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteItineraryAttractionCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/itineraryattraction/EditItineraryAttractionCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.logic.parser.itineraryattraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_MBS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DAY_VISITING_DESC_MBS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MBS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_EIFFEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_MBS;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.END_TIME_DESC_MBS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INDEX_DESC_EIFFEL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DAY_VISITING_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_END_TIME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_LOCATION_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_OPENING_HOURS_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PRICE_RANGE_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_RATING_DESC;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_START_TIME_DESC;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_VISITED_DESC;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_EIFFEL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.LOCATION_DESC_MBS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_EIFFEL;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OPENING_HOURS_DESC_MBS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_MBS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_RANGE_DESC_EIFFEL;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PRICE_RANGE_DESC_MBS;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.RATING_DESC_MBS;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.START_TIME_DESC_MBS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_ACTIVITY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_SIGHTSEEING;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_EIFFEL;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_VISITING_EIFFEL;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DAY_VISITING_MBS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EIFFEL;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MBS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_EIFFEL;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_EIFFEL;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_MBS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_EIFFEL;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EIFFEL;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_EIFFEL;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_MBS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_EIFFEL;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_EIFFEL;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_MBS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_EIFFEL;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_MBS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_EIFFEL;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_MBS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_EIFFEL;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_MBS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISITED_DESC_EIFFEL;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VISITED_DESC_MBS;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand.EditItineraryAttractionDescriptor;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.testutil.EditItineraryAttractionDescriptorBuilder;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class EditItineraryAttractionCommandParserTest {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditItineraryAttractionCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private EditItineraryAttractionCommandParser parser \u003d new EditItineraryAttractionCommandParser();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index dayVisiting \u003d Index.fromOneBased(Integer.parseInt(VALID_DAY_VISITING_EIFFEL));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + NAME_DESC_EIFFEL"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + PHONE_DESC_EIFFEL"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + DESCRIPTION_DESC_EIFFEL"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + LOCATION_DESC_EIFFEL"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + PRICE_RANGE_DESC_EIFFEL"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + RATING_DESC_EIFFEL"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + TAG_DESC_SIGHTSEEING"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + TAG_DESC_ACTIVITY"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + DAY_VISITING_DESC_EIFFEL"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + START_TIME_DESC_EIFFEL"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + END_TIME_DESC_EIFFEL;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new EditItineraryAttractionDescriptorBuilder()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withName(VALID_NAME_EIFFEL)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withPhone(VALID_PHONE_EIFFEL)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withEmail(VALID_EMAIL_EIFFEL)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withAddress(VALID_ADDRESS_EIFFEL)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withDescription(VALID_DESCRIPTION_EIFFEL)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withLocation(VALID_LOCATION_EIFFEL)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withOpeningHours(VALID_OPENING_HOURS_EIFFEL)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withPriceRange(VALID_PRICE_RANGE_EIFFEL)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withRating(VALID_RATING_EIFFEL)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withVisited(VALID_VISITED_EIFFEL)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withTags(VALID_TAG_SIGHTSEEING, VALID_TAG_ACTIVITY)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withStartTime(VALID_START_TIME_EIFFEL)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withEndTime(VALID_END_TIME_EIFFEL).build();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index dayVisiting \u003d Index.fromOneBased(Integer.parseInt(VALID_DAY_VISITING_EIFFEL));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_MBS + EMAIL_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor descriptor \u003d new EditItineraryAttractionDescriptorBuilder()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withPhone(VALID_PHONE_MBS).withEmail(VALID_EMAIL_EIFFEL).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                descriptor);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        final Index dayVisiting \u003d Index.fromOneBased(Integer.parseInt(VALID_DAY_VISITING_EIFFEL));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new EditItineraryAttractionDescriptorBuilder().withName(VALID_NAME_EIFFEL).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand expectedCommand \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder().withPhone(VALID_PHONE_EIFFEL).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder().withEmail(VALID_EMAIL_EIFFEL).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder().withAddress(VALID_ADDRESS_EIFFEL).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder().withDescription(VALID_DESCRIPTION_EIFFEL).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // location"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + LOCATION_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder().withLocation(VALID_LOCATION_EIFFEL).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // opening hours"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + OPENING_HOURS_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder()"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withOpeningHours(VALID_OPENING_HOURS_EIFFEL).build();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // price range"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PRICE_RANGE_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder().withPriceRange(VALID_PRICE_RANGE_EIFFEL).build();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // rating"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + RATING_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder().withRating(VALID_RATING_EIFFEL).build();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // rating"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + VISITED_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder().withVisited(VALID_VISITED_EIFFEL).build();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_ACTIVITY + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder().withTags(VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // start time"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + START_TIME_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder().withStartTime(VALID_START_TIME_EIFFEL).build();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // end time"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + END_TIME_DESC_EIFFEL + DAY_VISITING_DESC_EIFFEL;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder().withEndTime(VALID_END_TIME_EIFFEL).build();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index dayVisiting \u003d Index.fromOneBased(Integer.parseInt(VALID_DAY_VISITING_MBS));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + START_TIME_DESC_EIFFEL"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + END_TIME_DESC_EIFFEL"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + PHONE_DESC_EIFFEL"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + LOCATION_DESC_EIFFEL"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + DESCRIPTION_DESC_EIFFEL"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + OPENING_HOURS_DESC_EIFFEL"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + PRICE_RANGE_DESC_EIFFEL"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + RATING_DESC_EIFFEL"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + VISITED_DESC_EIFFEL"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + TAG_DESC_ACTIVITY"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + PHONE_DESC_EIFFEL"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + ADDRESS_DESC_EIFFEL"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + EMAIL_DESC_EIFFEL"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + TAG_DESC_ACTIVITY"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + ADDRESS_DESC_MBS"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + EMAIL_DESC_MBS"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + LOCATION_DESC_MBS"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + DESCRIPTION_DESC_MBS"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + OPENING_HOURS_DESC_MBS"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + PRICE_RANGE_DESC_MBS"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + RATING_DESC_MBS"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + START_TIME_DESC_MBS"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + END_TIME_DESC_MBS"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + VISITED_DESC_MBS"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + DAY_VISITING_DESC_MBS"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + TAG_DESC_SIGHTSEEING;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new EditItineraryAttractionDescriptorBuilder().withPhone(VALID_PHONE_MBS)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withEmail(VALID_EMAIL_MBS).withAddress(VALID_ADDRESS_MBS)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withLocation(VALID_LOCATION_MBS).withDescription(VALID_DESCRIPTION_MBS)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withOpeningHours(VALID_OPENING_HOURS_MBS).withPriceRange(VALID_PRICE_RANGE_MBS)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withRating(VALID_RATING_MBS).withVisited(VALID_VISITED_MBS)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withTags(VALID_TAG_ACTIVITY, VALID_TAG_SIGHTSEEING)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withStartTime(VALID_START_TIME_MBS)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        .withEndTime(VALID_END_TIME_MBS).build();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand expectedCommand \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index dayVisiting \u003d Index.fromOneBased(Integer.parseInt(VALID_DAY_VISITING_MBS));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_MBS + DAY_VISITING_DESC_MBS;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor descriptor \u003d new EditItineraryAttractionDescriptorBuilder()"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withPhone(VALID_PHONE_MBS).build();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand expectedCommand \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_MBS + INVALID_PHONE_DESC + ADDRESS_DESC_MBS + PHONE_DESC_MBS"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + DESCRIPTION_DESC_MBS + LOCATION_DESC_MBS + OPENING_HOURS_DESC_MBS + DAY_VISITING_DESC_MBS;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptorBuilder().withPhone(VALID_PHONE_MBS)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withEmail(VALID_EMAIL_MBS).withAddress(VALID_ADDRESS_MBS).withDescription(VALID_DESCRIPTION_MBS)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withLocation(VALID_LOCATION_MBS).withOpeningHours(VALID_OPENING_HOURS_MBS).build();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        expectedCommand \u003d new EditItineraryAttractionCommand(targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Index dayVisiting \u003d Index.fromOneBased(Integer.parseInt(VALID_DAY_VISITING_MBS));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY + DAY_VISITING_DESC_MBS;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionDescriptor descriptor \u003d new EditItineraryAttractionDescriptorBuilder()"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withTags().build();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        EditItineraryAttractionCommand expectedCommand \u003d new EditItineraryAttractionCommand("
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                targetIndex, dayVisiting, descriptor);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_EIFFEL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // no day specified"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, INDEX_DESC_EIFFEL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, INDEX_DESC_EIFFEL + DAY_VISITING_DESC_MBS,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                EditItineraryAttractionCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DAY_VISITING_DESC_EIFFEL + NAME_DESC_EIFFEL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"0\" + DAY_VISITING_DESC_EIFFEL + NAME_DESC_EIFFEL, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_NAME_DESC, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_PHONE_DESC, Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_EMAIL_DESC, Email.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid location"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_LOCATION_DESC,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Location.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid opening hours"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_OPENING_HOURS_DESC,"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                OpeningHours.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid price range"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_PRICE_RANGE_DESC,"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                PriceRange.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid rating"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_RATING_DESC, Rating.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid visited"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_VISITED_DESC,"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Visited.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid start time"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_START_TIME_DESC,"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid end time"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_END_TIME_DESC,"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                ItineraryTime.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // negative day"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"2\" + INVALID_DAY_VISITING_DESC + NAME_DESC_EIFFEL, Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // zero day"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"2\" + \" day/0\" + NAME_DESC_EIFFEL, Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // multiple day"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"2 day/213 321\" + NAME_DESC_EIFFEL, Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // not a day"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"2 day/123 yum\" + NAME_DESC_EIFFEL, Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertParseFailure(parser, \"3 day/fda\" + NAME_DESC_EIFFEL, Day.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_PHONE_DESC + EMAIL_DESC_EIFFEL,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + PHONE_DESC_MBS + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Phone.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code ItineraryAttraction} being"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // edited, parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \"1\" + DAY_VISITING_DESC_EIFFEL + TAG_DESC_ACTIVITY + TAG_DESC_SIGHTSEEING + TAG_EMPTY,"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \"1\" + DAY_VISITING_DESC_EIFFEL + TAG_DESC_ACTIVITY + TAG_EMPTY + TAG_DESC_SIGHTSEEING,"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                \"1\" + DAY_VISITING_DESC_EIFFEL + TAG_EMPTY + TAG_DESC_ACTIVITY + TAG_DESC_SIGHTSEEING,"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertParseFailure(parser, \"1\" + DAY_VISITING_DESC_EIFFEL + INVALID_NAME_DESC + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + VALID_ADDRESS_EIFFEL + VALID_PHONE_EIFFEL + VALID_DESCRIPTION_EIFFEL + VALID_LOCATION_EIFFEL"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + VALID_OPENING_HOURS_EIFFEL + VALID_PRICE_RANGE_EIFFEL + VALID_RATING_EIFFEL"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + VALID_VISITED_EIFFEL, Name.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 443,
      "limkoonkiat": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AttractionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.MBS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.exceptions.DuplicateAttractionException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AttractionListTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final AttractionList attractionList \u003d new AttractionList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(Collections.emptyList(), attractionList.getAttractionList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e attractionList.resetData(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void resetData_withValidReadOnlyTrackPad_replacesData() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList newData \u003d getTypicalAttractionList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.resetData(newData);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(newData, attractionList);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void resetData_withDuplicateAttractions_throwsDuplicatePersonException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // Two persons with the same identity fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Attraction editedMbs \u003d new AttractionBuilder(MBS).withAddress(VALID_ADDRESS_MBS).withTags(VALID_TAG_SIGHTSEEING)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        List\u003cAttraction\u003e newAttractions \u003d Arrays.asList(MBS, editedMbs);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionListStub newData \u003d new AttractionListStub(newAttractions);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DuplicateAttractionException.class, () -\u003e attractionList.resetData(newData));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void hasAttraction_nullAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e attractionList.hasAttraction(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void hasAttraction_attractionNotInTrackPad_returnsFalse() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(attractionList.hasAttraction(MBS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void hasAttraction_attractionInTrackPad_returnsTrue() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.addAttraction(MBS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(attractionList.hasAttraction(MBS));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void hasAttraction_attractionWithSameIdentityFieldsInTrackPad_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.addAttraction(MBS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Attraction editedMbs \u003d new AttractionBuilder(MBS).withAddress(VALID_ADDRESS_MBS).withTags(VALID_TAG_SIGHTSEEING)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(attractionList.hasAttraction(editedMbs));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void getAttractionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e attractionList.getAttractionList().remove(0));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * A stub ReadOnlyAttractionList whose persons list can violate interface constraints."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static class AttractionListStub implements ReadOnlyAttractionList {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        private final ObservableList\u003cAttraction\u003e attractions \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionListStub(Collection\u003cAttraction\u003e persons) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            this.attractions.setAll(persons);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        public ObservableList\u003cAttraction\u003e getAttractionList() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            return attractions;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 3,
      "leeyorktat": 77,
      "limkoonkiat": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ItineraryListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryListTest {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    //todo add stuff"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ATTRACTIONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_ITINERARIES;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.MBS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.SUNTEC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.PARIS_TRIP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.SG_ZOOS_TOUR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.AttractionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.AttractionListBuilder;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.ItineraryListBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(new AttractionList(), new AttractionList(modelManager.getAttractionList()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(new ItineraryList(), new ItineraryList(modelManager.getItineraryList()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setAttractionListFilePath(Paths.get(\"track/pad/file/attraction\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setItineraryListFilePath(Paths.get(\"track/pad/file/itinerary\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setAttractionListFilePath(Paths.get(\"new/track/pad/file/attraction\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setItineraryListFilePath(Paths.get(\"new/track/pad/file/itinerary\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setAttractionListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setAttractionListFilePath(null));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setAttractionListFilePath_validPath_setsAttractionListFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Path path \u003d Paths.get(\"track/pad/file/path\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        modelManager.setAttractionListFilePath(path);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(path, modelManager.getAttractionListFilePath());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void hasAttraction_nullAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasAttraction(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void hasAttraction_attractionNotInTrackPad_returnsFalse() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(modelManager.hasAttraction(MBS));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void hasAttraction_attractionInTrackPad_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        modelManager.addAttraction(MBS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(modelManager.hasAttraction(MBS));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void getFilteredAttractionList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredAttractionList().remove(0));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraryListFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setItineraryListFilePath(null));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraryListFilePath_validPath_setsItineraryListFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Path path \u003d Paths.get(\"track/pad/file/path\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        modelManager.setItineraryListFilePath(path);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(path, modelManager.getItineraryListFilePath());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void hasItinerary_nullItinerary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasItinerary(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void hasItinerary_itineraryNotInTrackPad_returnsFalse() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(modelManager.hasItinerary(PARIS_TRIP));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void hasItinerary_itineraryInTrackPad_returnsTrue() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        modelManager.addItinerary(PARIS_TRIP);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(modelManager.hasItinerary(PARIS_TRIP));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void getFilteredItineraryList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredItineraryList().remove(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList attractionList \u003d new AttractionListBuilder().withAttraction(MBS).withAttraction(SUNTEC).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList differentAttractionList \u003d new AttractionList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryList itineraryList \u003d new ItineraryListBuilder().withItinerary(SG_ZOOS_TOUR).withItinerary(PARIS_TRIP)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryList differentItineraryList \u003d new ItineraryList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        modelManager \u003d new ModelManager(attractionList, itineraryList, userPrefs);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(attractionList, itineraryList, userPrefs);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different attractionList -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAttractionList, itineraryList, userPrefs)));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different itineraryList -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(attractionList, differentItineraryList, userPrefs)));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different filteredAttractionList -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String[] attKeywords \u003d MBS.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        modelManager.updateFilteredAttractionList(new AttractionContainsKeywordsPredicate(Arrays.asList(attKeywords)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(attractionList, itineraryList, userPrefs)));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different filteredItineraryList -\u003e returns false"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String[] itiKeywords \u003d PARIS_TRIP.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        modelManager.updateFilteredItineraryList(new ItineraryContainsKeywordsPredicate(Arrays.asList(itiKeywords)));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(attractionList, itineraryList, userPrefs)));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        modelManager.updateFilteredAttractionList(PREDICATE_SHOW_ALL_ATTRACTIONS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        modelManager.updateFilteredItineraryList(PREDICATE_SHOW_ALL_ITINERARIES);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        differentUserPrefs.setAttractionListFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(attractionList, itineraryList, differentUserPrefs)));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 13,
      "-": 98,
      "limkoonkiat": 74
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setAttractionListPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setAttractionListFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraryListPath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setItineraryListFilePath(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "limkoonkiat": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/AddressTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 2,
      "leeyorktat": 1,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/AttractionContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AttractionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\","
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \"Street\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_addressContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"Mandai\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withAddress(\"Mandai Road\").build()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Road\", \"Mandai\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withAddress(\"Mandai Road\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Mandai\", \"Way\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withAddress(\"Mandai Road\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"ManDaI\", \"WaY\"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withName(\"mAnDaI wAy\").build()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Road\", \"Bob\"));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withDescription(\"Road Bob\").build()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Way\"));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withDescription(\"Alice Way\").build()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"WaY\"));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withDescription(\"Alice WaY\").build()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_emailContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"A@Bx\"));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withEmail(\"A@Bx\").build()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"A\", \"Bob\", \"A@Bob\"));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withEmail(\"A@Bob\").build()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Way\", \"Alice@Way\"));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withEmail(\"Alice@Way\").build()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"WaY\", \"Alice@WaY\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withEmail(\"Alice@WaY\").build()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Whole email should match"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"@Way\", \"Alice@Wa\"));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withEmail(\"AliCe@WAy\").build()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_locationContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"Singapore\"));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withLocation(\"Singapore, Singapore\").build()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Find command matches whole words, it would not be able to find France if it is \"France,\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Paris\", \"France\"));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withLocation(\"France , Paris\").build()));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"USA\", \"Netherlands\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withLocation(\"Netherlands , Amsterdam\").build()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"NethErlands\", \"AmStErDaM\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withLocation(\"NetheRlAnds, AmstErdam\").build()));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_openingHoursContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"1200-1300\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withOpeningHours(\"1200-1300\").build()));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"1200-1300\", \"-1300\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withOpeningHours(\"1200-1300\").build()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_phoneContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"123456789\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPhone(\"123456789\").build()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"6789\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"12345\", \"654987\"));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPhone(\"12345\").build()));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_priceRangeContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"LOW\"));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPriceRange(\"LOW\").build()));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"MED\", \"MEDIUM\"));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPriceRange(\"MEDIUM\").build()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"HIGH\", \"MED\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPriceRange(\"HIGH\").build()));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"loW\", \"MED\"));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withPriceRange(\"LOW\").build()));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_ratingContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"1.1\"));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withRating(\"1.1\").build()));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"2.1\", \"1.1\"));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withRating(\"2.1\").build()));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"1.1\", \"1.6\"));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withRating(\"1.1\").build()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_tagContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.singletonList(\"warm\"));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String[] tags \u003d {\"warm\", \"cold\"};"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"warm\", \"cold\"));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"warm\", \"sexy\"));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertTrue(predicate.test(new AttractionBuilder().withTags(\"sexy\").build()));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        // Mixed-case keywords does not work for tags as tags are case sensitive"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"WaRM\", \"CoLD\"));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public void test_fieldDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withAddress(\"Alice\").build()));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withEmail(\"ZOO@GMAIL.COM\").build()));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withLocation(\"Alice\").build()));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withOpeningHours(\"1200-1300\").build()));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withPhone(\"123456\").build()));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withPriceRange(\"MEDIUM\").build()));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withRating(\"1.1\").build()));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Mandai\", \"Drive\"));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withAddress(\"Marina Way\").build()));"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"This\", \"is\", \"The\"));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withDescription(\"Big theme park\").build()));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"zoo@gmail.com\"));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withEmail(\"USS@gmail.com\").build()));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"Malaysia\"));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withLocation(\"Singapore\").build()));"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"1200-1300\"));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withOpeningHours(\"1000-1700\").build()));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"987654321\"));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withPhone(\"123456789\").build()));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"HIGH\"));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withPriceRange(\"MEDIUM\").build()));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"1\"));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withRating(\"1.2\").build()));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new AttractionContainsKeywordsPredicate(Arrays.asList(\"hot\"));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        String[] tags \u003d {\"warm\", \"cold\"};"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        assertFalse(predicate.test(new AttractionBuilder().withTags(tags).build()));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "leeyorktat": 8,
      "peter-yeh": 171,
      "-": 50,
      "limkoonkiat": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/AttractionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_EIFFEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EIFFEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_EIFFEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_EIFFEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EIFFEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_EIFFEL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_EIFFEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_EIFFEL;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_EIFFEL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_EIFFEL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.MBS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.SUNTEC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class AttractionTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Attraction attraction \u003d new AttractionBuilder().build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e attraction.getTags().remove(0));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void isSameAttraction() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(MBS.isSameAttraction(MBS));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(MBS.isSameAttraction(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different name and location -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction editedMbs \u003d new AttractionBuilder(MBS).withName(VALID_NAME_EIFFEL)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withLocation(VALID_LOCATION_EIFFEL)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(MBS.isSameAttraction(editedMbs));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedMbs \u003d new AttractionBuilder(MBS).withName(VALID_NAME_EIFFEL).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(MBS.isSameAttraction(editedMbs));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedMbs \u003d new AttractionBuilder(MBS).withLocation(VALID_LOCATION_EIFFEL).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(MBS.isSameAttraction(editedMbs));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same name, same location, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedMbs \u003d new AttractionBuilder(MBS).withPriceRange(VALID_PRICE_RANGE_EIFFEL)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withAddress(VALID_ADDRESS_EIFFEL)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_EIFFEL)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "                .withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(MBS.isSameAttraction(editedMbs));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Attraction mbsCopy \u003d new AttractionBuilder(MBS).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(MBS.equals(mbsCopy));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(MBS.equals(MBS));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(MBS.equals(null));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(MBS.equals(5));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different attraction -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(MBS.equals(SUNTEC));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Attraction editedSuntec \u003d new AttractionBuilder(SUNTEC).withName(VALID_NAME_EIFFEL).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withPhone(VALID_PHONE_EIFFEL).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withEmail(VALID_EMAIL_EIFFEL).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withAddress(VALID_ADDRESS_EIFFEL).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withDescription(VALID_DESCRIPTION_EIFFEL).build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different location -\u003e returns false"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withLocation(VALID_LOCATION_EIFFEL).build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different opening hours -\u003e returns false"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withOpeningHours(VALID_OPENING_HOURS_EIFFEL).build();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different price range -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withPriceRange(VALID_PRICE_RANGE_EIFFEL).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // different rating -\u003e returns false"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withRating(VALID_RATING_EIFFEL).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // different visited -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withVisited(VALID_VISITED_EIFFEL).build();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        editedSuntec \u003d new AttractionBuilder(SUNTEC).withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(SUNTEC.equals(editedSuntec));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 30,
      "Robinho98": 5,
      "leeyorktat": 62,
      "limkoonkiat": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/EmailTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String invalidEmail \u003d \"email\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\")); // minimal"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\")); // alphabets only"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\")); // numeric local part and domain name"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\")); // long domain name"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\")); // long local part"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 3,
      "leeyorktat": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/LocationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class LocationTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Location(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_invalidLocation_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String invalidLocation \u003d \"\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Location(invalidLocation));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isValidLocation() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null location"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Location.isValidLocation(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid locations"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Location.isValidLocation(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Location.isValidLocation(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // valid locations"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Location.isValidLocation(\"Singapore, Singapore\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Location.isValidLocation(\"-\")); // one character"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Location.isValidLocation(\"USA, California, San Francisco\")); // long location"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/OpeningHoursTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class OpeningHoursTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new OpeningHours(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_invalidOpeningHours_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String invalidOpeningHours \u003d \"4-8\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new OpeningHours(invalidOpeningHours));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void isValidOpeningHours() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // null openingHours"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e OpeningHours.isValidOpeningHours(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // invalid openingHours"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"-2359\")); // missing opening time"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"00002359\")); // missing \u0027-\u0027 symbol"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"0000-\")); // missing closing time"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"7am-2359\")); // invalid opening time"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"333-2359\")); // invalid opening time"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"3333-2359\")); // invalid opening time"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1200-11pm\")); // invalid closing time"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1200-240\")); // invalid closing time"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1200-2400\")); // invalid closing time"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1.30-2359\")); // dot in opening time"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1330-11.59\")); // dot in closing time"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"13 30-2359\")); // spaces in opening time"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1330- 23 59\")); // spaces in closing time"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\" 1330-2359\")); // leading space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1330-2359 \")); // trailing space"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1330--2359\")); // double \u0027-\u0027 symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"13-30-2359\")); // \u0027-\u0027 symbol in opening time"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(OpeningHours.isValidOpeningHours(\"1330-23-59\")); // \u0027-\u0027 symbol in closing time"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(OpeningHours.isValidOpeningHours(\"\")); // empty string"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(OpeningHours.isValidOpeningHours(\"0000-2359\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(OpeningHours.isValidOpeningHours(\"2300-1000\")); //opening time can be more than closing time"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/PhoneTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String invalidPhone \u003d \"+6591857314\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"+6593121534\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312-1534\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 4,
      "leeyorktat": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/PriceRangeTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class PriceRangeTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new PriceRange(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_invalidPriceRange_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String invalidPriceRange \u003d \"average\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new PriceRange(invalidPriceRange));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void isValidPriceRange() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // null price range"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e PriceRange.isValidPriceRange(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // invalid price ranges"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(PriceRange.isValidPriceRange(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(PriceRange.isValidPriceRange(\"lo\")); //incomplete"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(PriceRange.isValidPriceRange(\"average\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(PriceRange.isValidPriceRange(\" MEDIUM\")); // leading space"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(PriceRange.isValidPriceRange(\"MEDIUM \")); // trailing space"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // valid price ranges"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(PriceRange.isValidPriceRange(\"\")); // empty string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(PriceRange.isValidPriceRange(\"LOW\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(PriceRange.isValidPriceRange(\"MEDIUM\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(PriceRange.isValidPriceRange(\"HIGH\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(PriceRange.isValidPriceRange(\"HiGh\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 39,
      "Robinho98": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/RatingTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class RatingTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Rating(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_invalidRating_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String invalidRating \u003d \"5.1\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Rating(invalidRating));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void isValidRating() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Rating.isValidRating(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // invalid ratings"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\"5.1\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\"0\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\".5\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\"4.50\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\" 0.5\")); // leading space"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\"0.5 \")); // trailing space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Rating.isValidRating(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // valid ratings"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Rating.isValidRating(\"0.0\")); // lowest rating"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Rating.isValidRating(\"5.0\")); // highest rating"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Rating.isValidRating(\"2.5\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Rating.isValidRating(\"\")); // empty string"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/UniqueAttractionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.BOTANIC_GARDENS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.SUNTEC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.exceptions.AttractionNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.model.attraction.exceptions.DuplicateAttractionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "import seedu.address.testutil.AttractionBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "public class UniqueAttractionListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    private final UniqueAttractionList uniqueAttractionList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void contains_nullAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAttractionList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void contains_attractionNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertFalse(uniqueAttractionList.contains(BOTANIC_GARDENS));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void contains_attractionInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(uniqueAttractionList.contains(BOTANIC_GARDENS));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void contains_attractionWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Attraction editedAttraction \u003d new AttractionBuilder(BOTANIC_GARDENS)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            .withAddress(VALID_ADDRESS_MBS).withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertTrue(uniqueAttractionList.contains(editedAttraction));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void add_nullAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAttractionList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void add_duplicateAttraction_throwsDuplicateAttractionException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(DuplicateAttractionException.class, () -\u003e uniqueAttractionList.add(BOTANIC_GARDENS));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction_nullTargetAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.setAttraction(null, BOTANIC_GARDENS));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction_nullEditedAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.setAttraction(BOTANIC_GARDENS, null));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction_targetAttractionNotInList_throwsAttractionNotFoundException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(AttractionNotFoundException.class, ()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.setAttraction(BOTANIC_GARDENS, BOTANIC_GARDENS));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction_editedAttractionIsSameAttraction_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.setAttraction(BOTANIC_GARDENS, BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        UniqueAttractionList expectedUniqueAttractionList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        expectedUniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertEquals(expectedUniqueAttractionList, uniqueAttractionList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction_editedAttractionHasSameIdentity_success() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        Attraction editedAttraction \u003d new AttractionBuilder(BOTANIC_GARDENS)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            .withAddress(VALID_ADDRESS_MBS).withTags(VALID_TAG_SIGHTSEEING).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.setAttraction(BOTANIC_GARDENS, editedAttraction);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        UniqueAttractionList expectedUniqueAttractionList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        expectedUniqueAttractionList.add(editedAttraction);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertEquals(expectedUniqueAttractionList, uniqueAttractionList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.setAttraction(BOTANIC_GARDENS, SUNTEC);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        UniqueAttractionList expectedUniqueAttractionList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        expectedUniqueAttractionList.add(SUNTEC);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertEquals(expectedUniqueAttractionList, uniqueAttractionList);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttraction_editedAttractionHasNonUniqueIdentity_throwsDuplicateAttractionException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(SUNTEC);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(DuplicateAttractionException.class, ()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.setAttraction(BOTANIC_GARDENS, SUNTEC));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void remove_nullAttraction_throwsNullPointerException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAttractionList.remove(null));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void remove_attractionDoesNotExist_throwsAttractionNotFoundException() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(AttractionNotFoundException.class, () -\u003e uniqueAttractionList.remove(BOTANIC_GARDENS));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void remove_existingAttraction_removesAttraction() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.remove(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        UniqueAttractionList expectedUniquePersonList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueAttractionList);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions_nullUniqueAttractionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, ()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.setAttractions((UniqueAttractionList) null));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions_uniqueAttractionList_replacesOwnListWithProvidedUniqueAttractionList() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        UniqueAttractionList expectedUniqueAttractionList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        expectedUniqueAttractionList.add(SUNTEC);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.setAttractions(expectedUniqueAttractionList);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertEquals(expectedUniqueAttractionList, uniqueAttractionList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueAttractionList.setAttractions((List\u003cAttraction\u003e) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.add(BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        List\u003cAttraction\u003e attractionList \u003d Collections.singletonList(SUNTEC);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        uniqueAttractionList.setAttractions(attractionList);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        UniqueAttractionList expectedUniqueAttractionList \u003d new UniqueAttractionList();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedUniqueAttractionList.add(SUNTEC);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedUniqueAttractionList, uniqueAttractionList);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void setAttractions_listWithDuplicateAttractions_throwsDuplicateAttractionException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        List\u003cAttraction\u003e listWithDuplicateAttractions \u003d Arrays.asList(BOTANIC_GARDENS, BOTANIC_GARDENS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(DuplicateAttractionException.class, ()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.setAttractions(listWithDuplicateAttractions));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "            -\u003e uniqueAttractionList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "leeyorktat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 2,
      "leeyorktat": 171,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/attraction/VisitedTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.model.attraction;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class VisitedTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Visited(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void constructor_invalidVisited_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String invalidVisited \u003d \"not yet\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Visited(invalidVisited));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void isValidVisited() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // null rating"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Visited.isValidVisited(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // invalid ratings"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\"Tru\")); //Spelling Errors"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\"Fase\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\"Tue\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\"TRUE1\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\" TRUE\")); // leading space"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertFalse(Visited.isValidVisited(\"TRUE \")); // trailing space"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        // valid price ranges"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Visited.isValidVisited(\"\")); // empty string"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(Visited.isValidVisited(\"TRUE\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(Visited.isValidVisited(\"FALSE\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(Visited.isValidVisited(\"False\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertTrue(Visited.isValidVisited(\"TruE\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 41,
      "yuxuanxc": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // null description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        // valid descriptions"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Description.isValidDescription(\"World\u0027s first Gudetama themed cafe.\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Description.isValidDescription(\"-\")); // one character"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Description.isValidDescription("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                \"The park offers a haven for close to 3500 birds across 400 species.\")); // long address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 27,
      "limkoonkiat": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/commons/NameTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.commons;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itinerary/BudgetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Budget(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_invalidBudget_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String invalidBudget \u003d \"5.000\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Budget(invalidBudget));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isValidBudget() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null budget"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Budget.isValidBudget(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid budget"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertFalse(Budget.isValidBudget(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"-1\")); // non-positive value"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"twenty\")); // non-numeric value"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"2E.34\")); // non-numeric value"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"$23\")); // non-numeric value"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"23.345\")); // too many decimal places"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // valid budget"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"\")); // empty string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"0\")); // zero value"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"1660\")); // non-decimal value"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"2000.57\")); // decimal value"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"23.5\")); // decimal value can be converted to 2 decimal places"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 3,
      "limkoonkiat": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itinerary/DayTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class DayTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_nullDayNumber_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Day(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_invalidDayNumber_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        int invalidDayNumber \u003d -1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Day(-1));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isValidDayNumber() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null day"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Day.isValidDayNumber(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // invalid day number"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Day.isValidDayNumber(0)); // zero"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(Day.isValidDayNumber(-1)); // negative number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // valid day number"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(Day.isValidDayNumber(2));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itinerary/ItineraryContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraryAttractions.JURONG_BIRD_PARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraryAttractions.SINGAPORE_ZOO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class ItineraryContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different predicate -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryContainsKeywordsPredicate(Collections.singletonList(\"Paris\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withName(\"Paris trip\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"paris\", \"trip\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withName(\"Paris trip\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"Paris\", \"Japan\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withName(\"Paris trip\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"pARiS\", \"triP\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withName(\"Paris trip\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Keywords match start date, end date and description but does not match name"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"Maldives\", \"12-01-2020\", \"14-01-2020\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                \"diving\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withName(\"Malaysia\").withStartDate(\"12-01-2020\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withEndDate(\"14-01-2020\").withDescription(\"Weekend diving\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void test_descriptionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryContainsKeywordsPredicate(Collections.singletonList(\"springs\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withDescription(\"Hot springs hotel\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"mountain\", \"hiking\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withDescription(\"mountain hiking\").build()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"mountain\", \"hiking\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withDescription(\"mountain viewing\").build()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"shOPPIng\", \"maLL\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withDescription(\"Shopping mall\").build()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void test_startDateContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryContainsKeywordsPredicate(Collections.singletonList(\"11-12-2020\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withStartDate(\"11-12-2020\").build()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"11-12-2020\", \"12-12-2020\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withStartDate(\"11-12-2020\").build()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void test_endDateContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryContainsKeywordsPredicate(Collections.singletonList(\"16-12-2020\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withEndDate(\"16-12-2020\").build()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"11-12-2020\", \"16-12-2020\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withEndDate(\"16-12-2020\").build()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void test_budgetContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryContainsKeywordsPredicate(Collections.singletonList(\"200\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withBudget(\"200\").build()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"200\", \"300\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withBudget(\"200\").build()));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // With $ sign"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"$200\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder().withBudget(\"200\").build()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void test_attractionContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryContainsKeywordsPredicate(Collections.singletonList(\"Jurong\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withItineraryAttraction(JURONG_BIRD_PARK, INDEX_FIRST).build()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"Jurong\", \"zoo\"));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withItineraryAttraction(JURONG_BIRD_PARK, INDEX_FIRST)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withItineraryAttraction(SINGAPORE_ZOO, INDEX_FIRST).build()));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"jurong\", \"sexy\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withItineraryAttraction(JURONG_BIRD_PARK, INDEX_FIRST).build()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"jURoNG\", \"ZoO\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(predicate.test(new ItineraryBuilder()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withItineraryAttraction(JURONG_BIRD_PARK, INDEX_FIRST)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withItineraryAttraction(SINGAPORE_ZOO, INDEX_FIRST).build()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void test_fieldDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new ItineraryContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(predicate.test(new ItineraryBuilder().withName(\"grand canyon\").build()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(predicate.test(new ItineraryBuilder().withDescription(\"racing\").build()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"ski\"));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(predicate.test(new ItineraryBuilder().withName(\"Paris trip\").build()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"This\", \"is\", \"The\"));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(predicate.test(new ItineraryBuilder().withDescription(\"Big theme park\").build()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        predicate \u003d new ItineraryContainsKeywordsPredicate(Arrays.asList(\"Antarctica\"));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(predicate.test(new ItineraryBuilder()"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withItineraryAttraction(JURONG_BIRD_PARK, INDEX_FIRST)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withItineraryAttraction(SINGAPORE_ZOO, INDEX_FIRST).build()));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 183
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itinerary/ItineraryDateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class ItineraryDateTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ItineraryDate firstDate \u003d new ItineraryDate(\"25-02-2020\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final ItineraryDate secondDate \u003d new ItineraryDate(\"03-03-2020\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ItineraryDate(null));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new ItineraryDate(invalidDate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isValidItineraryDate() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ItineraryDate.isValidDate(null));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // blank date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\" \")); //spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Invalid dates"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"31-11-2022\")); // Month with invalid day"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"00-12-2020\")); // Invalid day"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"32-12-2020\")); // Invalid day"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"5-10-2005\")); // Invalid day"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"04-00-2023\")); // Invalid month"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"09-13-2010\")); // Invalid month"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"15-1-2005\")); // Invalid month"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"15-1-5\")); // Invalid year"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"15-1-15\")); // Invalid year"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"15-1-2005\")); // Invalid year"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"29-02-2006\")); // Not leap year"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"12 02 2007\")); // Invalid format"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"12/02/2007\")); // Invalid format"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"2001 12 20\")); // Invalid format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"30 04\")); // Invalid format"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"27-08\")); // Invalid format"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"12 Jan\")); // Invalid format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(ItineraryDate.isValidDate(\"30 April 2013\")); // Invalid format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Valid dates"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(ItineraryDate.isValidDate(\"25-12-2017\")); // Valid format"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(ItineraryDate.isValidDate(\"29-02-2024\")); // Leap year"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void getLocalDate_validInput_correctResult() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryDate itineraryDate \u003d new ItineraryDate(\"28-02-2024\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(itineraryDate.getLocalDate(), LocalDate.parse(\"2024-02-28\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isBeforeItineraryDate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(firstDate.isBefore(secondDate));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(firstDate.isBefore(firstDate));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isAfterItineraryDate() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(secondDate.isAfter(firstDate));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(firstDate.isAfter(firstDate));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isEqualItineraryDate() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(firstDate.isEqual(firstDate));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void daysBetweenItineraryDates() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(ItineraryDate.daysBetween(firstDate, secondDate), 8);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 90
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itinerary/ItineraryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_JAPAN_TRIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_PARIS_TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JAPAN_TRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_PARIS_TRIP;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_PARIS_TRIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JAPAN_TRIP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_PARIS_TRIP;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_JAPAN_TRIP;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.JAPAN_TRIP;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.PARIS_TRIP;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "class ItineraryTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary itinerary \u003d new ItineraryBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e itinerary.getDays().remove(0));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void isSameItinerary() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(PARIS_TRIP.isSameItinerary(PARIS_TRIP));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(PARIS_TRIP.isSameItinerary(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary editedParis \u003d new ItineraryBuilder(PARIS_TRIP).withName(VALID_NAME_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(PARIS_TRIP.isSameItinerary(editedParis));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same name, same start date, same end date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedParis \u003d new ItineraryBuilder(PARIS_TRIP)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JAPAN_TRIP)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withBudget(VALID_BUDGET_JAPAN_TRIP)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(PARIS_TRIP.isSameItinerary(editedParis));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary parisCopy \u003d new ItineraryBuilder(PARIS_TRIP).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(PARIS_TRIP.equals(parisCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(PARIS_TRIP.equals(PARIS_TRIP));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(PARIS_TRIP.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(PARIS_TRIP.equals(5));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different itinerary -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(PARIS_TRIP.equals(JAPAN_TRIP));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary editedJapan \u003d new ItineraryBuilder(JAPAN_TRIP).withName(VALID_NAME_PARIS_TRIP).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(JAPAN_TRIP.equals(editedJapan));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedJapan \u003d new ItineraryBuilder(JAPAN_TRIP).withDescription(VALID_DESCRIPTION_PARIS_TRIP).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(JAPAN_TRIP.equals(editedJapan));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different start date -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary editedParis \u003d new ItineraryBuilder(PARIS_TRIP).withStartDate(VALID_START_DATE_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(PARIS_TRIP.equals(editedParis));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different end date -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedJapan \u003d new ItineraryBuilder(JAPAN_TRIP).withEndDate(VALID_END_DATE_PARIS_TRIP).build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(JAPAN_TRIP.equals(editedJapan));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // different budget -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        editedJapan \u003d new ItineraryBuilder(JAPAN_TRIP).withBudget(VALID_BUDGET_PARIS_TRIP).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(JAPAN_TRIP.equals(editedJapan));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/model/itinerary/UniqueItineraryListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.model.itinerary;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_JAPAN_TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JAPAN_TRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.JAPAN_TRIP;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.PARIS_TRIP;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.exceptions.DuplicateItineraryException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.exceptions.ItineraryNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.ItineraryBuilder;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class UniqueItineraryListTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private final UniqueItineraryList uniqueItineraryList \u003d new UniqueItineraryList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void contains_nullItinerary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItineraryList.contains(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void contains_itineraryNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(uniqueItineraryList.contains(PARIS_TRIP));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void contains_itineraryInList_returnsTrue() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.add(PARIS_TRIP);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(uniqueItineraryList.contains(PARIS_TRIP));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void contains_itineraryWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.add(PARIS_TRIP);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary editedItinerary \u003d new ItineraryBuilder(PARIS_TRIP)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JAPAN_TRIP).withBudget(VALID_BUDGET_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertTrue(uniqueItineraryList.contains(editedItinerary));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void add_nullItinerary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItineraryList.add(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void add_duplicateItinerary_throwsDuplicateItineraryException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.add(PARIS_TRIP);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DuplicateItineraryException.class, () -\u003e uniqueItineraryList.add(PARIS_TRIP));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItinerary_nullTargetItinerary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItineraryList.setItinerary(null, PARIS_TRIP));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItinerary_nullEditedItinerary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItineraryList.setItinerary(PARIS_TRIP, null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItinerary_targetItineraryNotInList_throwsItineraryNotFoundException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ItineraryNotFoundException.class, () -\u003e uniqueItineraryList.setItinerary(PARIS_TRIP, PARIS_TRIP));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItinerary_editedItineraryIsSameItinerary_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.add(PARIS_TRIP);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.setItinerary(PARIS_TRIP, PARIS_TRIP);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        UniqueItineraryList expectedUniqueItineraryList \u003d new UniqueItineraryList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedUniqueItineraryList.add(PARIS_TRIP);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedUniqueItineraryList, uniqueItineraryList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItinerary_editedItineraryHasSameIdentity_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.add(PARIS_TRIP);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Itinerary editedItinerary \u003d new ItineraryBuilder(PARIS_TRIP)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_JAPAN_TRIP).withBudget(VALID_BUDGET_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.setItinerary(PARIS_TRIP, editedItinerary);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        UniqueItineraryList expectedUniqueItineraryList \u003d new UniqueItineraryList();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedUniqueItineraryList.add(editedItinerary);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedUniqueItineraryList, uniqueItineraryList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setPerson_editedPersonHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.add(PARIS_TRIP);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.setItinerary(PARIS_TRIP, JAPAN_TRIP);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        UniqueItineraryList expectedUniqueItineraryList \u003d new UniqueItineraryList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedUniqueItineraryList.add(JAPAN_TRIP);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedUniqueItineraryList, uniqueItineraryList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItinerary_editedItineraryHasNonUniqueIdentity_throwsDuplicateItineraryException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.add(PARIS_TRIP);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.add(JAPAN_TRIP);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DuplicateItineraryException.class, () -\u003e uniqueItineraryList.setItinerary(PARIS_TRIP, JAPAN_TRIP));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void remove_nullItinerary_throwsNullPointerException() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItineraryList.remove(null));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void remove_itineraryDoesNotExist_throwsItineraryNotFoundException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(ItineraryNotFoundException.class, () -\u003e uniqueItineraryList.remove(PARIS_TRIP));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void remove_existingItinerary_removesItinerary() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.add(PARIS_TRIP);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.remove(PARIS_TRIP);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        UniqueItineraryList expectedUniquePersonList \u003d new UniqueItineraryList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedUniquePersonList, uniqueItineraryList);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraries_nullUniqueItineraryList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItineraryList.setItineraries((UniqueItineraryList) null));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraries_uniqueItineraryList_replacesOwnListWithProvidedUniqueItineraryList() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.add(PARIS_TRIP);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        UniqueItineraryList expectedUniqueItineraryList \u003d new UniqueItineraryList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedUniqueItineraryList.add(JAPAN_TRIP);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.setItineraries(expectedUniqueItineraryList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedUniqueItineraryList, uniqueItineraryList);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraries_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueItineraryList.setItineraries((List\u003cItinerary\u003e) null));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraries_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.add(PARIS_TRIP);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cItinerary\u003e itineraryList \u003d Collections.singletonList(JAPAN_TRIP);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        uniqueItineraryList.setItineraries(itineraryList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        UniqueItineraryList expectedUniqueItineraryList \u003d new UniqueItineraryList();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        expectedUniqueItineraryList.add(JAPAN_TRIP);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(expectedUniqueItineraryList, uniqueItineraryList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void setItineraries_listWithDuplicateItineraries_throwsDuplicateItineraryException() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cItinerary\u003e listWithDuplicateItineraries \u003d Arrays.asList(PARIS_TRIP, PARIS_TRIP);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DuplicateItineraryException.class, ()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            -\u003e uniqueItineraryList.setItineraries(listWithDuplicateItineraries));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            -\u003e uniqueItineraryList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 171
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedAttractionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.storage.JsonAdaptedAttraction.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.EIFFEL_TOWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class JsonAdaptedAttractionTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Sing@poreZ00\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_LOCATION \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_OPENING_HOURS \u003d \"1-12\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_PRICE_RANGE \u003d \"AVERAGE\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_RATING \u003d \"9\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_VISITED \u003d \"going\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_NAME \u003d EIFFEL_TOWER.getName().toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_PHONE \u003d EIFFEL_TOWER.getPhone().toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_EMAIL \u003d EIFFEL_TOWER.getEmail().toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_ADDRESS \u003d EIFFEL_TOWER.getAddress().toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d EIFFEL_TOWER.getDescription().toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_LOCATION \u003d EIFFEL_TOWER.getLocation().toString();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_OPENING_HOURS \u003d EIFFEL_TOWER.getOpeningHours().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_PRICE_RANGE \u003d EIFFEL_TOWER.getPriceRange().value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_RATING \u003d EIFFEL_TOWER.getRating().value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private static final String VALID_VISITED \u003d EIFFEL_TOWER.getVisited().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final List\u003cJsonAdaptedTag\u003e VALID_TAGS \u003d EIFFEL_TOWER.getTags().stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(JsonAdaptedTag::new)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_validAttractionDetails_returnsAttraction() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(EIFFEL_TOWER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(EIFFEL_TOWER, attraction.toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(INVALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(null, VALID_PHONE,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, INVALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                null, VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, INVALID_EMAIL,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, null, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, null, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null, VALID_LOCATION,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_invalidLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, INVALID_LOCATION,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d Location.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_nullLocation_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, null,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Location.class.getSimpleName());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_invalidOpeningHours_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        INVALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d OpeningHours.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_nullOpeningHours_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                null, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, OpeningHours.class.getSimpleName());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_invalidPriceRange_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_OPENING_HOURS, INVALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d PriceRange.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_nullPriceRange_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_OPENING_HOURS, null, VALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, PriceRange.class.getSimpleName());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_invalidRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, INVALID_RATING, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d Rating.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_nullRating_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, null, VALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Rating.class.getSimpleName());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void toModelType_invalidVisited_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, INVALID_VISITED, VALID_TAGS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String expectedMessage \u003d Visited.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public void toModelType_nullVisited_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d new JsonAdaptedAttraction(VALID_NAME,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, null, VALID_TAGS);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Visited.class.getSimpleName());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, attraction::toModelType);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cJsonAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new JsonAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedAttraction attraction \u003d"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedAttraction(VALID_NAME, VALID_PHONE, VALID_EMAIL,"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                        VALID_ADDRESS, VALID_DESCRIPTION, VALID_LOCATION,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                        VALID_OPENING_HOURS, VALID_PRICE_RANGE, VALID_RATING, VALID_VISITED, invalidTags);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, attraction::toModelType);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 112,
      "Robinho98": 31,
      "-": 64,
      "limkoonkiat": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedItineraryAttractionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.storage.JsonAdaptedItineraryAttraction.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.JURONG_BIRD_PARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.TypicalItineraryAttractions.NIGHT_SAFARI;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class JsonAdaptedItineraryAttractionTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String INVALID_TIME \u003d \"10\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final JsonAdaptedAttraction VALID_ATTRACTION \u003d new JsonAdaptedAttraction(JURONG_BIRD_PARK);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_START_TIME \u003d NIGHT_SAFARI.getStartTime().toString();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final String VALID_END_TIME \u003d NIGHT_SAFARI.getEndTime().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_validItineraryAttractionDetails_returnsItineraryAttraction() throws Exception {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedItineraryAttraction itineraryAttraction \u003d new JsonAdaptedItineraryAttraction(NIGHT_SAFARI);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertEquals(NIGHT_SAFARI, itineraryAttraction.toModelType());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_invalidStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedItineraryAttraction itineraryAttraction \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedItineraryAttraction(VALID_ATTRACTION, INVALID_TIME, VALID_END_TIME);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d ItineraryTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itineraryAttraction::toModelType);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_nullStartTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedItineraryAttraction itineraryAttraction \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedItineraryAttraction(VALID_ATTRACTION, null, VALID_END_TIME);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ItineraryTime.class.getSimpleName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itineraryAttraction::toModelType);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_invalidEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedItineraryAttraction itineraryAttraction \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedItineraryAttraction(VALID_ATTRACTION, VALID_START_TIME, INVALID_TIME);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d ItineraryTime.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itineraryAttraction::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_nullEndTime_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        JsonAdaptedItineraryAttraction itineraryAttraction \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                new JsonAdaptedItineraryAttraction(VALID_ATTRACTION, VALID_START_TIME, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ItineraryTime.class.getSimpleName());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itineraryAttraction::toModelType);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAdaptedItineraryTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.storage.JsonAdaptedItinerary.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.PARIS_TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonAdaptedItineraryTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_NAME \u003d \"Tr!p\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_DATE \u003d \"23-13-2019\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String INVALID_BUDGET \u003d \"-1\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_NAME \u003d PARIS_TRIP.getName().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d PARIS_TRIP.getDescription().toString();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_START_DATE \u003d PARIS_TRIP.getStartDate().toString();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_END_DATE \u003d PARIS_TRIP.getEndDate().toString();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final String VALID_BUDGET \u003d PARIS_TRIP.getBudget().value;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final List\u003cJsonAdaptedDay\u003e VALID_DAYS \u003d PARIS_TRIP.getDays().stream()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .map(JsonAdaptedDay::new)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_validItineraryDetails_returnsItinerary() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedItinerary itinerary \u003d new JsonAdaptedItinerary(PARIS_TRIP);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(PARIS_TRIP, itinerary.toModelType());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedItinerary itinerary \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonAdaptedItinerary(INVALID_NAME, VALID_DESCRIPTION, VALID_START_DATE,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                       VALID_END_DATE, VALID_BUDGET, VALID_DAYS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itinerary::toModelType);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedItinerary itinerary \u003d new JsonAdaptedItinerary(null, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                VALID_START_DATE, VALID_END_DATE, VALID_BUDGET, VALID_DAYS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itinerary::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_nullDescription_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedItinerary itinerary \u003d new JsonAdaptedItinerary(VALID_NAME, null,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                VALID_START_DATE, VALID_END_DATE, VALID_BUDGET, VALID_DAYS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itinerary::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_invalidStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedItinerary itinerary \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonAdaptedItinerary(VALID_NAME, VALID_DESCRIPTION, INVALID_DATE,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        VALID_END_DATE, VALID_BUDGET, VALID_DAYS);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d ItineraryDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itinerary::toModelType);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_nullStartDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedItinerary itinerary \u003d new JsonAdaptedItinerary(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                null, VALID_END_DATE, VALID_BUDGET, VALID_DAYS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ItineraryDate.class.getSimpleName());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itinerary::toModelType);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_invalidEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedItinerary itinerary \u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonAdaptedItinerary(VALID_NAME, VALID_DESCRIPTION, VALID_START_DATE, INVALID_DATE,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        VALID_BUDGET, VALID_DAYS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d ItineraryDate.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itinerary::toModelType);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_nullEndDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedItinerary itinerary \u003d new JsonAdaptedItinerary(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                VALID_START_DATE, null, VALID_BUDGET, VALID_DAYS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, ItineraryDate.class.getSimpleName());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itinerary::toModelType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_invalidBudget_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedItinerary itinerary \u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                new JsonAdaptedItinerary(VALID_NAME, VALID_DESCRIPTION, VALID_START_DATE, VALID_END_DATE,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                        INVALID_BUDGET, VALID_DAYS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d Budget.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itinerary::toModelType);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_nullBudget_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAdaptedItinerary itinerary \u003d new JsonAdaptedItinerary(VALID_NAME, VALID_DESCRIPTION,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                VALID_START_DATE, VALID_END_DATE, null, VALID_DAYS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Budget.class.getSimpleName());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, itinerary::toModelType);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 114
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonAttractionListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.EIFFEL_TOWER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.JURONG_BIRD_PARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.MBS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonAttractionListStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTrackPadStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void readAttractionList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readAttractionList(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAttractionList\u003e readAttractionList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new JsonAttractionListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .readAttractionList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(readAttractionList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAttractionList(\"notJsonFormatTrackPad.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void readAttractionList_invalidAttractionTrackPad_throwDataConversionException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAttractionList(\"invalidAttractionTrackPad.json\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void readAttractionList_invalidAndValidAttractionTrackPad_throwDataConversionException() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readAttractionList(\"invalidAndValidAttractionTrackPad.json\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void readAndSaveAttractionList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempAttractionList.json\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList original \u003d getTypicalAttractionList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAttractionListStorage jsonAttractionListStorage \u003d new JsonAttractionListStorage(filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        jsonAttractionListStorage.saveAttractionList(original, filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ReadOnlyAttractionList readBack \u003d jsonAttractionListStorage.readAttractionList(filePath).get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(original, new AttractionList(readBack));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        original.addAttraction(MBS);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        original.removeAttraction(JURONG_BIRD_PARK);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        jsonAttractionListStorage.saveAttractionList(original, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        readBack \u003d jsonAttractionListStorage.readAttractionList(filePath).get();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(original, new AttractionList(readBack));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        original.addAttraction(EIFFEL_TOWER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        jsonAttractionListStorage.saveAttractionList(original); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        readBack \u003d jsonAttractionListStorage.readAttractionList().get(); // file path not specified"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(original, new AttractionList(readBack));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveAttractionList_nullAttractionList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAttractionList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Saves {@code attractionList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private void saveAttractionList(ReadOnlyAttractionList attractionList, String filePath) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            new JsonAttractionListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .saveAttractionList(attractionList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveAttractionList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveAttractionList(new AttractionList(), null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonItineraryListStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.JAPAN_TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.PARIS_TRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalItineraries.getTypicalItineraryList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyItineraryList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonItineraryListStorageTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonTrackPadStorageTest\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void readItineraryList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readItineraryList(null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private java.util.Optional\u003cReadOnlyItineraryList\u003e readItineraryList(String filePath) throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new JsonItineraryListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                .readItineraryList(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertFalse(readItineraryList(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readItineraryList(\"notJsonFormatTrackPad.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void readItineraryList_invalidItineraryTrackPad_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readItineraryList(\"invalidItineraryTrackPad.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void readItineraryList_invalidAndValidItineraryTrackPad_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readItineraryList(\"invalidAndValidItineraryTrackPad.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void readAndSaveItineraryList_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempItineraryList.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryList original \u003d getTypicalItineraryList();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonItineraryListStorage jsonItineraryListStorage \u003d new JsonItineraryListStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        jsonItineraryListStorage.saveItineraryList(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ReadOnlyItineraryList readBack \u003d jsonItineraryListStorage.readItineraryList(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(original, new ItineraryList(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        original.addItinerary(JAPAN_TRIP);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        original.removeItinerary(PARIS_TRIP);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        jsonItineraryListStorage.saveItineraryList(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        readBack \u003d jsonItineraryListStorage.readItineraryList(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(original, new ItineraryList(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        original.addItinerary(PARIS_TRIP);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        jsonItineraryListStorage.saveItineraryList(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        readBack \u003d jsonItineraryListStorage.readItineraryList().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(original, new ItineraryList(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveItineraryList_nullItineraryList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveItineraryList(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Saves {@code itineraryList} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private void saveItineraryList(ReadOnlyItineraryList itineraryList, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            new JsonItineraryListStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .saveItineraryList(itineraryList, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void saveItineraryList_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveItineraryList(new ItineraryList(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 110
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableAttractionListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.testutil.TypicalAttractions;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonSerializableAttractionListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTrackPadTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final Path TYPICAL_ATTRACTIONS_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalAttractionsTrackPad.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final Path INVALID_ATTRACTION_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidAttractionTrackPad.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private static final Path DUPLICATE_ATTRACTION_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateAttractionTrackPad.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_typicalAttractionsFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonSerializableAttractionList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ATTRACTIONS_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                JsonSerializableAttractionList.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList attractionListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList typicalAttractionsAttractionList \u003d TypicalAttractions.getTypicalAttractionList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(attractionListFromFile, typicalAttractionsAttractionList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_invalidAttractionFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonSerializableAttractionList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ATTRACTION_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                JsonSerializableAttractionList.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void toModelType_duplicateAttractions_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonSerializableAttractionList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ATTRACTION_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                JsonSerializableAttractionList.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableAttractionList.MESSAGE_DUPLICATE_ATTRACTION,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 35,
      "limkoonkiat": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonSerializableItineraryListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.testutil.TypicalItineraries;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class JsonSerializableItineraryListTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableTrackPadTest\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final Path TYPICAL_ITINERARIES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalItinerariesTrackPad.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final Path INVALID_ITINERARY_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidItineraryTrackPad.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private static final Path DUPLICATE_ITINERARY_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateItineraryTrackPad.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_typicalItinerariesFile_success() throws Exception {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonSerializableItineraryList dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_ITINERARIES_FILE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                JsonSerializableItineraryList.class).get();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryList itineraryListFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryList typicalItinerariesItineraryList \u003d TypicalItineraries.getTypicalItineraryList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(itineraryListFromFile, typicalItinerariesItineraryList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_invalidItineraryFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonSerializableItineraryList dataFromFile \u003d JsonUtil.readJsonFile(INVALID_ITINERARY_FILE,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                JsonSerializableItineraryList.class).get();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public void toModelType_duplicateItineraries_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonSerializableItineraryList dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_ITINERARY_FILE,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                JsonSerializableItineraryList.class).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableItineraryList.MESSAGE_DUPLICATE_ITINERARY,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setAttractionListFilePath(Paths.get(\"attractionlist.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        userPrefs.setItineraryListFilePath(Paths.get(\"itinerarylist.json\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 122,
      "limkoonkiat": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.getTypicalAttractionList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ReadOnlyAttractionList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonAttractionListStorage attractionListStorage \u003d new JsonAttractionListStorage(getTempFilePath(\"al\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        JsonItineraryListStorage itineraryListStorage \u003d new JsonItineraryListStorage(getTempFilePath(\"il\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        storageManager \u003d new StorageManager(attractionListStorage, itineraryListStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void trackPadReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "         * {@link JsonAttractionListStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonAttractionListStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList original \u003d getTypicalAttractionList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        storageManager.saveAttractionList(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ReadOnlyAttractionList retrieved \u003d storageManager.readAttractionList().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertEquals(original, new AttractionList(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public void getTrackPadFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        assertNotNull(storageManager.getAttractionListFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 2,
      "-": 54,
      "limkoonkiat": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AttractionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * A utility class to help with building Attraction objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AttractionBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Tokyo Disneyland\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"81453305211\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"contact@tokyodisneyresort.jp\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"1-1 Maihama, Urayasu, Chiba 279-0031\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"The first Disney park to be built outside the United States.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Urayasu, Japan\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String DEFAULT_OPENING_HOURS \u003d \"1000-1800\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String DEFAULT_PRICE_RANGE \u003d \"MEDIUM\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static final String DEFAULT_RATING \u003d \"4.5\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String DEFAULT_VISITED \u003d \"TRUE\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private OpeningHours openingHours;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private PriceRange priceRange;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private Visited visited;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Creates a {@code AttractionBuilder} with the default details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        openingHours \u003d new OpeningHours(DEFAULT_OPENING_HOURS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        priceRange \u003d new PriceRange(DEFAULT_PRICE_RANGE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        rating \u003d new Rating(DEFAULT_RATING);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        visited \u003d new Visited(DEFAULT_VISITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Initializes the AttractionBuilder with the data of {@code attractionToCopy}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder(Attraction attractionToCopy) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        name \u003d attractionToCopy.getName();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        phone \u003d attractionToCopy.getPhone();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        email \u003d attractionToCopy.getEmail();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        address \u003d attractionToCopy.getAddress();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        description \u003d attractionToCopy.getDescription();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        location \u003d attractionToCopy.getLocation();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        openingHours \u003d attractionToCopy.getOpeningHours();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        priceRange \u003d attractionToCopy.getPriceRange();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        rating \u003d attractionToCopy.getRating();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        visited \u003d attractionToCopy.getVisited();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(attractionToCopy.getTags());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Name} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withName(String name) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Phone} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Phone} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withPhone() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.phone \u003d new Phone();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Email} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Email} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withEmail() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.email \u003d new Email();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Address} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Address} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withAddress() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.address \u003d new Address();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Description} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Description} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withDescription() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.description \u003d new Description();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Location} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code OpeningHours} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withOpeningHours(String openingHours) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.openingHours \u003d new OpeningHours(openingHours);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code OpeningHours} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withOpeningHours() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.openingHours \u003d new OpeningHours();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code PriceRange} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withPriceRange(String priceRange) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.priceRange \u003d new PriceRange(priceRange);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code PriceRange} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withPriceRange() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.priceRange \u003d new PriceRange();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Rating} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Rating} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withRating() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.rating \u003d new Rating();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Sets the {@code Visited} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public AttractionBuilder withVisited(String visited) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.visited \u003d new Visited(visited);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Sets the {@code Visited} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public AttractionBuilder withVisited() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        this.visited \u003d new Visited();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public AttractionBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Initializes a new attraction."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * @return a new Attraction."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public Attraction build() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return new Attraction(name, phone, email, address, description, location,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                openingHours, priceRange, rating, visited, tags);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 187,
      "Robinho98": 21,
      "peter-yeh": 16,
      "limkoonkiat": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AttractionListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A utility class to help with building AttractionList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " *     {@code AttractionList al \u003d new AttractionListBuilder().withAttraction(\"USS\", \"MBS\").build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class AttractionListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private AttractionList attractionList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList \u003d new AttractionList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionListBuilder(AttractionList attractionList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.attractionList \u003d attractionList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds a new {@code Attraction} to the {@code AttractionList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionListBuilder withAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        attractionList.addAttraction(attraction);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public AttractionList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return attractionList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AttractionUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.AddAttractionCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * A utility class for Attraction."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class AttractionUtil {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns an add command string for adding the {@code attraction}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String getAddAttractionCommand(Attraction attraction) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return AddAttractionCommand.COMMAND_WORD + \" \" + getAttractionDetails(attraction);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns the part of command string for the given {@code attraction}\u0027s details."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static String getAttractionDetails(Attraction attraction) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_NAME + attraction.getName().fullName + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_PHONE + attraction.getPhone().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_EMAIL + attraction.getEmail().value + \" \");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_ADDRESS + attraction.getAddress().value + \" \");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + attraction.getDescription().value + \" \");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(PREFIX_LOCATION + attraction.getLocation().value + \" \");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_OPENING_HOURS + attraction.getOpeningHours().value + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_PRICE_RANGE + attraction.getPriceRange().value + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        sb.append(PREFIX_RATING + attraction.getRating().value + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        sb.append(PREFIX_VISITED + attraction.getVisited().value + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        attraction.getTags().stream().forEach("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns the part of command string for the given {@code EditAttractionDescriptor}\u0027s details."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static String getEditAttractionDescriptorDetails(EditAttractionDescriptor descriptor) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                sb.append(PREFIX_DESCRIPTION).append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.getLocation().ifPresent(location -\u003e sb.append(PREFIX_LOCATION).append(location.value).append(\" \"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.getOpeningHours().ifPresent(openingHours -\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                sb.append(PREFIX_OPENING_HOURS).append(openingHours.value).append(\" \"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.getPriceRange().ifPresent(priceRange -\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                sb.append(PREFIX_PRICE_RANGE).append(priceRange.value).append(\" \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.getRating().ifPresent(rating -\u003e sb.append(PREFIX_RATING).append(rating.value).append(\" \"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        descriptor.getVisited().ifPresent(visited -\u003e sb.append(PREFIX_VISITED).append(visited.value).append(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 31,
      "Robinho98": 3,
      "-": 45,
      "limkoonkiat": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditAttractionDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.logic.commands.attraction.EditAttractionCommand.EditAttractionDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " * A utility class to help with building EditAttractionDescriptor objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "public class EditAttractionDescriptorBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    private EditAttractionDescriptor descriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptor();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder(EditAttractionDescriptor descriptor) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        this.descriptor \u003d new EditAttractionDescriptor(descriptor);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns an {@code EditAttractionDescriptor} with fields containing {@code attraction}\u0027s details"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder(Attraction attraction) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor \u003d new EditAttractionDescriptor();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setName(attraction.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setPhone(attraction.getPhone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setEmail(attraction.getEmail());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setAddress(attraction.getAddress());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setDescription(attraction.getDescription());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setLocation(attraction.getLocation());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setOpeningHours(attraction.getOpeningHours());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setPriceRange(attraction.getPriceRange());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setRating(attraction.getRating());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        descriptor.setVisited(attraction.getVisited());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setTags(attraction.getTags());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Name} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Email} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Address} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Description} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Location} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public EditAttractionDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Opening Hours} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withOpeningHours(String openingHours) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setOpeningHours(new OpeningHours(openingHours));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Price Range} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withPriceRange(String priceRange) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setPriceRange(new PriceRange(priceRange));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Sets the {@code Rating} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setRating(new Rating(rating));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     * Sets the {@code Visited} of the {@code EditAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public EditAttractionDescriptorBuilder withVisited(String visited) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        descriptor.setVisited(new Visited(visited));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditAttractionDescriptor}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public EditAttractionDescriptor build() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 125,
      "Robinho98": 10,
      "limkoonkiat": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditItineraryAttractionDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand.EditItineraryAttractionDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * A utility class to help with building EditItineraryAttractionDescriptor objects."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class EditItineraryAttractionDescriptorBuilder {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private EditItineraryAttractionDescriptor descriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptor();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder(EditItineraryAttractionDescriptor descriptor) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.descriptor \u003d new EditItineraryAttractionDescriptor(descriptor);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns an {@code EditItineraryAttractionDescriptor} with fields containing {@code attraction}\u0027s details"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder(ItineraryAttraction attraction) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor \u003d new EditItineraryAttractionDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setName(attraction.getName());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setPhone(attraction.getPhone());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setEmail(attraction.getEmail());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setAddress(attraction.getAddress());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setDescription(attraction.getDescription());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setLocation(attraction.getLocation());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setOpeningHours(attraction.getOpeningHours());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setPriceRange(attraction.getPriceRange());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setRating(attraction.getRating());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setVisited(attraction.getVisited());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setTags(attraction.getTags());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setStartTime(attraction.getStartTime());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setEndTime(attraction.getEndTime());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Name} of the {@code EditItineraryAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditItineraryAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Email} of the {@code EditItineraryAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Address} of the {@code EditItineraryAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Description} of the {@code EditItineraryAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Location} of the {@code EditItineraryAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setLocation(new Location(location));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Opening Hours} of the {@code EditItineraryAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withOpeningHours(String openingHours) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setOpeningHours(new OpeningHours(openingHours));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Price Range} of the {@code EditItineraryAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withPriceRange(String priceRange) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setPriceRange(new PriceRange(priceRange));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Rating} of the {@code EditItineraryAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setRating(new Rating(rating));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Visited} of the {@code EditItineraryAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withVisited(String visited) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setVisited(new Visited(visited));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditItineraryAttractionDescriptor}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code StartTime} of the {@code 0EditItineraryAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setStartTime(new ItineraryTime(startTime));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code EndTime} of the {@code EditItineraryAttractionDescriptor} that we are building."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptorBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.setEndTime(new ItineraryTime(endTime));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public EditItineraryAttractionDescriptor build() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditItineraryDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand.EditItineraryDescriptor;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A utility class to help with building EditItineraryDescriptor objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class EditItineraryDescriptorBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private EditItineraryDescriptor descriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public EditItineraryDescriptorBuilder() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditItineraryDescriptor();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public EditItineraryDescriptorBuilder(EditItineraryDescriptor descriptor) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.descriptor \u003d new EditItineraryDescriptor(descriptor);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an {@code EditItineraryDescriptor} with fields containing {@code itinerary}\u0027s details"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public EditItineraryDescriptorBuilder(Itinerary itinerary) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor \u003d new EditItineraryDescriptor();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setName(itinerary.getName());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setDescription(itinerary.getDescription());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setStartDate(itinerary.getStartDate());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setEndDate(itinerary.getEndDate());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setBudget(itinerary.getBudget());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Name} of the {@code EditItineraryDescriptor} that we are building."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public EditItineraryDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Description} of the {@code EditItineraryDescriptor} that we are building."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public EditItineraryDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code StartDate} of the {@code EditItineraryDescriptor} that we are building."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public EditItineraryDescriptorBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setStartDate(new ItineraryDate(startDate));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code EndDate} of the {@code EditItineraryDescriptor} that we are building."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public EditItineraryDescriptorBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setEndDate(new ItineraryDate(endDate));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Budget} of the {@code EditItineraryDescriptor} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public EditItineraryDescriptorBuilder withBudget(String budget) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.setBudget(new Budget(budget));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public EditItineraryDescriptor build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItineraryAttractionBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Location;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.OpeningHours;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.PriceRange;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Rating;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.attraction.Visited;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * A utility class to help with building Itinerary Attraction objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * Depends on ItineraryAttractionBuilder class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class ItineraryAttractionBuilder {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Tokyo Disneyland\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"81453305211\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"contact@tokyodisneyresort.jp\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"1-1 Maihama, Urayasu, Chiba 279-0031\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"The first Disney park to be built outside the United States.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_LOCATION \u003d \"Urayasu, Japan\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String DEFAULT_OPENING_HOURS \u003d \"1000-1800\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String DEFAULT_PRICE_RANGE \u003d \"MEDIUM\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String DEFAULT_RATING \u003d \"4.5\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String DEFAULT_VISITED \u003d \"TRUE\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String DEFAULT_START_TIME \u003d \"1300\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String DEFAULT_END_TIME \u003d \"1500\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Location location;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private OpeningHours openingHours;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private PriceRange priceRange;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Rating rating;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Visited visited;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private ItineraryTime startTime;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private ItineraryTime endTime;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Creates a {@code ItineraryItineraryAttractionBuilder} with the default details."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        location \u003d new Location(DEFAULT_LOCATION);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        openingHours \u003d new OpeningHours(DEFAULT_OPENING_HOURS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        priceRange \u003d new PriceRange(DEFAULT_PRICE_RANGE);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        rating \u003d new Rating(DEFAULT_RATING);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        visited \u003d new Visited(DEFAULT_VISITED);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        startTime \u003d new ItineraryTime(DEFAULT_START_TIME);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        endTime \u003d new ItineraryTime(DEFAULT_END_TIME);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Initializes the ItineraryItineraryAttractionBuilder with the data of {@code iaToCopy}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder(ItineraryAttraction iaToCopy) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        name \u003d iaToCopy.getName();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        phone \u003d iaToCopy.getPhone();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        email \u003d iaToCopy.getEmail();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        address \u003d iaToCopy.getAddress();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        description \u003d iaToCopy.getDescription();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        location \u003d iaToCopy.getLocation();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        openingHours \u003d iaToCopy.getOpeningHours();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        priceRange \u003d iaToCopy.getPriceRange();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        rating \u003d iaToCopy.getRating();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        visited \u003d iaToCopy.getVisited();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(iaToCopy.getTags());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        startTime \u003d iaToCopy.getStartTime();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        endTime \u003d iaToCopy.getEndTime();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Name} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withName(String name) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Phone} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Phone} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withPhone() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.phone \u003d new Phone();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Email} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Email} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withEmail() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.email \u003d new Email();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Address} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Address} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withAddress() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.address \u003d new Address();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Description} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Description} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withDescription() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.description \u003d new Description();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Location} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withLocation(String location) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.location \u003d new Location(location);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code OpeningHours} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withOpeningHours(String openingHours) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.openingHours \u003d new OpeningHours(openingHours);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code OpeningHours} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withOpeningHours() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.openingHours \u003d new OpeningHours();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code PriceRange} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withPriceRange(String priceRange) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.priceRange \u003d new PriceRange(priceRange);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code PriceRange} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withPriceRange() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.priceRange \u003d new PriceRange();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Rating} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withRating(String rating) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.rating \u003d new Rating(rating);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Rating} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withRating() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.rating \u003d new Rating();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Visited} of the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withVisited(String visited) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.visited \u003d new Visited(visited);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code Visited} of the {@code Attraction} that we are building to empty string."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withVisited() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.visited \u003d new Visited();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Attraction} that we are building."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code startTime} of the {@code ItineraryAttraction} that we are building."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryAttractionBuilder withStartTime(String startTime) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.startTime \u003d new ItineraryTime(startTime);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the {@code endTime} of the {@code ItineraryAttraction} that we are building."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryAttractionBuilder withEndTime(String endTime) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.endTime \u003d new ItineraryTime(endTime);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Sets the attraction fields in itinerary attraction that we are building."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttractionBuilder withAttraction(Attraction attraction) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        name \u003d attraction.getName();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        phone \u003d attraction.getPhone();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        email \u003d attraction.getEmail();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        address \u003d attraction.getAddress();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        description \u003d attraction.getDescription();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        location \u003d attraction.getLocation();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        openingHours \u003d attraction.getOpeningHours();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        priceRange \u003d attraction.getPriceRange();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        rating \u003d attraction.getRating();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        visited \u003d attraction.getVisited();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        tags \u003d attraction.getTags();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Initializes a new itinerary attraction."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * @return a new Attraction."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public ItineraryAttraction build() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new ItineraryAttraction("
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                new Attraction(name,"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        phone,"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        email,"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        address,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        description,"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        location,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        openingHours,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        priceRange,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        rating,"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        visited,"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                        tags), startTime, endTime);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 290,
      "limkoonkiat": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItineraryAttractionUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DAY_VISITING;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_TIME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_LOCATION;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OPENING_HOURS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PRICE_RANGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_RATING;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_TIME;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VISITED;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.AddItineraryAttractionCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.logic.commands.itineraryattraction.EditItineraryAttractionCommand.EditItineraryAttractionDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * A utility class for Attraction."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class ItineraryAttractionUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns an add command string for adding the {@code attraction}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static String getAddItineraryAttractionCommand(Index index, Index day, ItineraryAttraction attraction) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return AddItineraryAttractionCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + getItineraryAttractionDetails(attraction) + PREFIX_DAY_VISITING + day.getOneBased();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the part of command string for the given {@code attraction}\u0027s details."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private static String getItineraryAttractionDetails(ItineraryAttraction attraction) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        sb.append(PREFIX_NAME + attraction.getName().fullName + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        sb.append(PREFIX_PHONE + attraction.getPhone().value + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        sb.append(PREFIX_EMAIL + attraction.getEmail().value + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        sb.append(PREFIX_ADDRESS + attraction.getAddress().value + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + attraction.getDescription().value + \" \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        sb.append(PREFIX_LOCATION + attraction.getLocation().value + \" \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        sb.append(PREFIX_OPENING_HOURS + attraction.getOpeningHours().value + \" \");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        sb.append(PREFIX_PRICE_RANGE + attraction.getPriceRange().value + \" \");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        sb.append(PREFIX_RATING + attraction.getRating().value + \" \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        sb.append(PREFIX_VISITED + attraction.getVisited().value + \" \");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        sb.append(PREFIX_START_TIME + attraction.getStartTime().toString() + \" \");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        sb.append(PREFIX_END_TIME + attraction.getEndTime().toString() + \" \");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        attraction.getTags().stream().forEach(s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static String getEditItineraryAttractionCommand(Index index, Index day,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                                                           EditItineraryAttractionDescriptor descriptor) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return EditItineraryAttractionCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_DAY_VISITING"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                + day.getOneBased() + \" \" + getItineraryEditAttractionDescriptorDetails(descriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     * Returns the part of command string for the given {@code EditAttractionDescriptor}\u0027s details."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private static String getItineraryEditAttractionDescriptorDetails(EditItineraryAttractionDescriptor descriptor) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.getAddress().ifPresent(address -\u003e sb.append(PREFIX_ADDRESS).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                sb.append(PREFIX_DESCRIPTION).append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.getLocation().ifPresent(location -\u003e sb.append(PREFIX_LOCATION).append(location.value).append(\" \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.getOpeningHours().ifPresent(openingHours -\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                sb.append(PREFIX_OPENING_HOURS).append(openingHours.value).append(\" \"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.getPriceRange().ifPresent(priceRange -\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                sb.append(PREFIX_PRICE_RANGE).append(priceRange.value).append(\" \"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.getRating().ifPresent(rating -\u003e sb.append(PREFIX_RATING).append(rating.value).append(\" \"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.getVisited().ifPresent(visited -\u003e sb.append(PREFIX_VISITED).append(visited.value).append(\" \"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.getStartTime().ifPresent(startTime -\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                sb.append(PREFIX_START_TIME).append(startTime.toString()).append(\" \"));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        descriptor.getEndTime().ifPresent(endTime -\u003e sb.append(PREFIX_END_TIME).append(endTime.toString()).append(\" \"));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItineraryBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.commons.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Day;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.ItineraryDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A utility class to help with building Itinerary objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Singapore Trip\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Explore the wonders of Singapore!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_START_DATE \u003d \"12-12-2020\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_END_DATE \u003d \"15-12-2020\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final String DEFAULT_BUDGET \u003d \"100\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private ItineraryDate startDate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private ItineraryDate endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private List\u003cDay\u003e days;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Creates a {@code ItineraryBuilder} with the default details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        startDate \u003d new ItineraryDate(DEFAULT_START_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        endDate \u003d new ItineraryDate(DEFAULT_END_DATE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        budget \u003d new Budget(DEFAULT_BUDGET);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        days \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 1; i \u003c\u003d ItineraryDate.daysBetween(startDate, endDate); i++) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            days.add(new Day(i));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Initializes the ItineraryBuilder with the data of {@code itineraryToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder(Itinerary itineraryToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        name \u003d itineraryToCopy.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        description \u003d itineraryToCopy.getDescription();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        startDate \u003d itineraryToCopy.getStartDate();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        endDate \u003d itineraryToCopy.getEndDate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        budget \u003d itineraryToCopy.getBudget();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        days \u003d new ArrayList\u003c\u003e(itineraryToCopy.getDays());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Name} of the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withName(String name) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Description} of the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Description} of the {@code Itinerary} that we are building to empty string."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withDescription() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.description \u003d new Description();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Budget} of the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withBudget(String budget) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.budget \u003d new Budget(budget);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code Budget} of the {@code Itinerary} that we are building to empty string."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withBudget() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.budget \u003d new Budget();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code startDate} of the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withStartDate(String startDate) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.startDate \u003d new ItineraryDate(startDate);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        int numberOfDays \u003d ItineraryDate.daysBetween(this.startDate, endDate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cDay\u003e newDays \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfDays; i++) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (i \u003c days.size()) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                newDays.add(days.get(i));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                newDays.add(new Day(i + 1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        days \u003d newDays;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code endDate} of the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withEndDate(String endDate) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.endDate \u003d new ItineraryDate(endDate);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        int numberOfDays \u003d ItineraryDate.daysBetween(startDate, this.endDate);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        List\u003cDay\u003e newDays \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (int i \u003d 0; i \u003c numberOfDays; i++) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            if (i \u003c days.size()) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                newDays.add(days.get(i));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                newDays.add(new Day(i + 1));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        days \u003d newDays;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds an {@code itineraryAttraction} to the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withItineraryAttraction(ItineraryAttraction itineraryAttraction, Index day) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.days.get(day.getZeroBased()).addItineraryAttraction(itineraryAttraction);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Sets the {@code days} of the {@code Itinerary} that we are building."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryBuilder withDays(List\u003cDay\u003e days) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.days \u003d new ArrayList\u003c\u003e(days);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Initializes a new itinerary."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * @return a new Itinerary."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public Itinerary build() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new Itinerary(name, description, startDate, endDate, budget, days);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 159
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItineraryListBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A utility class to help with building ItineraryList objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " *     {@code ItineraryList il \u003d new ItineraryListBuilder().withItinerary(SG_ZOOS_TOUR, PARIS_TRIP).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryListBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    private ItineraryList itineraryList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryListBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryList \u003d new ItineraryList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryListBuilder(ItineraryList itineraryList) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        this.itineraryList \u003d itineraryList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Adds a new {@code Itinerary} to the {@code ItineraryList} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryListBuilder withItinerary(Itinerary itinerary) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        itineraryList.addItinerary(itinerary);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public ItineraryList build() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return itineraryList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ItineraryUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.AddItineraryCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.logic.commands.itinerary.EditItineraryCommand.EditItineraryDescriptor;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A utility class for Itinerary."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class ItineraryUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an add itinerary command string for adding the {@code itinerary}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String getAddItineraryCommand(Itinerary itinerary) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return AddItineraryCommand.COMMAND_WORD + \" \" + getItineraryDetails(itinerary);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the part of command string for the given {@code itinerary}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String getItineraryDetails(Itinerary itinerary) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(PREFIX_NAME + itinerary.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + itinerary.getDescription().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(PREFIX_START_DATE + itinerary.getStartDate().toString() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(PREFIX_END_DATE + itinerary.getEndDate().toString() + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        sb.append(PREFIX_BUDGET + itinerary.getBudget().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * * Returns the part of command string for the given {@code EditItineraryDescriptor}\u0027s details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static String getEditItineraryDescriptorDetails(EditItineraryDescriptor descriptor) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                sb.append(PREFIX_DESCRIPTION).append(description.value).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.getStartDate().ifPresent(startDate -\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                sb.append(PREFIX_START_DATE).append(startDate.toString()).append(\" \"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.getEndDate().ifPresent(endDate -\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                sb.append(PREFIX_END_DATE).append(endDate.toString()).append(\" \"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        descriptor.getBudget().ifPresent(budget -\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                sb.append(PREFIX_BUDGET).append(budget.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "limkoonkiat": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns the middle index of the attraction in the {@code model}\u0027s attraction list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAttractionList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns the last index of the attraction in the {@code model}\u0027s attraction list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return Index.fromOneBased(model.getFilteredAttractionList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "     * Returns the attraction in the {@code model}\u0027s attraction list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "    public static Attraction getAttraction(Model model, Index index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "        return model.getFilteredAttractionList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns the itinerary in the {@code model}\u0027s itinerary list at {@code index}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static Itinerary getItinerary(Model model, Index index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return model.getFilteredItineraryList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "yuxuanxc": 8,
      "-": 48,
      "limkoonkiat": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAttractions.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_EIFFEL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EIFFEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_EIFFEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_EIFFEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EIFFEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MBS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_EIFFEL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_MBS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_EIFFEL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_EIFFEL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_MBS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_EIFFEL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_MBS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_EIFFEL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_MBS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.AttractionList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "import seedu.address.model.attraction.Attraction;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " * A utility class containing a list of {@code Attraction} objects to be used in tests."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Robinho98"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "public class TypicalAttractions {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Attraction JURONG_BIRD_PARK \u003d new AttractionBuilder()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"JurongBirdPark\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withAddress(\"2 Jurong Hill\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withEmail(\"birdpark@example.com\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"The park offers a haven for close to 3500 birds across 400 species.\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(\"1000-1800\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withTags(\"animals\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Attraction NIGHT_SAFARI \u003d new AttractionBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Night Safari\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withAddress(\"80 Mandai Lake Rd\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withEmail(\"nightsafari@example.com\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"The world\u0027s first nocturnal zoo.\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(\"1800-2300\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withTags(\"animals\", \"night\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Attraction SINGAPORE_ZOO \u003d new AttractionBuilder()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Singapore Zoo\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withEmail(\"singaporezoo@example.com\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withAddress(\"80 Mandai Lake Rd\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(\"1000-1800\")"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Attraction RIVER_SAFARI \u003d new AttractionBuilder()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"River Safari\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withEmail(\"riversafari@example.com\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withAddress(\"80 Mandai Lake Rd\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"A river-themed zoo and aquarium in Singapore.\")"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(\"1000-1800\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withTags(\"panda\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Attraction ORCHARD_ROAD \u003d new AttractionBuilder()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Orchard Road\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withEmail(\"orchardroad@example.com\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withAddress(\"Orchard Road\")"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"Orchard Road is Singapore’s retail heart, with discount outlets, \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    + \"department stores and upscale boutiques, alongside luxury hotels.\")"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Attraction BOTANIC_GARDENS \u003d new AttractionBuilder()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Botanic Gardens\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withEmail(\"botanicgardens@example.com\")"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withAddress(\"1 Cluny Rd\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"The only tropical garden to be honoured as a UNESCO World Heritage Site.\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Attraction JURONG_LAKE \u003d new AttractionBuilder()"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Jurong Lake\")"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withEmail(\"juronglake@example.com\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withAddress(\"Jurong\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"Sprawling park around a lake \u0026 swamp forest with a boardwalk, \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    + \"playgrounds, a dog run \u0026 water sports.\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Attraction NOTRE_DAME \u003d new AttractionBuilder()"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Cathedrale Notre Dame de Paris\")"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withPhone()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withEmail()"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withAddress(\"6 Parvis Notre-Dame - Pl. Jean-Paul II, 75004\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withDescription()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Paris, France\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withOpeningHours()"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Attraction ESPLANADE \u003d new AttractionBuilder()"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Esplanade\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPhone(\"8482424\").withEmail(\"esplanade@example.com\")"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withAddress(\"1 Esplanade Dr\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(\"Esplanade – Theatres on the Bay is a performing arts centre \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    + \"located in Downtown Core near the mouth of the Singapore River.\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(\"1000-2200\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange(\"HIGH\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating(\"4.0\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited(\"TRUE\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Attraction SUNTEC \u003d new AttractionBuilder()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Suntec City\")"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPhone(\"8482131\").withEmail(\"suntec@example.com\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withAddress(\"3 Temasek Blvd\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(\"Suntec City is a major mixed-use development located in  \""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "                    + \"Centre, a subzone of the Downtown Core in Singapore.\")"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(\"1000-2000\")"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withPriceRange(\"LOW\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withRating(\"4.5\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withVisited(\"TRUE\")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final Attraction LOUVRE \u003d new AttractionBuilder()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Louvre Museum\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withPhone(\"330140205317\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withEmail(\"info@louvre.fr\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withAddress(\"Rue de Rivoli, 75001\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withDescription(\"The Louvre, or the Louvre Museum, is the world\u0027s largest art museum and a\""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    + \" historic monument in Paris, France.\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withLocation(\"Paris, France\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withOpeningHours(\"0900-1800\")"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withPriceRange(\"MEDIUM\")"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withRating(\"4.7\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withVisited(\"FALSE\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    // Manually added - Attraction\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Attraction EIFFEL_TOWER \u003d new AttractionBuilder().withName(VALID_NAME_EIFFEL)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withPhone(VALID_PHONE_EIFFEL).withEmail(VALID_EMAIL_EIFFEL).withAddress(VALID_ADDRESS_EIFFEL)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_EIFFEL).withLocation(VALID_LOCATION_EIFFEL)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(VALID_OPENING_HOURS_EIFFEL).withPriceRange(VALID_PRICE_RANGE_EIFFEL)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withRating(VALID_RATING_EIFFEL).withVisited(VALID_VISITED_EIFFEL).withTags(VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final Attraction MBS \u003d new AttractionBuilder().withName(VALID_NAME_MBS).withPhone(VALID_PHONE_MBS)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withEmail(VALID_EMAIL_MBS).withAddress(VALID_ADDRESS_MBS)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_MBS).withLocation(VALID_LOCATION_MBS)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "yuxuanxc"
        },
        "content": "            .withOpeningHours(VALID_OPENING_HOURS_MBS).withPriceRange(VALID_PRICE_RANGE_MBS)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withRating(VALID_RATING_MBS).withVisited(VALID_VISITED_MBS)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "            .withTags(VALID_TAG_SIGHTSEEING, VALID_TAG_ACTIVITY).build();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    private TypicalAttractions() {} // prevents instantiation"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an {@code AttractionList} with all the typical attractions."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static AttractionList getTypicalAttractionList() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        AttractionList al \u003d new AttractionList();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        for (Attraction attraction : getTypicalAttractions()) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            al.addAttraction(attraction);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return al;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Robinho98"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    public static List\u003cAttraction\u003e getTypicalAttractions() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JURONG_BIRD_PARK, NIGHT_SAFARI, SINGAPORE_ZOO, RIVER_SAFARI, ORCHARD_ROAD,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "                BOTANIC_GARDENS, JURONG_LAKE));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Robinho98"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Robinho98": 75,
      "yuxuanxc": 66,
      "peter-yeh": 23,
      "limkoonkiat": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Index INDEX_FIRST \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Index INDEX_SECOND \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Index INDEX_THIRD \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "limkoonkiat": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalItineraries.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BUDGET_JAPAN_TRIP;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_JAPAN_TRIP;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_DATE_JAPAN_TRIP;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_JAPAN_TRIP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_DATE_JAPAN_TRIP;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.EIFFEL_TOWER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.LOUVRE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.NIGHT_SAFARI;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.NOTRE_DAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.RIVER_SAFARI;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalAttractions.SINGAPORE_ZOO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.ItineraryList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "import seedu.address.model.itinerary.Itinerary;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " * A utility class containing a list of {@code Itinerary} objects to be used in tests."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "public class TypicalItineraries {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Itinerary SG_ZOOS_TOUR \u003d new ItineraryBuilder().withName(\"Singapore Zoos\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withDescription(\"Rediscover our wildlife parks!\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withStartDate(\"06-07-2019\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withEndDate(\"07-07-2019\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withBudget(\"500\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withItineraryAttraction(new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withAttraction(SINGAPORE_ZOO)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withStartTime(\"1000\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withEndTime(\"1700\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .build(), INDEX_FIRST)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withItineraryAttraction(new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withAttraction(NIGHT_SAFARI)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withStartTime(\"1900\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withEndTime(\"2300\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .build(), INDEX_FIRST)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withItineraryAttraction(new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withAttraction(RIVER_SAFARI)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withStartTime(\"1200\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withEndTime(\"1800\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .build(), INDEX_SECOND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Itinerary PARIS_TRIP \u003d new ItineraryBuilder().withName(\"Paris Trip\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withDescription(\"Visit the City of Light\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withStartDate(\"21-12-2020\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withEndDate(\"26-12-2020\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withBudget()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withItineraryAttraction(new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withAttraction(EIFFEL_TOWER)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withStartTime(\"0900\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withEndTime(\"1500\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .build(), INDEX_FIRST)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withItineraryAttraction(new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withAttraction(LOUVRE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withStartTime(\"1100\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withEndTime(\"1800\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .build(), INDEX_SECOND)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withItineraryAttraction(new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withAttraction(NOTRE_DAME)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withStartTime(\"1200\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .withEndTime(\"1500\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "                    .build(), INDEX_THIRD)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    // Matches {@code CommandTestUtil}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static final Itinerary JAPAN_TRIP \u003d new ItineraryBuilder().withName(VALID_NAME_JAPAN_TRIP)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_JAPAN_TRIP).withStartDate(VALID_START_DATE_JAPAN_TRIP)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            .withEndDate(VALID_END_DATE_JAPAN_TRIP).withBudget(VALID_BUDGET_JAPAN_TRIP).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private TypicalItineraries() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     * Returns an {@code ItineraryList} with all the typical itineraries."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static ItineraryList getTypicalItineraryList() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        ItineraryList il \u003d new ItineraryList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        for (Itinerary itinerary : getTypicalItineraries()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "            il.addItinerary(itinerary);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return il;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    public static List\u003cItinerary\u003e getTypicalItineraries() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SG_ZOOS_TOUR, PARIS_TRIP));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "limkoonkiat"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 2,
      "limkoonkiat": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalItineraryAttractions.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_EIFFEL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_MBS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_EIFFEL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MBS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_EIFFEL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_MBS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_EIFFEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_END_TIME_MBS;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_EIFFEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_LOCATION_MBS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_EIFFEL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_MBS;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_EIFFEL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OPENING_HOURS_MBS;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_EIFFEL;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_MBS;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_EIFFEL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PRICE_RANGE_MBS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_EIFFEL;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_RATING_MBS;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_EIFFEL;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_START_TIME_MBS;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_ACTIVITY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_SIGHTSEEING;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_EIFFEL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_VISITED_MBS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "import seedu.address.model.itinerary.ItineraryAttraction;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " * A utility class containing a list of {@code ItineraryAttraction} objects to be used in tests."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "public class TypicalItineraryAttractions {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction JURONG_BIRD_PARK \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"JurongBirdPark\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(\"2 Jurong Hill\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEmail(\"birdpark@example.com\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone(\"94351253\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(\"The park offers a haven for close to 3500 birds across 400 species.\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours(\"1000-1800\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withTags(\"animals\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(\"1000\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(\"1200\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction NIGHT_SAFARI \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Night Safari\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(\"80 Mandai Lake Rd\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEmail(\"nightsafari@example.com\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone(\"98765432\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(\"The world\u0027s first nocturnal zoo.\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours(\"1800-2300\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withTags(\"animals\", \"night\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(\"1050\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(\"1242\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction SINGAPORE_ZOO \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Singapore Zoo\")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone(\"95352563\")"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEmail(\"singaporezoo@example.com\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(\"80 Mandai Lake Rd\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours(\"1000-1800\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(\"1240\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(\"1743\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction RIVER_SAFARI \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"River Safari\")"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone(\"87652533\")"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEmail(\"riversafari@example.com\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(\"80 Mandai Lake Rd\")"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(\"A river-themed zoo and aquarium in Singapore.\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours(\"1000-1800\")"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withTags(\"panda\")"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(\"0422\")"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(\"1522\")"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction ORCHARD_ROAD \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Orchard Road\")"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone(\"9482224\")"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEmail(\"orchardroad@example.com\")"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(\"Orchard Road\")"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(\"Orchard Road is Singapore’s retail heart, with discount outlets, \""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    + \"department stores and upscale boutiques, alongside luxury hotels.\")"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(\"1000\")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(\"1200\")"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction BOTANIC_GARDENS \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Botanic Gardens\")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone(\"9482427\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEmail(\"botanicgardens@example.com\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(\"1 Cluny Rd\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(\"The only tropical garden to be honoured as a UNESCO World Heritage Site.\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours()"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(\"1211\")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(\"2314\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction JURONG_LAKE \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Jurong Lake\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone(\"9482442\")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEmail(\"juronglake@example.com\")"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(\"Jurong\")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(\"Sprawling park around a lake \u0026 swamp forest with a boardwalk, \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    + \"playgrounds, a dog run \u0026 water sports.\")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(\"1232\")"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(\"2132\")"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction NOTRE_DAME \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Cathedrale Notre Dame de Paris\")"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEmail()"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(\"6 Parvis Notre-Dame - Pl. Jean-Paul II, 75004\")"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(\"Paris, France\")"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange()"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating()"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(\"1234\")"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(\"2345\")"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction ESPLANADE \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Esplanade\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone(\"8482424\").withEmail(\"esplanade@example.com\")"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(\"1 Esplanade Dr\")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(\"Esplanade – Theatres on the Bay is a performing arts centre \""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    + \"located in Downtown Core near the mouth of the Singapore River.\")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours(\"1000-2200\")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange(\"HIGH\")"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating(\"4.0\")"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited(\"TRUE\")"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(\"1000\")"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(\"2300\")"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction SUNTEC \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Suntec City\")"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone(\"8482131\").withEmail(\"suntec@example.com\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(\"3 Temasek Blvd\")"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(\"Suntec City is a major mixed-use development located in  \""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    + \"Centre, a subzone of the Downtown Core in Singapore.\")"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(\"Singapore, Singapore\")"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours(\"1000-2000\")"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange(\"LOW\")"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating(\"4.5\")"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited(\"TRUE\")"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(\"1000\")"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(\"2000\")"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction LOUVRE \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(\"Louvre Museum\")"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone(\"330140205317\")"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEmail(\"info@louvre.fr\")"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(\"Rue de Rivoli, 75001\")"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(\"The Louvre, or the Louvre Museum, is the world\u0027s largest art museum and a\""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                    + \" historic monument in Paris, France.\")"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(\"Paris, France\")"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours(\"0900-1800\")"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange(\"MEDIUM\")"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating(\"4.7\")"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited(\"FALSE\")"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(\"0900\")"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(\"1500\")"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    // Manually added - ItineraryAttraction\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction EIFFEL_TOWER \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(VALID_NAME_EIFFEL)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone(VALID_PHONE_EIFFEL)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEmail(VALID_EMAIL_EIFFEL)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(VALID_ADDRESS_EIFFEL)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_EIFFEL)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(VALID_LOCATION_EIFFEL)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours(VALID_OPENING_HOURS_EIFFEL)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange(VALID_PRICE_RANGE_EIFFEL)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating(VALID_RATING_EIFFEL)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited(VALID_VISITED_EIFFEL)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withTags(VALID_TAG_ACTIVITY)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(VALID_START_TIME_EIFFEL)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(VALID_END_TIME_EIFFEL)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final ItineraryAttraction MBS \u003d new ItineraryAttractionBuilder()"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withName(VALID_NAME_MBS)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPhone(VALID_PHONE_MBS)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEmail(VALID_EMAIL_MBS)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withAddress(VALID_ADDRESS_MBS)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withDescription(VALID_DESCRIPTION_MBS)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withLocation(VALID_LOCATION_MBS)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withOpeningHours(VALID_OPENING_HOURS_MBS)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withPriceRange(VALID_PRICE_RANGE_MBS)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withRating(VALID_RATING_MBS)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withVisited(VALID_VISITED_MBS)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withTags(VALID_TAG_SIGHTSEEING, VALID_TAG_ACTIVITY)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withStartTime(VALID_START_TIME_MBS)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .withEndTime(VALID_END_TIME_MBS)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    private TypicalItineraryAttractions() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    public static List\u003cItineraryAttraction\u003e getTypicalItineraryAttractions() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(JURONG_BIRD_PARK, NIGHT_SAFARI, SINGAPORE_ZOO, RIVER_SAFARI, ORCHARD_ROAD,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "                BOTANIC_GARDENS, JURONG_LAKE));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "peter-yeh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "peter-yeh": 246
    }
  }
]
