[
  {
    "path": "README.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-W14-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-W14-3/tp/actions)"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "# Introduction to Bamboo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**Bamboo** is a brown-field software engineering team project based on the"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "[AddressBook Level 3 (AB3)](https://github.com/se-edu/addressbook-level3) architecture, aimed at providing college students with a"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "simple and accessible solution to **personal finance management**."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "## App Preview"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](docs/images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "## Useful Links"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "### Features and User Guide"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Refer to the [User Guide](docs/UserGuide.md) for a detailed walk-through of how to use Bamboo."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "### Developer Guide"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Interested in contributing to Bamboo? The [Developer Guide](docs/DeveloperGuide.md) is a good place to start."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "### About Us"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Find out more about us [here](docs/AboutUs.md)."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "## Acknowledgements"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* This project is based on the AddressBook-Level3 project created by the [SE-EDU initiative](https://se-education.org)."
      }
    ],
    "authorContributionMap": {
      "marcus2k": 5,
      "maxxyh": 14,
      "-": 3
    }
  },
  {
    "path": "build.gradle",
    "fileType": "other",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00274.0.4\u0027"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "mainClassName \u003d \u0027seedu.expense.Main\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_11"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.29\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "run {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    enableAssertions \u003d true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    finalizedBy jacocoTestReport"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories.from files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories.from files(sourceSets.main.output)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData.from files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories.from files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.4.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    String javaFxVersion \u003d \u002711\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    archiveName \u003d \u0027expensebook.jar\u0027"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027test\u0027"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "hakiem526": 4,
      "-": 70
    }
  },
  {
    "path": "docs/AboutUs.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: About Us"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the [School of Computing, National University of Singapore](http://www.comp.nus.edu.sg)."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "You can reach us through our respective emails."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## Project team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "### Maxx Chan"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003cimg src\u003d\"images/maxxyh.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[github](https://github.com/maxxyh)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[portfolio](team/maxxyh.md)]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[email](mailto:maxxchan@u.nus.edu)]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* Role: Team Lead, Developer"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* Responsibilities: Scheduling and Tracking, Deliverables and Deadlines"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "### Hakiem Rasid"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003cimg src\u003d\"images/hakiem526.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[github](http://github.com/hakiem526)]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[portfolio](team/hakiem526.md)]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[email](mailto:e0325825@u.nus.edu)]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* Responsibilities: Testing"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "### Jaylen Lee"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003cimg src\u003d\"images/jaylenlee.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[github](http://github.com/Jaylenlee)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[portfolio](team/jaylenlee.md)]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[email](mailto:e0424677@u.nus.edu)]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* Responsibilities: Integration"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "### Leben Chew"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003cimg src\u003d\"images/lebencwb.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[github](http://github.com/lebencwb)]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[portfolio](team/lebencwb.md)]"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[email](mailto:leben.chew@u.nus.edu)]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* Responsibilities: UI/UX"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "### Marcus Ng"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "\u003cimg src\u003d\"images/marcus2k.png\" width\u003d\"200px\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[github](http://github.com/marcus2k)]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[portfolio](team/marcus2k.md)]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "[[email](mailto:marcus@u.nus.edu)]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* Role: Developer"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* Responsibilities: Code Quality"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 31,
      "marcus2k": 1,
      "-": 32,
      "lebencwb": 1
    }
  },
  {
    "path": "docs/DevOps.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: DevOps guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Build automation"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses Gradle for **build automation and dependency management**. **You are recommended to read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html)**."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are how to use Gradle for some important project tasks."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **`clean`**: Deletes the files created during the previous build tasks (e.g. files in the `build` folder).\u003cbr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew clean`"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **`shadowJar`**: Uses the ShadowJar plugin to creat a fat JAR file in the `build/lib` folder, *if the current file is outdated*.\u003cbr\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  e.g. `./gradlew shadowJar`."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **`run`**: Builds and runs the application.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  **`runShadow`**: Builds the application as a fat JAR, and then runs it."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* **`checkstyleMain`**: Runs the code style check for the main code base.\u003cbr\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  **`checkstyleTest`**: Runs the code style check for the test code base."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **`test`**: Runs all tests.\u003c"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew test` — Runs all tests"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * `./gradlew clean test` — Cleans the project and runs tests"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "## Continuous integration (CI)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "This project uses GitHub Actions for CI. The project comes with the necessary GitHub Actions configurations files (in the `.github/workflows` folder). No further setting up required."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Code coverage"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As part of CI, this project uses Codecov to generate coverage reports. Here are the steps to set up CodeCov for a fork of this repository."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. Sign up with Codecov using your GitHub account [here](https://codecov.io/signup)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. Once you are inside Codecov web app, add your fork to CodeCov."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "1. Get the Markdown code for the Codecov badge provided in `Settings \u003e Badges` and update the `docs/index.md` of your repo with it so that the badge [![codecov](https://codecov.io/gh/AY2021S1-CS2103-W14-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103-W14-3/tp) in that page reflects the coverage of your project."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Repository-wide checks"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "In addition to running Gradle checks, CI includes some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover all files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "`./config/travis/run-checks.sh`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Any warnings or errors will be printed out to the console."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "**If adding new checks:**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Checks are implemented as executable `check-*` scripts within the `.github` directory. The `run-checks.sh` script will automatically pick up and run files named as such. That is, you can add more such files if you need and the CI will do the rest."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts should print out errors in the format `SEVERITY:FILENAME:LINE: MESSAGE`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "  * SEVERITY is either ERROR or WARN."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * FILENAME is the path to the file relative to the current directory."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * LINE is the line of the file where the error occurred and MESSAGE is the message explaining the error."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* Check scripts must exit with a non-zero exit code if any errors occur."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "## Making a release"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "1. Update the version number in [`MainApp.java`](https://github.com/AY2021S1-CS2103-W14-3/tp/tree/master/src/main/java/seedu/expense/MainApp.java)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "1. Generate a fat JAR file using Gradle (i.e., `gradlew shadow`)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Create a new release using GitHub](https://help.github.com/articles/creating-releases/). Upload the JAR file you created."
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "-": 77
    }
  },
  {
    "path": "docs/DeveloperGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Developer Guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "## **Setting up, getting started**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the guide [_Setting up and getting started_](SettingUp.md)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "## **Design**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "### Architecture"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureDiagram.png\" width\u003d\"450\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "The ***Architecture Diagram*** given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ":bulb: **Tip:** The `.puml` files used to create diagrams in this document can be found in the [diagrams](https://github.com/AY2021S1-CS2103-W14-3/tp/tree/master/docs/diagrams/) folder. Refer to the [_PlantUML Tutorial_ at se-edu/guides](https://se-education.org/guides/tutorials/plantUml.html) to learn how to create and edit diagrams."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "**`Main`** has two classes called [`Main`](https://github.com/AY2021S1-CS2103-W14-3/tp/tree/master/src/main/java/seedu/expense/Main.java) and [`MainApp`](https://github.com/AY2021S1-CS2103-W14-3/tp/tree/master/src/main/java/seedu/expense/MainApp.java). It is responsible for,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup methods where necessary."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "[**`Commons`**](#common-classes) represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`UI`**](#ui-component): The UI of the App."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Logic`**](#logic-component): The command executor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Model`**](#model-component): Holds the data of the App in memory."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* [**`Storage`**](#storage-component): Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* defines its *API* in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes its functionality using a concrete `{Component Name}Manager` class (which implements the corresponding API `interface` mentioned in the previous point."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines its API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class which implements the `Logic` interface."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "![Class Diagram of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "**How the architecture components interact with each other**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "The *Sequence Diagram* below shows how the components interact with each other for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cimg src\u003d\"images/ArchitectureSequenceDiagram.png\" width\u003d\"574\" /\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### UI component"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the UI Component](images/UiClassDiagram.png)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "[`Ui.java`](https://github.com/AY2021S1-CS2103-W14-3/tp/tree/master/src/main/java/seedu/expense/ui/Ui.java)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ExpenseListPanel`, `StatusBarFooter` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the [`MainWindow`](https://github.com/AY2021S1-CS2103-W14-3/tp/tree/master/src/main/java/seedu/expense/ui/MainWindow.java) is specified in [`MainWindow.fxml`](https://github.com/AY2021S1-CS2103-W14-3/tp/tree/master/src/main/resources/view/MainWindow.fxml)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "* Listens for changes to `Model` data so that the UI can be updated with the modified data."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "### Logic component"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Logic Component](images/LogicClassDiagram.png)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "**API** :"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "[`Logic.java`](https://github.com/AY2021S1-CS2103-W14-3/tp/tree/master/src/main/java/seedu/expense/logic/Logic.java)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "1. `Logic` uses the `ExpenseBookParser` class to parse the user command."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "1. The command execution can affect the `Model` (e.g. adding a expense)."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "1. In addition, the `CommandResult` object can also instruct the `Ui` to perform certain actions, such as displaying help to the user."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "![Interactions Inside the Logic Component for the `delete 1` Command](images/DeleteSequenceDiagram.png)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `DeleteCommandParser` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "### Model component"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Model Component](images/ModelClassDiagram.png)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "**API** : [`Model.java`](https://github.com/AY2021S1-CS2103-W14-3/tp/tree/master/src/main/java/seedu/expense/model/Model.java)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user’s preferences."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* stores the expense book data."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cExpense\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** An alternative (arguably, a more OOP) model is given below. It has a `Tag` list in the `ExpenseBook`, which `Expense` references. This allows `ExpenseBook` to only require one `Tag` object per unique `Tag`, instead of each `Expense` needing their own `Tag` object.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "![BetterModelClassDiagram](images/BetterModelClassDiagram.png)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### Storage component"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "![Structure of the Storage Component](images/StorageClassDiagram.png)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "**API** : [`Storage.java`](https://github.com/AY2021S1-CS2103-W14-3/tp/tree/master/src/main/java/seedu/expense/storage/Storage.java)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* can save the expense book data in json format and read it back."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Common classes"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Classes used by multiple components are in the `seedu.expense.commons` package."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "## **Implementation**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "### Category Account Switching Feature"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "The switching mechanism is facilitated by `ExpenseBook` and initialised by"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "`Model#switchCategory(Tag category)`. Additionally, `ExpenseBook` implements the following operations:"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* `ExpenseBook#containsCategory(Tag toCheck)` — Checks if the given tag matches the tag of category budget. \u003ca name\u003d\"switchOperations\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* `ExpenseBook#updateExpenseBookCategory(Tag category)` - Updates the expense to only show expenses and budgets that matches the category."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* `ExpenseBook#updateFilteredBudgets(Predicate\u003cCategoryBudget\u003e predicate)` — Filters the budget list to the given predicate."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* `ExpenseBook#updateFilteredExpenses(Predicate\u003cExpense\u003e predicate)` — Filters the expense list to the given predicate  ."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "These operations are exposed in the `Model` interface as"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* `Model#hasCategory(Tag toCheck)`"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* `Model#updateExpenseBookCategory(Tag category)`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* `Model#updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate)`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* `Model#updateFilteredBudgetList(Predicate\u003cCategoryBudget\u003e predicate)`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Given below is a successful usage scenario example and how the switching mechanism behaves at each step."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Step 1. The user launches the application for the first time. The `ExpenseBook` will be initialized with the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "initial expense book state in Model."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Step 2. The user executes `switch t/Food` command to switch to `ExpenseBook` with \"Food\" tag in category budget"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "and expenses in the expense book. The `switch` command calls `Model#switchCategory(Tag category)`. The method then"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "calls the operations mentioned [above](#switchOperations) causing the category budgets and expenses to be filtered."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "The following sequence diagram shows how the switch operation works:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "![SwitchSequenceDiagram](images/SwitchSequenceDiagram.png)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "![SwitchSequenceDiagram2](images/SwitchSequenceDiagram2.png)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "![SwitchSequenceDiagram3](images/SwitchSequenceDiagram3.png)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `SwitchCommand`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cbr/\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Step 3. The user then decides to execute the command `topup`. Commands that modify the expense book,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "such as `topup`, `delete`, `edit`, will usually call their respectively method in Model. As such the budget balance"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "display of the application will change accordingly to reflect on their corresponding values."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Step 4. The user then decides to execute the command `list`. Commands that do not modify the expense book but have strong"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "relationship with altering the budget display such as `list`, will usually revert the displayed budget to the overall"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "amount instead of category-specific. In addition, the expenses calculated will be based on the displayed list total"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "amount."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Step 5. The user then decides to execute the command `find`. Commands that do not modify the expense book and do not"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "have a clear relationship with the budget display such as `find`, will usually omit out the budget display after"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "their execution. However, exceptions are given to command such as `help`, `exit` which will not alter the visibility"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "of the current budget display."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "##### Aspect: How Category switching executes"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* **Alternative 1 (current choice):** Filters the entire expense book by category tag."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Cons: May have performance issues in terms of execution speed. (Require repeated calculation and filtering)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* **Alternative 2:** Create multiple expense books for each category."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Pros: Will be faster during execution. (Calculation and sorting/filtering are done during initialisation)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Cons: Slower initialisation and higher overhead cost and more memory used."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "### Expense Sorting Feature"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "The expense sorting command is facilitated by `UniqueExpenseList` and `ExpenseBook`. In addition"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ", a new `Command` subclass, `SortCommand`, is required.   Specifically, the following operations are relevant to this"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " command:"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* `ExpenseBook#sortExpenses(Comparator\u003cExpense\u003e comparator)` — Sorts its `UniqueExpenseList` according to the comparator"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " provided."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* `UniqueExpenseList#sortExpenses(Comparator\u003cExpense\u003e comparator)` — Sorts its `ObservableList\u003cExpense\u003e` according to the"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " comparator provided."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#sortExpenseList(Comparator\u003cExpense\u003e comparator)`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "##### `SortCommand` and `SortCommandParser`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "`SortCommand` will take in at least one, and up to three keywords which specify the order and the parameters to sort"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " by (date, description, amount). The conversion of the `String` input to a `SortKeyComparator`, which implements `Comparator\u003cExpense\u003e`, is facilitated by"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  `SortCommandParser#parse()`, and the **order** of the sorting parameters is implemented via the `Comparator#thenComparing()` method."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "The concrete implementation of the `#Compare(Expense other)` method is present in subclasses of `SortKeyComparator`: `AmountComparator`, `DateComparator`, and `DescriptionComparator`."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "These are the methods that are called when combining `SortKeyComparators` through the `Comparator#thenComparing()` method."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Command Example:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* `sort -by date` — Sorted by chronological order."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* `sort -by date -by descriptionR` — Sorted in chronological order, then based on reverse alphabetical"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " order of descriptions."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* `sort -by date -by amount -by description` — Sorted in following order of priority: Chronological order, then by"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " increasing order of amounts, then by alphabetical order of descriptions."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "##### Example Usage"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Given below is an example usage scenario and how the sorting command behaves at each step."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Step 1. The user launches the application. The `ExpenseBook` shows the list of expenses in the expense book."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Step 2. The user executes `sort by/date by/descriptionR` command to sort the `Expenses` in `ExpenseBook` first by"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " date, then in reverse alphabetical order of the descriptions."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " A comparator is created reflecting the above sorting."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " The `sort` command calls `Model#sortExpenseList(Comparator\u003cExpense\u003e c)`, causing the `ExpenseBook` expenses to be"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  sorted according to the comparator, and the `filteredExpenses` in `Model` to be modified since it is a listener."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "The following sequence diagrams shows how the sort command works:"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "![SortSequenceDiagram Pt1](images/SortSequenceDiagram1.png)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "![SortSequenceDiagram Pt2](images/SortSequenceDiagram2.png)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** The lifeline for `SortCommand` and"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " `Comparator\u003cExpense\u003e` should end at the destroy marker (X) but due to a limitation of PlantUML, the lifeline reaches the end of diagram."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Step 3. The user then decides to execute the command `delete`. Commands that modify the expense book, such as `delete`, `edit`, will usually call their respectively method in Model, but using the new index ordering of the sorted list."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Step 4. The user then decides to execute the command `list`. This will revert the display view to initial"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " `ExpenseBook`."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "##### Aspect: How Sorting Command executes"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* **Alternative 1 (current choice):** Add an additional sort on top of current list implementation."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "  * Pros: Easy to implement."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Cons: Lack customizability in list views."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* **Alternative 2:** Create multiple list views each representing a particular sort."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Pros: Greater degree of customisation with regards to GUI."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Cons: Difficult to implement as it requires the creation of multiple subclasses of `ListCommand`."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "### Customisation of Command Keywords using Alias Feature"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "The implementation for the customisation of command keyword shortcuts for various `Command` subclasses is by introducing a class called `AliasMap` which stores mappings between a command shortcut (\u0027alias\u0027) and the actual command word of the class, as well as a class called `AliasCommand` which takes in two user input as parameters. The first parameter is the default command word for which the user wishes to create an alias, or if there is an existing alias for the command word, it must be the existing alias for which the user wishes to alter into a new alias. The second keyword determines what the command\u0027s (new) alias would be."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "Sample usage: By default, the only command word for `FindCommand` is `\"find\"`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* `alias find get` -\u003e The user can now trigger a `FindCommand` with `\"get\"` alias. The `\"find\"` command word will still work."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* `alias get find` -\u003e The \"get\" alias is removed from `AliasMap` object and only `\"find\"` can now trigger `FindCommand`. In other words, `FindCommand` no longer has an alias."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "To maintain some degree of simplicity and neatness, we require that `AliasCommand` and `ResetAliasCommand` cannot have aliases themselves. Furthermore, any custom alias is restricted to 10 case-sensitive alphabetical characters and each command can only have up to a single alias at any point in time. Default command words of each `Command` subclasses cannot be used as aliases."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "To allow for customisation to remain even after the user exits the app and subsequently restarts it, a customised alias-to-command mapping will be stored in JSON format, which can be converted to `AliasMap` and `AliasEntry` objects when Bamboo runs."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "The `ExpenseBookParser`\u0027s `parseCommand()` method takes in an AliasMap object in addition to the user input, which allows the parser to map aliases to the default keyword and allows the execution of the associated `Command` object."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "Step 1. The user launches the application for the first time. Assume no alias is present (by default, aliases in the JSON file will be the default command word)."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "Step 2. The user inputs `alias find get` to update the alias for `FindCommand` as `”get”`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "This will not only update the current AliasMap object, but will also update the JSON mapping with the help of StorageManager which handles all types of storage including JsonAliasMapStorage."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "The following is a sequence diagram showing how it works:"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "![AliasSequenceDiagram](images/AliasSequenceDiagram.png)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "Step 3. The user can now use the following command to trigger a FindCommand."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* `get -d lunch at macs`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "#### Design consideration:"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "##### Aspect: How alias executes"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* **Alternative 1 (current choice):** Allows aliases of all command words except for `AliasCommand`. Does not override default command words but merely adds an alias. Reserved keywords cannot be applied unless it is for its associated subclass (i.e. removing the custom alias)."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Pros: Neater implementation especially if the user might frequently change his alias."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Cons: Restricts degree of customisation."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* **Alternative 2:** Allows aliases of all command words. Does not override default command words but merely adds an alias. Reserved keywords cannot be applied unless it is for its associated subclass (i.e. removing the custom alias)."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Pros: More flexibility than Alternative 1."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Cons: Restricts degree of customisation due to reserved keywords not being allowed to use as alias for other Commands."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* **Alternative 3:** Allows customisation of ALL command words."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Pros: Highest degree of flexibility, better for users who can easily get used to Command Line Apps."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Cons: May be messy and slower learning users may get confused."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "_{more aspects and alternatives to be added}_"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "### Default Category"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "The function of the default category is to subsume all \"untagged\" `expenses` under some category."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "This is especially important for possible occasions such as when the User uses the application without any categories,"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "or when the User deletes a category that existing `expenses` are linked to."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "The default category generally functions the same way as any user-created category, except that it cannot be deleted or"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "renamed. It is contained separately from the user-created categories (if any) for this reason. If a new ExpenseBook is"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "started, the default category is automatically initialized so that the User can use the full range of the basic"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "features even without creating customized categories."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "### Expense and Budget Categorization Feature"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "The budgets and expenses in the expense book are grouped according to the user\u0027s specifications, as they can freely create"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "the categories that they need, top-up the desired amount for each category, and tag their expenses (both new and old) to"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "the respective categories to keep track of their spending."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Each expense is tagged to exactly one category, and the category must exist in the expense book before any expenses can"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "be tagged to it. When a category is created in the expense book, the corresponding budget is automatically initialized"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "with zero amount. Thereafter, the user can top-up (or reduce) each budget accordingly, and the balance after deducting"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "all expenses within that category is shown to the user."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "![AddingCategorizedExpenseActivityDiagram](images/CategoryBudgetActivityDiagram.png)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "The activity diagram above shows a possible flow of the user attempting to add an expense tagged to a specific category."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "![ToppingUpCategoryBudgetActivityDiagram](images/CategoryBudgetActivityDiagram2.png)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "This second activity diagram shows a possible flow of the user trying to top-up the budget of a specific category."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "### Graphical Representation Feature"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "#### Implementation"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "The graphical representation feature will allow the user to view a pie chart of his/her total spending, with each wedge representing the percentage of spending that corresponds to a specific tag."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "This graphical representation will be displayed on `GraphDisplayWindow` upon the execution of `GraphCommand`. This mechanism will be facilitated by `PieChartData` to retrieve the required data from `ExpenseBook`."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "`PieChartData` extends `ChartData` which allows abstracting out the implementation of different graphical representation formats for future versions."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* `PieChartData#collectData(ObservableList\u003cExpense\u003e)` — Retrieves required data."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* `PieChartData#getData()` — Returns data of each `Tag` and the corresponding total expenditure."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "The interactions between `ExpenseBook` (which contains the in-memory data of expenses) and `GraphicalDisplayWindow` (which specifies the UI displayed) facilitated by `PieChartData` is given below. \u003c/br\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "![ClassDiagram](images/GraphicalRepresentationClassDiagram.png)"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "The user initiates this function by executing the graph command. Refer Logic Component architecture diagram for the mechanism by which strings are read and parsed into Command objects."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "The sequence diagram below shows the proposed mechanism by which the required data necessary to initialise a pie chart is retrieved. This data is then used to format the UI output."
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "![SequenceDiagram](images/GraphicalRepresentationSequenceDiagram.png)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** Expenses that are untagged will be displayed as a single group. Tags should not be case sensitive."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "A possible edge case would be the user having empty expense record prior to executing the graph command. In such a case, the program will display a default message."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "The following activity diagram summarizes what happens when a user enters a graph command:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "![ActivityDiagram](images/GraphicalRepresentationActivityDiagram.png)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "#### Points to Note:"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* **UI classes to only act as placeholders**"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * UI formatting is separated from the backend logic."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * Allows for dynamic updating of graphs."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* **Data retrieval occurs upon every execution**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * Updates graph accordingly."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * Will not show outdated graphs."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* **Easily extensible**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * Different sub-classes of `ChartData` can be implemented to collect a variety of meaningful data from `ExpenseBook` to be displayed by various UI classes in different formats."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "## **Documentation, logging, testing, configuration, dev-ops**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "* [Documentation guide](Documentation.md)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "* [Testing guide](Testing.md)"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "* [Logging guide](Logging.md)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "* [Configuration guide](Configuration.md)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "* [DevOps guide](DevOps.md)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Requirements**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "### Product scope"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "**Target user profile**:"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* is a college student"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* spends money mainly on food, transportation, social life and material goods"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* wants to keep track of his personal expenses"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* considers oneself as \"tech-folk\""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* is familiar and comfortable with the command line"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* types fast"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* wants to set and keep to a budget"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* likes things that are fast and simple"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* is attached"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* pays for his own bills"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* is all for cashless"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* is cautious about digital security"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* prefers storing things digitally rather than on paper"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* likes flexibility/customization"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* plays games and likes achievements"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* is not earning income"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* is lazy enough to find a solution to manage his expenses for him"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "**Value proposition**: manage expenses faster and simpler than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "### User stories"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * *`, Medium (nice to have) - `* *`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "| Priority | As a …​                                    | I want to …​                                                                                 | So that I can…​                                                        |"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "| -------- | ------------------------------------------ | ---------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------- |"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "| `* * *`  | user                                       | add a new expense                                                                                    | update my new spending                                                 |"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "| `* * *`  | user                                       | delete an expense                                                                                    | remove entries that I no longer need                                   |"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "| `* * *`  | user                                       | set a budget                                                                                         | track if I am sticking to my financial goals                           |"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "| `* * *`  | user                                       | top up a budget                                                                                      | increase my spending limit                                             |"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "| `* * *`  | user                                       | edit an expense                                                                                      | change details of the expense that is outdated or wrong                |"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "| `* *`    | organized user                             | categorise my expenditure                                                                            | better segregate and manage various areas of my spending               |"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "| `* *`    | new user                                   | use a help command                                                                                   | refer to instructions when I forget how to use the App                 |"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "| `* *`    | efficient user                             | customise my command keywords                                                                        | customize my user experience and workflow according to my preferences  |"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "| `* *`    | user with many expenses                    | find expenses via date, keywords, or category                                                        | locate a specific expense easily                                       |"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "| `* *`    | careless user                              | sort expenses based on date, description, or amount                                                  | organise my expenses better and gain a big picture view                |"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "| `*`      | meticulous user                            | track my saving progress to buy big ticket items                                                     | know how far away am I from the target                                 |"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "| `*`      | user who likes to see progress             | use a progress tracker to motivate myself                                                            | keep working at saving up                                              |"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "| `*`      | cautious user                              | view my ledger data in a human-readable format and only edit the file when commands are executed     | be assured that the accounts are updated and accurate                  |"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "| `*`      | long-time user                             | archive older data from my view                                                                      | manage my expenses easier                                              |"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "| `*`      | careless user                              | revert my commands                                                                                   | easily undo changes I made to my budgeting                             |"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "| `*`      | user who likes to plan in advance          | simulate future spending                                                                             | visualize my journey towards my financial goals                        |"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "| `*`      | forgetful user                             | receive notifications of budget limits and bill payments                                             | better plan for daily expenditure and make payments on time            |"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "*{More to be added}*"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "### Use cases"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "(For all use cases below, the System is the Bamboo and the Actor is the user, unless specified otherwise)"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "#### Use case U1: Add an expense"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. User requests to add an expense."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "2. Bamboo adds the expense."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "3. Bamboo lists all expenses and shows the new budget balance."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1a. The given command format is invalid."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* 1b. The given field value is invalid."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    * 1b1. Bamboo shows an error message."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "#### Use case U2: Top-up budget"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "1. User requests to top up a specified budget by an amount and category he provides."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "2. Bamboo tops up the user\u0027s budget in the category and by the amount given by the user."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "3. Bamboo updates the budget balance."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* 1a. The given top-up value is invalid."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    * 1a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* 1b. The given category value is invalid."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    * 1b1. Bamboo shows an error message."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "#### Use case U3: Delete an expense"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. User requests to list expenses (U5)."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "2. Bamboo shows a list of expenses."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "3. User requests to delete a specific expense in the list."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "4. Bamboo deletes the expense."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "5. Bamboo lists all expenses and shows the budget balance."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "  Use case ends."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 3a. The given expense does not exist."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    * 3a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "      Use case resumes at step 2."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "#### Use case U4: Edit an expense"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. User requests to list expenses (U5)."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "2. Bamboo shows a list of expenses."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "3. User requests to edit an expense with the new fields given."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "4. Bamboo edits the expense."
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "5. Bamboo feedbacks to user what was changed."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "6. Bamboo lists all expenses and shows the new budget balance."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    * 2a1. Bamboo shows an error message"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "      Use case ends"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* 3a. The given field value is invalid."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    * 3a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "#### Use case U5: List all expenses"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. User requests to list all expenses."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "2. Bamboo shows a list of all expenses recorded and the current budget balance."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "#### Use case U6: Add a remark to an expense"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**Preconditions:**"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* Expense List is not empty."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. User requests to add a remark to specified expense item."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "2. Bamboo adds remark to specified expense item."
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "3. Bamboo lists all expenses and shows the budget balance."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1a. The given expense does not exist."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Use case ends."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* 1b. The given field value is invalid."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    * 1b1. Bamboo shows an error message."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "#### Use case U7: Find an expense"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. User requests to find expense by certain identifiers and search terms."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "2. Bamboo shows a list of expenses which match the identifiers and search terms, and shows the overall budget balance."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1a. The given field values are invalid."
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "#### Use case U8: Sort expense list"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. User requests to sort currently displayed expenses by certain sort criterion."
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "2. Bamboo sorts the currently displayed expenses according to user-specified sort criterion."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "3. Bamboo displays the sorted expenses to the user with the budget balance."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1a. The given field values are invalid."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "#### Use case U9: Add category"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. User requests to add a new category with a user-specified category name."
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "2. Bamboo creates a new category with the user-specified name and shows a success message."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "3. Bamboo lists all expenses and shows the budget balance."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1a. The given field values are invalid."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1b. The given category name already exists."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1b1. Bamboo shows an error message."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "#### Use case U10: Delete category"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Similar to U9, except it\u0027s the opposite."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1a. The given field values are invalid."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1b. The given category name does not exist."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1b1. Bamboo shows an error message."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1c. The given category name is restricted e.g. `Default` category."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1c1. Bamboo shows an error message."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "#### Use case U11: Switch category"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. User requests to switch to a user-specified category"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "2. Bamboo shows all expenses which are tagged under the user-specified category, along with the budget for that category."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1a. The given field values are invalid."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1b. The given category does not exist."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1b1. Bamboo shows an error message."
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "#### Use case U12: Change Command Keyword"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. User requests to change command keyword to a user-defined string."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "2. Bamboo maps the command linked to the original command keyword to the user-defined string."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1a. The given field values are invalid."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* 1b. The user-defined string is already a command keyword."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * 1b1. Bamboo shows an error message."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "#### Use case U13: Reset Changed Command Keyword"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "1. User requests to reset changed command keyword to default command keyword."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "2. Bamboo clears the changed commands linked to the original command keyword."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* 1a. No command keyword changed previously."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    * 1a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "      "
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "#### Use case U15: Graph Command Keyword"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "1. User requests to view graph of his personal finance."
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "2. Bamboo displays a pop-up window containing a pie chart showing amount spent for each category."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* 1a. User has not recorded any expenditures into the app."
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    * 1a1. Bamboo shows a blank pop-up window."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "#### Use case U14: Reduce Category Budget"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "**MSS**"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "1. User requests to reduce a given amount of budget from a specific category."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "2. Bamboo reduces the matching category-budget by the specified amount."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "3. Bamboo shows the new budget amount for that category."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "4. Bamboo updates the budget balance bar."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "   Use case ends."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "**Extensions**"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "* 1a. The category does not exist in the expense book."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    * 1a1. Bamboo shows an error message."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "* 1b. The specified amount is invalid."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    * 1b1. Bamboo shows an error message."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      Use case ends."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "* 1c. The specified amount exceeds the amount present in the specified budget."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    * 1c1. Bamboo reduces the amount in the specified budget to zero."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    * 1c2. Bamboo alerts the user that the amount reduced from the budget exceeded the amount present."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    * 1c3. Bamboo updates the budget balance bar."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      Use case resumes from 4."
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "### Non-Functional Requirement"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "Project Constraints:"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* Product does not handle user\u0027s actual financial account"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* User input in the form of command line"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* System should be beginner-friendly"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* User\u0027s spending data should be saved in an external storage file"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* Storage file should be updated after each addition or update of spending data"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* Product is offered as an offline application"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "Process Requirements:"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* Project is expected to adhere to the set Milestones."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* User can execute actions using at most 1 command."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "### Glossary"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "- **Mainstream OS**: Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "- **Expense**: A single instance of expenditure containing a description, amount spent, date, and category. Expenses are subtracted from the user\u0027s **budget**."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "- **Budget**: The amount a user sets aside to spend."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "- **Budget Balance**: The amount of budget left after deducting all expenses."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "## **Appendix: Instructions for manual testing**"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-info\"\u003e:information_source: **Note:** These instructions only provide a starting point for testers to work on;"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "testers are expected to do more *exploratory* testing."
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "### Launch and shutdown"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "1. Initial launch"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Double-click the jar file Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "   Alternatively, enter `java -jar expensebook-v1.4.jar` in Command Prompt after switching to the directory with the jar file."
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "1. Saving window preferences"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Re-launch the app by double-clicking the jar file.\u003cbr\u003e"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "       Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "### Deleting an expense"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "1. Deleting an expense while all expenses are being shown"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   1. Prerequisites: List all expenses using the `list` command. At least 1 expense in the list."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 1`\u003cbr\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Expected: First expense is deleted from the list. Details of the deleted expense shown in the command box with a uscess."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Test case: `delete 0`\u003cbr\u003e"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Expected: No expense is deleted. Error details shown in the command box. "
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "   1. Other incorrect delete commands to try: `delete`, `delete x`, `...` (where x is larger than the list size)\u003cbr\u003e"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "      Expected: Similar to previous."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "### Adding an expense"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. Adding an expense while Expense Book is empty. "
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    1. Prerequisites: List all expenses using `list` command. Expense Book is empty."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    "
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    1. Test case: `add -d lunch -$10`\u003cbr\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "       Expected: An Expense with the description \"lunch\", costing $10, with the date set as the present date, is added to the expense book. A success message detailing this is shown in the command box."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "       "
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    1. Test case: `add -d lunch -$10 -@27/09/2020`\u003cbr\u003e"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "       Expected: An Expense with the description \"lunch\", costing $10, occuring on 27th September 2020 is added to the expense book. A success message detailing this is shown in the command box."
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    "
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    1. Test cases: `add -d lunch`\u003cbr\u003e"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "       Expected: No expense is added. Error details shown in the command box."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. Adding an expense while Expense Book has some expenses"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    "
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    1. Prerequisites: List all expenses using `list` command. Expense Book has at least 1 entry."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    "
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    1. Test case: Add an expense with the same description, amount and date as an existing expense in the expense book.\u003cbr\u003e"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "       Expected: No expense is added. Error details shown in the command box."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "### Topup budget"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. Topping up budget without a category specified"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    1. Test case: `topup -$-10`\u003cbr\u003e"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    Expected: Budget is not topped up. Error message shown in command box because of negative value provided."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    "
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    1. Test case: `topup -$10`\u003cbr\u003e"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    Expected: \"Default\" category budget is topped up by $10. A success message detailing this is shown in the command box."
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    "
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. Topping up budget with a category specified"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    1. Test case: `topup -$10 t/Food` (\"Food\" category exists)\u003cbr\u003e"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    Expected: \"Food\" category budget is topped up by $10. A success message detailing this is shown in the command box."
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    "
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    1. Test case: `topup -$10 t/Transport` (\"Transport\" category does not exist yet)\u003cbr\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    Expected: No budget is topped up. Error message shown in command box because the \"Transport\" category does not exist. "
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "### Saving data"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. Saving data automatically after every command"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   1. Prerequisites: At least one expense is in the expense book."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   "
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   1. Add an expense: `add -d test -$10`"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   "
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "   1. Test case: Close the app, then start it up again. \u003cbr\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      Expected: the expense book should be the same as when the app was closed. "
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 148,
      "hakiem526": 39,
      "marcus2k": 123,
      "maxxyh": 241,
      "-": 265,
      "lebencwb": 60
    }
  },
  {
    "path": "docs/SettingUp.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Setting up and getting started"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "## Setting up the project in your computer"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-warning\"\u003e:exclamation: **Caution:**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Follow the steps in the following guide precisely. Things will not work out if you deviate in some steps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "First, **fork** this repo, and **clone** the fork into your computer."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to use Intellij IDEA (highly recommended):"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the JDK**: Follow the guide [_[se-edu/guides] IDEA: Configuring the JDK_](https://se-education.org/guides/tutorials/intellijJdk.html) to to ensure Intellij is configured to use **JDK 11**."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Import the project as a Gradle project**: Follow the guide [_[se-edu/guides] IDEA: Importing a Gradle project_](https://se-education.org/guides/tutorials/intellijImportGradleProject.html) to import the project into IDEA.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  :exclamation: Note: Importing a Gradle project is slightly different from importing a normal Java project."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Verify the setup**:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "   1. Run the `seedu.expense.Main` and try a few commands."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "   1. [Run the tests](Testing.md) to ensure they all pass."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "## Before writing code"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Configure the coding style**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "   If using IDEA, follow the guide [_[se-edu/guides] IDEA: Configuring the code style_](https://se-education.org/guides/tutorials/checkstyle.html) to set up IDEA\u0027s coding style to match ours."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e:bulb: **Tip:**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "   Optionally, you can follow the guide [_[se-edu/guides] Using Checkstyle_](https://se-education.org/guides/tutorials/checkstyle.html) to find how to use the CheckStyle within IDEA e.g., to report problems _as_ you write code."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "   \u003c/div\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Set up CI**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "   This project comes with a GitHub Actions config files (in `.github/workflows` folder). When GitHub detects those files, it will run the CI for your project automatically at each push to the `master` branch or to any PR. No set up required."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Learn the design**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "   When you are ready to start coding, we recommend that you get some sense of the overall design by reading about [ExpenseBook’s architecture](DeveloperGuide.md#architecture)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "-": 47
    }
  },
  {
    "path": "docs/Testing.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "title: Testing guide"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "* Table of Contents"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{:toc}"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "## Running tests"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to run tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 1: Using IntelliJ JUnit test runner**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * To run a subset of tests, you can right-click on a test package,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* **Method 2: Using Gradle**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Open a console and run the command `gradlew clean test` (Mac/Linux: `./gradlew clean test`)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-secondary\"\u003e:link: **Link**: Read [this Gradle Tutorial from the se-edu/guides](https://se-education.org/guides/tutorials/gradle.html) to learn more about using Gradle."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "--------------------------------------------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## Types of tests"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "This project has three types of tests:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Unit tests* targeting the lowest level methods/classes.\u003cbr\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "   e.g. `seedu.expense.commons.StringUtilTest`"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. *Integration tests* that are checking the integration of multiple code units (those code units are assumed to be working).\u003cbr\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "   e.g. `seedu.expense.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together.\u003cbr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "   e.g. `seedu.expense.logic.LogicManagerTest`"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 33
    }
  },
  {
    "path": "docs/UserGuide.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "# User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Bamboo (v1.4) is a **simple desktop app for managing personal finance, optimized for use via a Command Line Interface (CLI),** and targeted at college students. If you can type fast, Bamboo v1.4 can get your financial management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "This User Guide explains how you can use Bamboo to manage your personal finances. Let\u0027s grow our wealth! :bamboo:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Refer to [Quick Start](#QuickStart) for a short tutorial on how to set up Bamboo on your system, and refer to [Features](#Features) for a full walk-through of Bamboo\u0027s features."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "---"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "## Table of contents"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "1. [Quick Start](#QuickStart)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "2. [Features](#Features)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "3. [Usage](#Usage)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "4. [Command Summary](#CommandSummary)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "## Quick Start \u003ca name\u003d\"QuickStart\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "\u003e _Bamboo runs on Windows, OS-X, and Unix systems._"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. Ensure that Java Version 11 or above is installed in your computer"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "2. Download the latest Bamboo Release `ExpenseBook.jar` [here](https://github.com/AY2021S1-CS2103-W14-3/tp/releases/tag/v1.4)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "3. Copy the file to the folder you want to use as the home directory for Bamboo."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "4. Double-click the file to start the app. It should open in a new window."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    OR Navigate to the directory on terminal and run `java -jar ExpenseBook.jar`."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "5. Type in commands with arguments in the command input box above, and press `Enter` to execute them."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "6. Use the `help` command to find out the list of commands available, or we\u0027d recommend checking out the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "[Features](#Features) section for a comprehensive guide!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "7. Let\u0027s grow our wealth together!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "## Command Format Guide"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003cdiv markdown\u003d\"block\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "This section explains the format of commands in this User Guide."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "* Items in \u003cangular_brackets\u003e are types of parameters to be supplied by the user e.g. in `add -d \u003cdescription\u003e`, `\u003cdescription\u003e` refers to a description of an expense such as \"Lunch @ Thai Place\"."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "* Items in square brackets are optional e.g `-d \u003cdescription\u003e [-@\u003cdate\u003e]` means that date input is optional. Both `-d lunch` and `-d lunch -@03-09-2020` are valid."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ":bulb: **Note:** Command input is limited to 450 characters total (including command and parameters)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "## Features \u003ca name\u003d\"Features\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "### Basic"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Add an Expense**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Adds new expense record."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Command: `add`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#add)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **List All Expenses**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Displays a list of all the user\u0027s expenses."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Command: `list`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#list)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Update an Expense**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Edits existing expense record."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Command: `edit`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#edit)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Delete an Expense**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Deletes a specified existing expense record."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Command: `delete`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#delete)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "1. **Top-up Budget**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Increases the amount of budget (in the \"Default\" category) by a user-defined amount."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Command: `topup`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#topup)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Show Help**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Renders a help link to the commands in User Guide"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Command: `help`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#help)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Clear Expense Book**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Clears and resets the expense book."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Command: `clear`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#clear)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Exit Application**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Exits Bamboo."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Command: `exit`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#exit)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Save Load Function**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Automatically saves the state of the expense book after each operation."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Automatically loads previously saved data on app start-up."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "### Extension"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Category Tagging**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Tags expenses by their categories."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Prefix: `t/`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#tag)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "2. **Adding Remark**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Adds a remark to an existing expense."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Command: `remark`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#remark)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "3. **Add Category**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Adds a new category (for budgeting and expenses)."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Command: `addCat`"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#addCat)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "4. **Delete Category**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Deletes an existing category in the expense book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Command: `deleteCat`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#deleteCat)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "5. **Top-up Budget by Category**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Increases the amount of budget in a specific category by a user-defined amount."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Command: `topup`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - [Usage](#topup)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "6. **Reduce Budget (by Category)**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Reduces the amount of budget in a specific category by a user-defined amount."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Command: `reduce`"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - [Usage](#reduce)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "7. **Switch Category**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Switches an expense book into another existing category."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Command: `switch`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#switch)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "8. **Find an Expense**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Finds expenses by keywords, date, tags."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Command: `find`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#find)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "9. **Sort Expenses**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Sort by **date, description (alphabetical), amount**, with option of reverse sort."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Command: `sort`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#sort)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "10. **Add Command Shortcut**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    - Maps user-specified shortcut to existing command."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Command: `alias`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - [Usage](#alias)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "11. **Reset Command Shortcuts**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    - Removes all user-specified command shortcuts."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    - Command: `resetAlias`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    - [API](#resetAlias)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "12. **Display Graph**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    - Opens a window that displays a pie chart representing categorical expenses."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    - Command: `graph`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    - [API](#graph)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "## Usage \u003ca name\u003d\"Usage\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "For the purposes of Bamboo, the terms `Tag` and `Category` are interchangeable."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "### Fields/Glossary"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **expense**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - An expense is a cost incurred in or required for something. Every entry in **Bamboo** is an expense."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Bamboo treats 2 expenses as identical if they have the same **Description**, **Amount**, and **Date**."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Restrictions: Bamboo cannot store duplicate expenses i.e. 2 expenses are identical according to the criterion above."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Refer to [Commands](#commands) to see how to manage expenses using Bamboo."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "2. **description**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Description of expense."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Works only in complement with [add](#add), [edit](#edit), [find](#find), [sort](#sort)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Prefix: `-d`"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Format: `-d \u003cdescription\u003e`"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Restrictions: Descriptions can be up to 200 characters long."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `-d lunch`, `-d dinner`"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "3. **amount**\u003ca name\u003d\"amount\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Amount of money spent in expense."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - **NOTE**: Amounts provided must be between 0 and 10e\u003csup\u003e9\u003c/sup\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Works only in complement with [add](#add), [edit](#edit), [find](#find), [sort](#sort), [topup](#topup)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Prefix: `-$`"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Format: `-$\u003cdollars\u003e[.\u003ccents\u003e]`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Restrictions: Value provided must be between 0 and 10e\u003csup\u003e9\u003c/sup\u003e, inclusive."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `-$2`, `-$1.50`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "4. **date**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Date which expense was made."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Works only in complement with [add](#add), [edit](#edit), [find](#find), [sort](#sort)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Prefix: `-@`"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Format: `-@\u003cdd-MM-yyyy\u003e`"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Restrictions: Date must be a valid calendar date."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `-@01-07-2020`, `-@02-07-2020`"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "5. **tag** \u003ca name\u003d\"tag\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Tags expense under a category. (synonymous with Category)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Each tag (or category) is associated with 1 budget, and vice versa."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Works only in complement with [add](#add), [edit](#edit), [find](#find), [switch](#switch), [addCat](#addCat), [deleteCat](#deleteCat), [topup](#topup)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Format: `t/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `edit t/Food`, `find -d Coffee t/Food`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "6. **remark** \u003ca name\u003d\"remark\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Additional information about an expense."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Works only in complement with [remark](#remark)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Format: `-r \u003cremark\u003e`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Restrictions: Remarks can be up to 200 characters long."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `remark 1 -r impulse spending`, `remark 2 -r emergency`"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "7. **alias** \u003ca name\u003d\"alias\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - \"Also known as\" for commands."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Alternative shortcuts for commands can be used to invoke original commands."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Added with [alias](#alias) command"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Format: `alias \u003coriginal_command\u003e \u003cnew_command\u003e`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Input Restrictions:"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        - The shortcut cannot be the same as the original command."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        - Original command must exist."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        - Length of shortcut must not exceed 10 characters long."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        - Shortcut may consist of only case-sensitive alphabetical characters."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        - Cannot remap the `alias` and `resetAlias` commands."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        - Only one shortcut for a command at any point in time."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `alias add spent` makes `spent` a command shortcut for `add`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "\u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ":bulb: **Note:** Prefixes function with or without whitespace after. For example, `-d dinner` and `-ddinner` will yield the same results."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "### Commands  \u003ca name\u003d\"commands\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Add an Expense `add`** \u003ca name\u003d\"add\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Order of arguments is flexible."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - If multiple fields of the same type are specified, only the last one is processed."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Date input (dd-MM-yyyy) is optional, defaults to system\u0027s date (usually today)."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Tag (or category) input is optional, defaults to the \"Default\" category. This means that the expense is subtracted from the \"Default\" Budget."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Format: `add -d \u003cdescription\u003e -$\u003camount_spent\u003e [-@\u003cdate\u003e] [t/\u003ccategory\u003e]`"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `add -d dinner -$10.50` Adds the expense to **current date\u0027s** record."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `add -d dinner -$10.50 -@24-06-2020 t/Food` Adds the expense under **24 June 2020** and tags it under \"Food\" category."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    _**Specifying Category/Tag**_"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Example: `add -d dinner -$10.50 -@20-08-2020 t/Food t/Basic` As stated above, only `t/Basic` is processed, thus the expense is tagged with the \"Basic\" category, if it exists."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Input constraints:"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      - If specified, the tag input must match one of the existing categories in the expense book. If not, the"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "       expense will be added to the \"Default\" category - the new category needs to be created first (see [addCategory](#addCat))"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      - The expense to be added must not share the same identity fields (description, amount and date) as any expense in the expense book."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "      - Total sum of expenses cannot exceed 10e\u003csup\u003e9\u003c/sup\u003e (_Consistent with `Amount`_)"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ![add_example](images/ug_example/add_example.PNG)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **List all Expenses `list`** \u003ca name\u003d\"list\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Displays all the items in the list."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Displays the budget balance based on **total expenditure** against the **total sum of all budgets**."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Format: `list`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `list`"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ![list_example](images/ug_example/list_example.PNG)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Edit an Expense `edit`** \u003ca name\u003d\"edit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Edits the fields of existing expenses."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Identified by index starting from 1, based on expenses currently displayed."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Order of arguments is flexible except index."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Edited fields overwrite the previous field completely."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - **At least 1 of the 4 fields** (description, amount, date, category) of expense must be specified."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Format: `edit \u003cindex\u003e [-d \u003cdescription\u003e] [-$\u003camount_spent\u003e] [-@\u003cdate\u003e] [t/\u003ccategory\u003e]`"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Example: `edit 1 -d lunch -$12.50`"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `edit 11 -$12.50 -d lunch -@23-06-2020 t/Food`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Input constraints:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      - See [add](#add)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    :bulb: **Note**: Specifying a blank tag field (e.g. `edit 1 t/`) is the same as editing the tag to the \"Default\" tag."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ![edit_example](images/ug_example/edit_example.PNG)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Delete an Expense `delete`** \u003ca name\u003d\"delete\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Deletes a specified existing expense record."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Identified by index starting from 1, based on expenses currently displayed."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Format:  `delete \u003cindex\u003e`"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Example: `delete 11` Deletes the item at index 11 of the list."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ![delete_example](images/ug_example/delete_example.PNG)"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Add a Category `addCat`** \u003ca name\u003d\"addCat\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Adds a new category to the expense book."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - The category must not already exist in the expense book."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Format: `addCat t/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Example: `addCat t/Food`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    ![addCat_example](images/ug_example/addCat_example.PNG)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    _\"Shopping\" category is added_"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    ![addCat_example](images/ug_example/addCat_example_2.PNG)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    _Use \"Shopping\" category_"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Delete a Category `deleteCat`** \u003ca name\u003d\"deleteCat\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Deletes an existing category in expense book, if it exists. (Note: the \"Default\" category \u003cu\u003e cannot \u003c/u\u003e be deleted.)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Category budget of the deleted category will be deleted."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - All expenses tagged with deleted category will be reverted to \"Default\" category."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Format: `deleteCat t/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `deleteCat t/Food`"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    ![deleteCat_example](./images/ug_example/deleteCat_example.PNG)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    _Expense 9 is reverted from \"Shopping\" category to \"Default\" category_"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Top up Category Budget `topup`** \u003ca name\u003d\"topup\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Increases the budget of a **particular category** by the amount specified by the user."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Expenses in the same category reduce the balance of the budget."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Tag (or category) input is optional, defaults to the \"Default\" category."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Format: `topup -$\u003camount\u003e [t/\u003ccategory\u003e]`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Example: `topup -$10` Increases the \"Default\" category\u0027s budget by 10 dollars."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Example: `topup -$20 t/Food` Adds an extra budget of 20 dollars to the \"Food\" category-budget."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Input constraints:"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      - The category specified must exist in the Expense Book. Otherwise, it must be [created](#addCat) before it can be topped up."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      - The input amount must be non-negative (see [Amount](#amount)) and cannot exceed 10e\u003csup\u003e9\u003c/sup\u003e."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      - The total amount of all the budgets cannot exceed 10e\u003csup\u003e9\u003c/sup\u003e."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    :bulb: **Note**: Each budget is associated with 1 category, and vice versa."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ![topup_example](images/ug_example/topup_example.PNG)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Reduce Category Budget `reduce`** \u003ca name\u003d\"reduce\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Reduces the budget of a **particular category** by the amount specified by the user."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - The amount in any budget cannot fall below zero (any reduction in budget beyond the amount present would cause a _reduction to zero_)."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Tag (or category) input is optional, defaults to the \"Default\" category."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Format: `reduce -$ [t/\u003ccategory\u003e]`"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Example: `reduce -$10` Reduces the \"Default\" category\u0027s budget by 10 dollars."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Example: `reduce -$5 t/Food` Reduces the amount in the \"Food\" category-budget by $5 (or to $0 if the original amount was insufficient)."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    - Input constraints:"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      - The category specified must exist in the Expense Book. Otherwise, it must be [created](#addCat) before it can be reduced."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      - The input amount must be non-negative (see [Amount](#amount)) and cannot exceed 10e\u003csup\u003e9\u003c/sup\u003e."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ![reduce_example](images/ug_example/reduce_example)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Find Expenses `find`** \u003ca name\u003d\"find\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    - Finds expenses with given keywords and/or date by user."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Expenses that fits the criteria will be presented as another list."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - For Description, keywords are not case-sensitive, and partial word matching is supported."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Date input should be in the format dd-MM-yyyy."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Budget Balance will not be shown in this view."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    - Format: `find [-d \u003cdescription\u003e] [-@\u003cdate\u003e]`"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    - Example: `find -d Phone`, `find -d lunch -@01-07-2020`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ![find_example](images/ug_example/find_example.PNG)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    _Find by partial description keyword_"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    ![find_example_2](images/ug_example/find_example_2.PNG)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    _Find by description keyword and date_"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Add a Remark `remark`** \u003ca name\u003d\"remark\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Adds a remark to an existing expense."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Note: Remarks can be up to 200 characters long."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Format: `remark \u003cindex\u003e -r \u003cremark\u003e`"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `remark 11 -r Pepper Lunch`"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    ![remark_example](./images/ug_example/remark_example.PNG)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Sort Expenses `sort`** \u003ca name\u003d\"sort\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Sorts expenses which are current displayed."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - **Sorting keywords** (and thus criterion) include:"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        - expense amount: `amount`"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        - date: `date`"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        - description (alphabetical order): `description`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Add a \"R\" behind sorting keywords to induce reversed sorting order"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Sorting criterion are assigned priority in order of appearance."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - A minimum of 1 sorting keyword is required"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Format: `sort -by \u003csorting keyword\u003e [-by \u003csorting keyword\u003e] [-by \u003csorting keyword\u003e]`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `sort -by date -by descriptionR` (sorts by date, then by reversed alphabetical order of the descriptions)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    | ![sort_example](./images/ug_example/sort_example.PNG) \u003cbr\u003e _Single parameter sort: ascending Date order_                                       | ![sort_example_2](./images/ug_example/sort_example_2.PNG) \u003cbr\u003e _Multiple parameter sort: in order of appearance – date, then description, then amount (see Expenses 1 and 2)_ |      "
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    |------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    |![sort_example_3](./images/ug_example/sort_example_3.PNG) \u003cbr\u003e _Multi-parameter sort will take the last sorting keyword if there are duplicates_|![sort_example_4](./images/ug_example/sort_example_4.PNG) \u003cbr\u003e _Sorting after using `Find`_                                                                                    |"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Switch Category `switch`** \u003ca name\u003d\"switch\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Switches expense book to requested category."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Displays all expenses tagged under requested category."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Budget balance displayed below is also category-specific."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Requested category must exist in expense book."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Format: `switch t/\u003ccategory\u003e`"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Example: `switch t/Food`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u003cdiv markdown\u003d\"span\" class\u003d\"alert alert-primary\"\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    :bulb: **Note**: Can also switch to the \"Default\" category view."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    ![switch_example](./images/ug_example/switch_example.PNG)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    _Budget balance displayed here is the budget for the \"Food\" category_"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Add Command Shortcut `alias`** \u003ca name\u003d\"alias\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    - Maps user-specified shortcut to existing command."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Original command keyword will still function as before."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Input Restrictions:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        - The shortcut specified and the original command cannot be the same."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        - Original command must exist."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        - Length of shortcut must not exceed 10 characters long."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        - Shortcut may consist of only case-sensitive alphabetical characters."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        - Cannot remap the `alias` and `resetAlias` commands."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Format: `alias \u003coriginal_command\u003e \u003cnew_command\u003e`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `alias add spent`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Each command may only have up to one shortcut at each time. If a new shortcut is provided for a command, the old shortcut will be un-mapped."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    - Reversing the two parameters will remove the particular shortcut from the command."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        - Example: `alias spent add`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    ![alias_example](./images/ug_example/alias_example.PNG)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    _Map \"spent\" to \"add\" command_"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    ![alias_example_2](./images/ug_example/alias_example_2.PNG)"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    _\"spent\" keyword can now function as \"add\"_"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    ![alias_example_3](./images/ug_example/alias_example_3.PNG)"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    _\"spent\" keyword can no longer function as \"add\"_"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Reset Command Shortcuts `resetAlias`** \u003ca name\u003d\"resetAlias\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    - Removes all existing shortcuts defined by user."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    - Format: `resetAlias`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    - Example: `resetAlias`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    ![resetAlias_example](./images/ug_example/resetAlias_example.PNG)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Graph Command `graph`** \u003ca name\u003d\"graph\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    - Opens a window that displays a pie chart representing categorical expenses."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    - Format: `graph`"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    - Example: `graph`"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    - Note: The pie chart does not update dynamically."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "      If a command that edits the Expense Book is entered while the graph window is open, the pie chart will not be updated."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "      User must re-enter the graph command to update the pie chart accordingly."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    ![graph_example](./images/ug_example/graph_example.PNG)"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Display Help `help`** \u003ca name\u003d\"help\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Displays a help link to the User Guide, which comprehensively covers Bamboo\u0027s commands."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Format: `help`"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    - Example: `help`"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    ![help_example](./images/ug_example/help_example.PNG)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \u0026nbsp;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "17. **Clear All Expenses `clear`** \u003ca name\u003d\"clear\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Clears all expenses from Bamboo, resulting in an empty expense book."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Format: `clear`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Example: `clear`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ![clear_example](images/ug_example/clear_example.png)"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "1. **Exit Application `exit`** \u003ca name\u003d\"exit\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Exits the application."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Format: `exit`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "## Command Summary \u003ca name\u003d\"CommandSummary\"\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "|   Action      | Format, Examples                                                                                                                                                 |"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "|---------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "|  **Add**      | `add -d \u003cdescription\u003e -$\u003camount_spent\u003e [-@\u003cdate\u003e] [t/\u003ccategory\u003e]` \u003cbr\u003e e.g., `add -d dinner -$10.50`, `add -d dinner -$10.50 -@20-08-2020 t/Food`                |"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "|  **List**     | `list`                                                                                                                                                           |"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "|  **Edit**     | `edit \u003cindex\u003e [-d \u003cdescription\u003e] [-$\u003camount_spent\u003e] [-@\u003cdate\u003e] [t/\u003ccategory\u003e]`\u003cbr\u003e e.g.,`edit 1 -d lunch -$12.50`, `edit 1 -$12.50 -d lunch -@11-11-2020 t/Lunch`|"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "| **Delete**    | `delete \u003cindex\u003e`\u003cbr\u003e e.g., `delete 1`                                                                                                                            |"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "| **Topup**     | `topup -$\u003camount\u003e [t/\u003ccategory\u003e]`\u003cbr\u003e e.g., `topup -$200`, `topup -$30 t/Food`                                                                                   |"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "| **Reduce**    | `reduce -$\u003camount\u003e [t/\u003ccategory\u003e]`\u003cbr\u003e e.g., `reduce -$50`, `reduce -$40 t/Food`                                                                                 |"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "|  **Find**     | `find [-d \u003cdescription\u003e] [-@\u003cdate\u003e]` \u003cbr\u003e e.g., `find -d lunch`, `find -d lunch -@01-07-2020`                                                                    |"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "| **Remark**    | `remark \u003cindex\u003e -r\u003cremark\u003e` \u003cbr\u003e e.g., `remark 11 -r Pepper Lunch`                                                                                               |"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "| **Sort**      | `sort -by \u003csorting keyword\u003e [-by \u003csorting keyword\u003e] [-by \u003csorting keyword\u003e]` \u003cbr\u003e e.g., `sort -by date -by descriptionR`                                         |"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "| **Switch**    | `switch t/\u003ccategory\u003e` \u003cbr\u003e e.g., `switch t/Food`                                                                                                                 |"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "| **AddCat**    | `addCat t/\u003ccategory\u003e`\u003cbr\u003e e.g., `addCat t/Food`                                                                                                                  |"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "| **DeleteCat** | `deleteCat t/\u003ccategory\u003e` \u003cbr\u003e e.g., `deleteCat t/Food`                                                                                                           |"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "| **Alias**     | `alias \u003coriginal_command\u003e \u003cnew_command\u003e` \u003cbr\u003e e.g., `alias add spent`                                                                                            |"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "| **ResetAlias**| `resetAlias`                                                                                                                                                     |"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "| **Graph**     | `graph`                                                                                                                                                          |"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "| **Help**      | `help`                                                                                                                                                           |"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "| **Clear**     | `clear`                                                                                                                                                          |"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "| **Exit**      | `exit`                                                                                                                                                           |"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 109,
      "hakiem526": 13,
      "marcus2k": 23,
      "maxxyh": 274,
      "-": 18,
      "lebencwb": 63
    }
  },
  {
    "path": "docs/diagrams/AliasSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "participant \":ExpenseBookParser\" as ExpenseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "participant \"s:AliasCommand\" as AliasCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "[-\u003e LogicManager : execute(\"alias find get\")"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "LogicManager -\u003e ExpenseBookParser : parseCommand(\"alias find get\")"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "activate ExpenseBookParser"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "create AliasCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "ExpenseBookParser -\u003e AliasCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "activate AliasCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "AliasCommand --\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "deactivate AliasCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "ExpenseBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "deactivate ExpenseBookParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "LogicManager -\u003e AliasCommand : execute()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "activate AliasCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "AliasCommand -\u003e Model : setAlias(prev, new)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "Model --\u003e AliasCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "deactivate AliasCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "AliasCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "destroy AliasCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 45
    }
  },
  {
    "path": "docs/diagrams/ArchitectureSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Actor User as user USER_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":UI\" as ui UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Logic\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Model\" as model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":Storage\" as storage STORAGE_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "user -[USER_COLOR]\u003e ui : \"delete 1\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "activate ui UI_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ui -[UI_COLOR]\u003e logic : execute(\"delete 1\")"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic LOGIC_COLOR"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "logic -[LOGIC_COLOR]\u003e model : deleteExpense(e)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate model MODEL_COLOR"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "model -[MODEL_COLOR]-\u003e logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate model"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "logic -[LOGIC_COLOR]\u003e storage : saveExpenseBook(expenseBook)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "storage -[STORAGE_COLOR]\u003e storage : Save to file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "activate storage STORAGE_COLOR_T1"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e storage"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "storage --[STORAGE_COLOR]\u003e logic"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate storage"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "logic --[LOGIC_COLOR]\u003e ui"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate logic"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "ui--[UI_COLOR]\u003e user"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate ui"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "-": 36
    }
  },
  {
    "path": "docs/diagrams/BetterModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBook *-right-\u003e \"1\" UniqueExpenseList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBook *-right-\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "UniqueTagList -[hidden]down- UniqueExpenseList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "UniqueTagList -[hidden]down- UniqueExpenseList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "UniqueTagList *-right-\u003e \"*\" Tag"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "UniqueExpenseList o-right-\u003e Expense"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Expense -up-\u003e \"1\" Tag"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Expense *--\u003e Description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Expense *--\u003e Amount"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Expense *--\u003e Date"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Expense *--\u003e Remark"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 8,
      "-": 11,
      "lebencwb": 2
    }
  },
  {
    "path": "docs/diagrams/CategoryBudgetActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "(*)  --\u003e \"user requests to add expense with a specified category\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "If \"\" then"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e [category exists] \"add expense and update budget balance\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "else"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e [else] \"re-tag expense with default tag\""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e \"add expense and update budget balance\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Endif"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "If \"\" then"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e [user accepts] (*)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "else"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e [else] \"user creates specified category\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e \"user edits expense to desired category\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e(*)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 16
    }
  },
  {
    "path": "docs/diagrams/CategoryBudgetActivityDiagram2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "(*)  --\u003e \"user requests to top-up a specified category-budget\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "If \"\" then"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e [category exists] \"top-up specified category-budget\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e \"run command\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "If \"\" then"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e [user tops-up too much] \"user requests to reduce category-budget\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "If \"\" then"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e [amount reduced exceeds amount present in budget] \"reduce category-budget to zero\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e(*)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "else"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e [else] \"reduce category-budget by specified amount\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e(*)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Endif"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "else"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e [else] (*)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Endif"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "else"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e [else] \"Bamboo shows error message\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Endif"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "--\u003e(*)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 22
    }
  },
  {
    "path": "docs/diagrams/DefaultAliasSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "participant \":ExpenseBookParser\" as ExpenseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "participant \"s:DefaultAliasCommand\" as DefaultAliasCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "[-\u003e LogicManager : execute(defaultalias)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "LogicManager -\u003e ExpenseBookParser : parseCommand(defaultalias)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "activate ExpenseBookParser"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "create DefaultAliasCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "ExpenseBookParser -\u003e DefaultAliasCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "activate DefaultAliasCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "DefaultAliasCommand --\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "deactivate DefaultAliasCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "ExpenseBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "deactivate ExpenseBookParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "LogicManager -\u003e DefaultAliasCommand : execute()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "activate DefaultAliasCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "deactivate DefaultAliasCommand"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "DefaultAliasCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "destroy DefaultAliasCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 35
    }
  },
  {
    "path": "docs/diagrams/DeleteSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "participant \":ExpenseBookParser\" as ExpenseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":DeleteCommandParser\" as DeleteCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "participant \"d:DeleteCommand\" as DeleteCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":CommandResult\" as CommandResult LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e LogicManager : execute(\"delete 1\")"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "LogicManager -\u003e ExpenseBookParser : parseCommand(\"delete 1\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate ExpenseBookParser"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBookParser -\u003e DeleteCommandParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "DeleteCommandParser --\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBookParser -\u003e DeleteCommandParser : parse(\"1\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommandParser"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "create DeleteCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommandParser -\u003e DeleteCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e DeleteCommandParser : d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "DeleteCommandParser --\u003e ExpenseBookParser : d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommandParser"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027Hidden arrow to position the destroy marker below the end of the activation bar."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "DeleteCommandParser -[hidden]-\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "destroy DeleteCommandParser"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBookParser --\u003e LogicManager : d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate ExpenseBookParser"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager -\u003e DeleteCommand : execute()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "activate DeleteCommand"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "DeleteCommand -\u003e Model : deleteExpense(1)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model --\u003e DeleteCommand"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "create CommandResult"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand -\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "activate CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult --\u003e DeleteCommand"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate CommandResult"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "DeleteCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate DeleteCommand"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 11,
      "-": 58
    }
  },
  {
    "path": "docs/diagrams/GraphicalRepresentationActivityDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    (*) --\u003e \"Enter graph command\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    ---\u003e \"Parse command\""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    if \"\" then"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    --\u003e [valid] Execute graph command"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    --\u003e Retrieve data"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if \"\" then"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        --\u003e [empty list] Display default message"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        --\u003e (*)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        else"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        --\u003e [else] Display formatted graph"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        --\u003e(*)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        endif"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    else"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    --\u003e [else] Throw exception"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    endif"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    --\u003e (*)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @enduml"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 19
    }
  },
  {
    "path": "docs/diagrams/GraphicalRepresentationClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "class ExpenseBook"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "class UniqueExpenseList"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "class ObservableList"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "class Expense"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "class PieChartData"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "interface ChartDataCollector \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "class GraphicalDisplayWindow UI_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "hide empty members"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "ExpenseBook --\u003e UniqueExpenseList"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "UniqueExpenseList *--\u003e ObservableList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "ObservableList --\u003e Expense"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "ChartDataCollector \u003c|.. PieChartData"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "PieChartData --\u003e ExpenseBook"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "GraphicalDisplayWindow -[UI_COLOR]-\u003e ChartDataCollector"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 15,
      "marcus2k": 9
    }
  },
  {
    "path": "docs/diagrams/GraphicalRepresentationSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "-\u003e PieChartData : getChartData()"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "activate PieChartData"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "loop size of list"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    PieChartData -\u003e ObservableList : collectData()"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    activate ObservableList"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    ObservableList -\u003e Expense"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    activate Expense"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    Expense -\u003e ObservableList"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    ObservableList -\u003e PieChartData"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "end"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c- PieChartData"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "deactivate PieChartData"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 15
    }
  },
  {
    "path": "docs/diagrams/LogicClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor LOGIC_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "package Parser {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Parser \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Class ExpenseBookParser"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommandParser"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class CliSyntax"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ParserUtil"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentMultimap"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ArgumentTokenizer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class Prefix"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "package Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Class XYZCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandResult"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nCommand\" as Command"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Logic \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Class LogicManager"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "package Model{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Logic"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .up.|\u003e Logic"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "LogicManager --\u003e\"1\" ExpenseBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBookParser .left.\u003e XYZCommandParser: creates \u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e XYZCommand : creates \u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..|\u003e Parser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ArgumentTokenizer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .left.\u003e ArgumentMultimap"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e CliSyntax"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CliSyntax ..\u003e Prefix"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommandParser ..\u003e ParserUtil"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "ParserUtil .down.\u003e Prefix"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "ArgumentTokenizer .down.\u003e Prefix"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "XYZCommand -up-|\u003e Command"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .left.\u003e Command : executes \u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager --\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Command .right.\u003e Model"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "note right of XYZCommand: XYZCommand \u003d AddCommand, \\nFindCommand, etc"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "Logic ..\u003e CommandResult"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "LogicManager .down.\u003e CommandResult"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Command .up.\u003e CommandResult"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "CommandResult -[hidden]-\u003e Parser"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 59
    }
  },
  {
    "path": "docs/diagrams/ModelClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor MODEL_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor MODEL_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Package Model \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Interface ReadOnlyExpenseBook \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Model \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Interface ObservableList \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Class ExpenseBook"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Class ReadOnlyExpenseBook"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class Model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "Class ModelManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "Class UserPrefs"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Class ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Package Expense {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Class Expense"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Class Date"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Class Description"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Class UniqueExpenseList"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Class Remark"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "Class UniqueTagList"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Package Budget {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Interface Budget \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Class UniqueCategoryBudgetList"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Class CategoryBudget"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Class Amount"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Package Tag {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Class Tag"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Package Alias {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Class AliasMap"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBook .up.|\u003e ReadOnlyExpenseBook"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager .up.|\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Model .right.\u003e ObservableList"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ModelManager o--\u003e \"1\" ExpenseBook"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "ModelManager o-right-\u003e \"1\" AliasMap"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "ModelManager o-left-\u003e \"1\" UserPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "UserPrefs .up.|\u003e ReadOnlyUserPrefs"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBook *--\u003e \"1\" UniqueExpenseList"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "UniqueExpenseList o--\u003e \"*\" Expense"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Expense *--\u003e \"1\" Description"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Expense *-right-\u003e \"1\" Amount"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Expense *--\u003e \"1\" Date"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Expense *--\u003e \"1\" Tag"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Expense --\u003e \"0..1\" Remark"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "ExpenseBook *--\u003e \"1\" UniqueCategoryBudgetList"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "UniqueCategoryBudgetList o--\u003e \"*\" CategoryBudget : budgets"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "CategoryBudget *--\u003e Amount"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "CategoryBudget *--\u003e \"1\" Tag"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Budget ^.right. UniqueCategoryBudgetList"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Budget ^.. CategoryBudget"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "ExpenseBook *--\u003e \"1\" AliasMap"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "ExpenseBook *--\u003e \"1\" UniqueTagList"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "UniqueTagList o--\u003e \"*\" Tag"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Class HiddenOutside2 #FFFFFF"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "HiddenOutside2 -[hidden]-\u003e Amount"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Tag -[hidden]left-\u003e HiddenOutside2"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Description -[hidden]right-\u003e Amount"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Amount -[hidden]left-\u003e CategoryBudget"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Amount -[hidden]-\u003e Tag"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Tag -[hidden]right-\u003e Date"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "UniqueExpenseList --\u003e \"1\" Expense : filtered list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "UniqueCategoryBudgetList o-down-\u003e \"1\" CategoryBudget : \"Default\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "UniqueCategoryBudgetList ..\u003e Tag"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "UniqueCategoryBudgetList ..\u003e Amount"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 12,
      "hakiem526": 4,
      "marcus2k": 1,
      "maxxyh": 13,
      "-": 35,
      "lebencwb": 28
    }
  },
  {
    "path": "docs/diagrams/SortSequenceDiagram1.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "participant \":ExpenseBookParser\" as ExpenseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "participant \":SortCommandParser\" as SortCommandParser LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "participant \"cmp:SortKeyComparator\" as SortKeyComparator LOGIC_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "participant \"s:SortCommand\" as SortCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "[-\u003e LogicManager : execute(\"sort -by date\")"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "LogicManager -\u003e ExpenseBookParser : parseCommand(\"sort -by date\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "activate ExpenseBookParser"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "ExpenseBookParser -\u003e SortCommandParser : parse(\" -by date\")"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "activate SortCommandParser"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "create SortKeyComparator"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "SortCommandParser -\u003e SortKeyComparator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "activate SortKeyComparator"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "SortKeyComparator --\u003e SortCommandParser"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "deactivate SortKeyComparator"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "create SortCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "SortCommandParser -\u003e SortCommand"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "SortCommand --\u003e SortCommandParser"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "SortCommandParser --\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "deactivate SortCommandParser"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "ExpenseBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "deactivate ExpenseBookParser"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "LogicManager -\u003e SortCommand : execute()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "activate SortCommand"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "SortCommand -\u003e Model : sortExpenseList(cmp)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Model --\u003e SortCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "SortCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "deactivate SortCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "SortCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "destroy SortCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "destroy SortKeyComparator"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 62
    }
  },
  {
    "path": "docs/diagrams/SortSequenceDiagram2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "participant \":ExpenseBook\" as ExpenseBook MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "participant \":UniqueExpenseList\" as UniqueExpenseList MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "end box"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "[-\u003e Model : sortExpenseList(cmp)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Model -\u003e ExpenseBook : sortExpenses(cmp)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "activate ExpenseBook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "ExpenseBook -\u003e UniqueExpenseList : sortExpenses(cmp)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "activate UniqueExpenseList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "UniqueExpenseList --\u003e ExpenseBook"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "deactivate UniqueExpenseList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "ExpenseBook --\u003e Model"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "deactivate ExpenseBook"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "[\u003c-- Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 29
    }
  },
  {
    "path": "docs/diagrams/StorageClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor STORAGE_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor STORAGE_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Storage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface UserPrefsStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Interface ExpenseBookStorage \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class StorageManager"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class JsonUserPrefsStorage"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Class JsonExpenseBookStorage"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager .left.|\u003e Storage"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "StorageManager o-right-\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "StorageManager o--\u003e ExpenseBookStorage"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "JsonUserPrefsStorage .left.|\u003e UserPrefsStorage"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "JsonExpenseBookStorage .left.|\u003e ExpenseBookStorage"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "JsonExpenseBookStorage .down.\u003e JsonSerializableExpenseBook"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "JsonSerializableExpenseBook -right-\u003e JsonSerializableExpense"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "JsonSerializableExpenseBook -down-\u003e \"*\" JsonAdaptedTag"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "JsonSerializableExpense -right-\u003e \"1\" JsonAdaptedTag"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "JsonSerializableExpenseBook -down-\u003e JsonAdaptedBudgetList"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "JsonAdaptedBudgetList -right-\u003e \"1\" JsonAdaptedBudget"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "JsonAdaptedBudgetList -down-\u003e \"*\" JsonAdaptedBudget"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "JsonAdaptedBudget -right-\u003e \"1\" JsonAdaptedTag"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 4,
      "-": 17,
      "lebencwb": 8
    }
  },
  {
    "path": "docs/diagrams/SwitchSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "box Logic LOGIC_COLOR_T1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "participant \":LogicManager\" as LogicManager LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "participant \":ExpenseBookParser\" as ExpenseBookParser LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "participant \"s:SwitchCommand\" as SwitchCommand LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "[-\u003e LogicManager : execute(switch)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate LogicManager"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "LogicManager -\u003e ExpenseBookParser : parseCommand(switch)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate ExpenseBookParser"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "create SwitchCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBookParser -\u003e SwitchCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate SwitchCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "SwitchCommand --\u003e ExpenseBookParser"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate SwitchCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBookParser --\u003e LogicManager : s"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate ExpenseBookParser"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "LogicManager -\u003e SwitchCommand : execute()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate SwitchCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "SwitchCommand -\u003e Model : hasCategory(category)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ref over Model : hasCategory"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Model -\u003e SwitchCommand : hasCategory"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "SwitchCommand -\u003e Model : switchCategory(category)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Model -\u003e Model : updateExpenseBookCategory(category)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ref over Model : update lists"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Model -\u003e Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Model --\u003e SwitchCommand"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "SwitchCommand --\u003e LogicManager : result"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate SwitchCommand"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "SwitchCommand -[hidden]-\u003e LogicManager : result"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "destroy SwitchCommand"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "[\u003c--LogicManager"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate LogicManager"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 61
    }
  },
  {
    "path": "docs/diagrams/SwitchSequenceDiagram2.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "mainframe sd hasCategory"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "participant \":ExpenseBook\" as ExpenseBook MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "participant \":UniqueTagList\" as UniqueTagList MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "[-\u003e Model : hasCategory(category)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Model -\u003e ExpenseBook: containsCategory(toCheck)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate ExpenseBook"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBook -\u003e UniqueTagList:contains(toCheck)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate UniqueTagList"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "UniqueTagList -\u003e ExpenseBook : contains result"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate UniqueTagList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBook -\u003e Model : containsCategory result"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate ExpenseBook"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "[\u003c--Model : hasCategory result"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 28
    }
  },
  {
    "path": "docs/diagrams/SwitchSequenceDiagram3.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "mainframe sd update lists"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "box Model MODEL_COLOR_T1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "participant \":Model\" as Model MODEL_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "participant \":ExpenseBook\" as ExpenseBook MODEL_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "participant \":UniqueCategoryBudgetList\" as UniqueCategoryBudgetList MODEL_COLOR"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "participant \":UniqueExpenseList\" as UniqueExpenseList MODEL_COLOR"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "end box"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "[-\u003e Model : updateExpenseBookCategory(category)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Model -\u003e Model : updateFilteredBudgetList(predicate)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Model -\u003e ExpenseBook : updateFilteredBudgets(predicate)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate ExpenseBook"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBook -\u003e UniqueCategoryBudgetList : filterCategoryBudget(predicate)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate UniqueCategoryBudgetList"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "UniqueCategoryBudgetList -\u003e ExpenseBook"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate UniqueCategoryBudgetList"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBook -\u003e Model"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate ExpenseBook"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Model -\u003e Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Model -\u003e Model : updateFilteredExpenseList(predicate)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate Model"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Model -\u003e ExpenseBook : updateFilteredExpenses(predicate)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate ExpenseBook"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBook -\u003e UniqueExpenseList : filterExpenses(predicate)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "activate UniqueExpenseList"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "UniqueExpenseList -\u003e ExpenseBook"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate UniqueExpenseList"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseBook -\u003e Model"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate ExpenseBook"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "[\u003c--Model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "deactivate Model"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 49
    }
  },
  {
    "path": "docs/diagrams/UiClassDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowThickness 1.1"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam arrowColor UI_COLOR_T4"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "skinparam classBackgroundColor UI_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "package UI \u003c\u003cRectangle\u003e\u003e{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "Interface Ui \u003c\u003cInterface\u003e\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "Class \"{abstract}\\nUiPart\" as UiPart"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Class UiManager"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "Class MainWindow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "Class HelpWindow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "Class ResultDisplay"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Class BudgetDisplay"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Class ExpenseListPanel"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Class ExpenseCard"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "Class StatusBarFooter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Class CommandBox"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "package Model \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenModel #FFFFFF"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "package Logic \u003c\u003cRectangle\u003e\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenLogic #FFFFFF"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "Class HiddenOutside #FFFFFF"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "HiddenOutside ..\u003e Ui"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager .left.|\u003e Ui"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -down-\u003e MainWindow"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow --\u003e HelpWindow"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e CommandBox"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e ResultDisplay"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "MainWindow *-down-\u003e BudgetDisplay"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "MainWindow *-down-\u003e ExpenseListPanel"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow *-down-\u003e StatusBarFooter"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseListPanel -down-\u003e ExpenseCard"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-|\u003e UiPart"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "BudgetDisplay --|\u003e UiPart"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox --|\u003e UiPart"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseListPanel --|\u003e UiPart"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseCard --|\u003e UiPart"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "StatusBarFooter --|\u003e UiPart"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -down-|\u003e UiPart"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseCard ..\u003e Model"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "BudgetDisplay ..\u003e Model"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "UiManager -right-\u003e Logic"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -left-\u003e Logic"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ExpenseListPanel -[hidden]left- HelpWindow"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "HelpWindow -[hidden]left- CommandBox"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "CommandBox -[hidden]left- ResultDisplay"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "ResultDisplay -[hidden]left- StatusBarFooter"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "MainWindow -[hidden]-|\u003e UiPart"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 8,
      "-": 52,
      "lebencwb": 4
    }
  },
  {
    "path": "docs/diagrams/tracing/LogicSequenceDiagram.puml",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "@startuml"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "!include ../style.puml"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":LogicManager\" as logic LOGIC_COLOR"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Participant \":ExpenseBookParser\" as abp LOGIC_COLOR"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \":EditCommandParser\" as ecp LOGIC_COLOR"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "Participant \"command:EditCommand\" as ec LOGIC_COLOR"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "[-\u003e logic : execute"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "activate logic"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "logic -\u003e abp ++: parseCommand(commandText)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "create ecp"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "abp -\u003e ecp ++: parse(arguments)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "create ec"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "ecp -\u003e ec ++: index, editExpenseDescriptor"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "ec --\u003e ecp --"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "ecp --\u003e abp --: command"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "abp --\u003e logic --: command"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "@enduml"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "-": 19
    }
  },
  {
    "path": "docs/index.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "title: Bamboo"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "[![CI Status](https://github.com/AY2021S1-CS2103-W14-3/tp/workflows/Java%20CI/badge.svg)](https://github.com/AY2021S1-CS2103-W14-3/tp/actions)"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "[![codecov](https://codecov.io/gh/AY2021S1-CS2103-W14-3/tp/branch/master/graph/badge.svg)](https://codecov.io/gh/AY2021S1-CS2103-W14-3/tp)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "![Ui](images/Ui.png)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "**Bamboo is a desktop application for managing your contact details.** While it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* If you are interested in using Bamboo, head over to the [_Quick Start_ section of the **User Guide**](UserGuide.html#quick-start)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* If you are interested about developing Bamboo, the [**Developer Guide**](DeveloperGuide.html) is a good place to start."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "**Acknowledgements**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: [JavaFX](https://openjfx.io/), [Jackson](https://github.com/FasterXML/jackson), [JUnit5](https://github.com/junit-team/junit5)"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 6,
      "-": 13
    }
  },
  {
    "path": "docs/team/hakiem526.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "title: Hakiem Rasid\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "## Project: Bamboo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "Bamboo (v1.4) is a **simple desktop app for managing personal finance, optimized for use via a Command Line Interface (CLI),** and targeted at college students. If you can type fast, Bamboo v1.4 can get your financial management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* **New Feature**: Added the ability to view a graph representing categorical expenses."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * What it does: Allows the user to view a pie chart which represents the expenses divided into respective tags/categories."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * Justification: This feature allows the user to get a visual representation of the expenses by categories."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * Highlights: This enhancement requires an association class to get the necessary data from the expensebook and initialise a chart for the UI. This feature also requires some fxml and CSS for styling."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * Credits: *[Referenced code](https://docs.oracle.com/javafx/2/charts/pie-chart.htm)*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dhakiem526\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026until\u003d2020-11-09\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * Assisted in assigning PRs to corresponding issues and milestones"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * Updated the GUI from AB3 to suit basic Bamboo functionality for v1.2 (Pull request [\\#40](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/40))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * Added GUI for budget display in the form of a progress bar in the main window (Pull request [\\#50](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/50))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * Fixed parsing of single word commands (Pull request [\\#177](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/177))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  * Updated the GUI for the budget bar to enable more accurate labelling depending on user commands (Pull request [\\#169](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/169))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    * Added documentation for the feature `graph` [\\#167](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/167)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    * Added example screenshot for feature \u0027graph\u0027 "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    * Added implementation details of the `graph` feature and the respective UML diagrams. [\\#68](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/68)"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 17,
      "-": 17
    }
  },
  {
    "path": "docs/team/jaylenlee.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "title: Lee Jian Hui\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "## Project: Bamboo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "Bamboo (v1.4) is a **simple desktop app for managing personal finance, optimized for use via a Command Line Interface (CLI),** and targeted at college students. If you can type fast, Bamboo v1.4 can get your financial management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* **New Feature**: Added the ability to switch category in the expense book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * What it does: allows the user to switch into another category with the given category input. Once switched, the list displayed will only show the expenses with the corresponding category and uses the specified budget assigned to this category."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can focus on the individual categories of expenses to look into and manage instead of having to do their own separate calculation manually to see where they overspent."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands and some architecture designs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Credits: N.A"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* **New Feature**: Added a delete category command that allows the user to remove unwanted category."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * What it does: allows the user to delete a specified category from the expense book. Once deleted, the budget assigned to that category will be removed amd expenses associated with that category will automatically be reset to Default category."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Justification: This feature improves the product significantly because a user can recover from adding the wrong category into the expense book and better manage their expenses if there is a certain category that they are no longer interested in or have no more need for."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The designing process too was challenging as there are many variables to be concerned with as budget and expense are both intricately linked with category."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Credits: N.A"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* **New Component**: Added a class containing a list of unique tag."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * What it does: contains a list of unique tags and allows tag list specified function."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Justification: This component improves the execution significantly because categories can now be parsed and loaded to be used by the expensebook."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Credits: N.A"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003djaylenlee\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dfalse)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Assisted in assigning PRs to corresponding issues and milestones"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Reviewed and merged PRs"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Refactoring of names of existing classes to more suitable names (Pull requests [\\#37](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/37), [\\#47](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/47))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Modifying classes to encourage more abstraction barriers (Pull request [\\#77](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/77))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Fixing of bugs that causes unideal results (Pull request [\\#155](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/155), [\\#156](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/156))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Setting character limits to textfield input to prevent excessive amount of input to lag the application (Pull request [\\#158](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/158))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    * Added initial documentation for basic features. [\\#11](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/11)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    * Updated documentation to v1.2 [\\#48](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/48)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    * Added documentation for the features `help`, `deleteCat` and `switch` [\\#91](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/91)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    * Added example screenshots to features in Usage"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    * Added implementation details of the `switch` feature. [\\#66](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/66)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    * Updated `switch` feature, user stories, spacing and use case 13 [\\#159](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/159)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): [\\#9](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/9), [\\#150](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/150), [\\#151](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/151)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  * Posted in forum discussions (examples: [\\#77](https://github.com/nus-cs2103-AY2021S1/forum/issues/77))"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 36,
      "-": 20
    }
  },
  {
    "path": "docs/team/lebencwb.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "title: Leben Chew\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "## Project: Bamboo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "Bamboo (v1.3) is a **simple desktop app for managing personal finance, optimized for use via a Command Line Interface (CLI),** and targeted at college students. If you can type fast, Bamboo v1.2 can get your financial management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "* **New Feature**: Added the ability to add categories of expenditure to the expense book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  * What it does: Allows the user to customize the categories and manage their finances according to the categories they have defined."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  * Justification: This feature improves the product significantly because a user may need to manage their finances with more granular precision and set more concrete goals that they can better keep track of when their expenditure is categorized."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  * Highlights: This feature is an optional extension, such that even first-time users can immediately start using the basic features of the application without having to create expenditure categories, with the implementation of a \u0027Default\u0027 category."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "* **New Feature**: Added a default category containing a default budget that can be topped-up (or reduced) and which expenses can be tagged to and deducted from. Also added the ability for the user specify the category-budget that they want to top up, as well as reduce the budget when necessary."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dlebencwb)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  * Created milestones and issues, set deadlines and assign labels and developers: [Issues link](https://github.com/AY2021S1-CS2103-W14-3/tp/issues?q\u003dauthor%3Alebencwb+)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    * Added documentation for the features `add category`, `top-up category-budget`, `reduce category-budget` [\\#90](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/90), [\\#175](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/175)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    * Added implementation details of the `default category` and `category-budget adding, topping-up and reducing` features. [\\#70](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/70), [\\#175](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/175)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "* **Review contributions**: [PRs reviewed](https://github.com/AY2021S1-CS2103-W14-3/tp/issues?q\u003dreviewed-by%3Alebencwb)"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 1,
      "-": 17,
      "lebencwb": 12
    }
  },
  {
    "path": "docs/team/marcus2k.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "title: Marcus\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "## Project: AddressBook Level 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "Bamboo (v1.4) is a **simple desktop app for managing personal finance, optimized for use via a Command Line Interface (CLI),** and targeted at college students. If you can type fast, Bamboo v1.4 can get your financial management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* **New Feature**: Added the ability to add shortcuts (aliases) to each command."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * What it does: allows users to add up to ONE customised command word for all commands except alias and resetAlias. Restrictions on user input and more specific usage details can be found in the User Guide."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Justification: As an experienced user, the user should be able to customise the command word using alias shortcuts for faster workflow. Being experienced also likely means that he is either a long-time user or a frequent user. The alias and resetAlias commands cannot have aliases as a neat fail-safe."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Highlights: `find [oldAlias] [newAlias]` will override the old alias with the new alias. If there are no aliases currently for a command, then simply use `find [defaultCommandWord] [newAlias]`."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Additional model classes implemented for this feature: `AliasMap`, `AliasEntry`, and their JSON Storage Formatting Classes"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Credits: *{AliasMap class design inspired by AddressBook3\u0027s AddressBook class}*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* **New Feature**: Added the ability to remove shortcuts (aliases) for commands all at once."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * What it does: allows users to add up to ONE customised command word for all commands except alias and resetAlias. Restrictions on user input and more specific usage details can be found in the User Guide."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Justification: A user may have not used the app for quite some time, and forgot all the aliases he/she have customised. Since aliases will not be visible in user guide, he/she can simply run `resetAlias` and can resume using the app with the command words as shown in the user guide."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* **Updated Feature**: Altered find command to perform partial description keyword or date matching or both."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * What it does: filters expenses list to only show expenses with description that partially contains one of the keywords (e.g. `find -d pasta` will include in its output an expense with a description containing the word `pastafarian`) and contains one of the dates."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Justification: This feature allows users to filter out expenses for a particular day or expenses whose description contains a particular keyword. These features are important for users to be able to reflect on his total spending on a particular day or on a particular item, and learn from any spending mistakes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Credits: The current find feature implementation was enhanced from AddressBook3’s find feature which allowed us to do description matching, from which date matching was then extended."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Other: Previously implemented and subsequently removed tag matching support due to the introduction of expense book categories in the Bamboo project."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dmarcus2k\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dfalse)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Opened and resolved issues"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Reviewed and merged PRs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Updated the find command (Pull requests [\\#42](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/42))"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Wrote additional tests for `alias` and `resetAlias` feature to increase coverage from 62.84% to 65.05% (Pull requests [\\#154](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/154))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Add feature restrictions or update behaviours with justifications (Pull requests [\\#84](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/84))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * Updated documentation for the features `find` and `alias` (Pull requests [\\#88](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/88), [\\#165](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/165))"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * Added documentation for the features `resetAlias` [\\#165](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/165)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * Added implementation details of the `alias` feature. [\\#165](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/165)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Reported bugs: [\\#163](https://github.com/AY2021S1-CS2103-W14-3/tp/issues/163), [\\#153](https://github.com/AY2021S1-CS2103-W14-3/tp/issues/153)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * PRs reviewed and merged: [\\#37](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/37), [\\#14](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/14), [\\#66](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/66), [\\#89](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/89), [\\#95](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/95)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Asked question in forum [1](https://github.com/nus-cs2103-AY2021S1/forum/issues/130)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "  * Reported bugs and suggestions for other teams in the class (examples: [1](https://github.com/AY2021S1-CS2103-F09-3/tp/issues/176), [2](https://github.com/AY2021S1-CS2103-F09-3/tp/issues/175), [3](https://github.com/AY2021S1-CS2103-F09-3/tp/issues/174), [4](https://github.com/AY2021S1-CS2103-F09-3/tp/issues/172))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* _{you can add/remove categories in the list above}_"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 22,
      "maxxyh": 8,
      "-": 23
    }
  },
  {
    "path": "docs/team/maxxyh.md",
    "fileType": "docs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "layout: page"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "title: Maxx Chan\u0027s Project Portfolio Page"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "## Project: Bamboo"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "Bamboo (v1.4) is a **simple desktop app for managing personal finance, optimized for use via a Command Line Interface (CLI),** and targeted at college students. If you can type fast, Bamboo v1.4 can get your financial management tasks done faster than traditional GUI apps."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are my contributions to the project."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* **New Feature**: Added the ability to sort expenses. (Pull Request [\\#86](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/86))"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  - What it does: allows the user to sort expenses currently displayed on the application based on Amount, Description (alphabetical), and Date of Expense. Users can use at least, and up to 3 of the sorting criterion - they will be applied with priority in order of appearance. Users also have the option to do a reverse sort for criterion."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  - Justification: This feature improves the product significantly because a user can better organise how expenses are displayed on the application. Specifically:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Amount sort allows the user to find out which expenses contribute the most/least to his spending."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Description sort allows the user to organise expenses with similar descriptions together."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    - Date sort allows the user to have a chronological overview of his spending."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  - Highlights: Priority sort for multiple keywords was an intentional design choice which added additional layers of complexity. Sorting also works together with filtering. While sorting itself is not complicated, this feature was challenging as JavaFX does not support both sorting and filtering at the same time natively. Workarounds had to be used."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* **Code contributed**: [RepoSense link](https://nus-cs2103-ay2021s1.github.io/tp-dashboard/#breakdown\u003dtrue\u0026search\u003dmaxxyh\u0026sort\u003dgroupTitle\u0026sortWithin\u003dtitle\u0026since\u003d2020-08-14\u0026timeframe\u003dcommit\u0026mergegroup\u003d\u0026groupSelect\u003dgroupByRepos\u0026checkedFileTypes\u003ddocs~functional-code~test-code~other\u0026tabOpen\u003dfalse\u0026until\u003d2020-11-09)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* **Project management**:"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Team leader - delegation of work to members."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Managed all releases `v1.2` - `v1.4` (4 releases) on GitHub."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Opened, tagged and resolved Issues according to priority, category and person-in-charge."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Managed closing of milestones and shifting unfinished tasks to later milestones."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Reviewed and merged PRs."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Created v1.2, v1.3, v1.4 demos."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Bug reporting (Issues [\\#94](https://github.com/AY2021S1-CS2103-W14-3/tp/issues/94), [\\#98](https://github.com/AY2021S1-CS2103-W14-3/tp/issues/98), [\\#99](https://github.com/AY2021S1-CS2103-W14-3/tp/issues/99), [\\#171](https://github.com/AY2021S1-CS2103-W14-3/tp/issues/171))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "\u003cdiv style\u003d\"page-break-after: always;\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "* **Refactoring**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Refactored sample data and test classes from AB3 to fit Bamboo\u0027s purposes (Pull requests [\\#44](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/44))"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Refactored classes from AB3 to fit Bamboo\u0027s needs (Pull requests [\\#30](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/30), [\\#32](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/32))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* **Enhancements to existing features**:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Changed the datatype used in Amount class so that it would not overflow and was more suitable for storing money. (Pull requests [\\#150](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/150), [\\#157](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/157), [\\#171](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/171))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Wrote additional tests for `sort` feature (Pull request [\\#86](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/86))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* **Documentation**:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  * User Guide:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * Did overall formatting and proofreading of user guide. (Pull requests [\\#100](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/100), [#152](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/152))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * Updated Command Format Guide, Quick Start, Features section. (Pull requests [\\#152](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/152))"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * Updated Glossary section with input restrictions. (Pull request [\\#152](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/152))"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * Added documentation for the features `sort`, `clear` and `exit`. (Pull requests [\\#89](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/89))"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * Touch up existing documentation for `alias`,  `switch`, `addCat`, `deleteCat`, `find`. (Pull requests [\\#100](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/100))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * Add app screenshots for all commands."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "  * Developer Guide:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * Added implementation details of the `sort` feature. (Pull requests [\\#72](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/72))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * Updated use cases U7-U12, user stories. (Pull requests [\\#97](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/97))"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    * Updated diagrams to reflect latest architecture. (Pull requests [\\#97](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/97))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* **Community**:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * PRs reviewed (with non-trivial review comments): (Pull requests [\\#140](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/140), [\\#156](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/156), [\\#155](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/155), [\\#162](https://github.com/AY2021S1-CS2103-W14-3/tp/pull/162))"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Reported bugs and suggestions for other teams (examples: [1](https://github.com/AY2021S1-CS2103-T16-3/tp/issues/155), [2](https://github.com/AY2021S1-CS2103-T16-3/tp/issues/156), [3](https://github.com/AY2021S1-CS2103-T16-3/tp/issues/157), [4](https://github.com/AY2021S1-CS2103-T16-3/tp/issues/158), [5](https://github.com/AY2021S1-CS2103-T16-3/tp/issues/159))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* **Tools**:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "  * Introduced the team to Notion to store notes and tasks from our team meetings."
      }
    ],
    "authorContributionMap": {
      "hakiem526": 1,
      "maxxyh": 37,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/expense/AppParameters.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the parsed command-line parameters given to the application."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParameters {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(AppParameters.class);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path configPath;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getConfigPath() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setConfigPath(Path configPath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.configPath \u003d configPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the application command-line parameters."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AppParameters parse(Application.Parameters parameters) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d new AppParameters();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e namedParameters \u003d parameters.getNamed();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String configPathParameter \u003d namedParameters.get(\"config\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configPathParameter !\u003d null \u0026\u0026 !FileUtil.isValidPath(configPathParameter)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Invalid config path \" + configPathParameter + \". Using default config path.\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            configPathParameter \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        appParameters.setConfigPath(configPathParameter !\u003d null ? Paths.get(configPathParameter) : null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return appParameters;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof AppParameters)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters otherAppParameters \u003d (AppParameters) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(getConfigPath(), otherAppParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return configPath.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/expense/Main.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * This is a workaround for the following error when MainApp is made the"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * entry point of the application:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Error: JavaFX runtime components are missing, and are required to run this application"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * The reason is that MainApp extends Application. In that case, the"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * LauncherHelper will check for the javafx.graphics module to be present"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * as a named module. We don\u0027t use JavaFX via the module system so it can\u0027t"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * find the javafx.graphics module, and so the launch is aborted."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * By having a separate main class (Main) that doesn\u0027t extend Application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * to be the entry point of the application, we avoid this issue."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Main {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Application.launch(MainApp.class, args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "maxxyh": 4,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/expense/MainApp.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.Config;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.Version;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.util.StringUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.Logic;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.LogicManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.storage.ExpenseBookStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.storage.JsonAliasMapStorage;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.storage.JsonExpenseBookStorage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.storage.Storage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.storage.StorageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.ui.Ui;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.ui.UiManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Runs the application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 4, 0, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing ExpenseBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBookStorage expenseBookStorage \u003d new JsonExpenseBookStorage(userPrefs.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        JsonAliasMapStorage aliasMapStorage \u003d new JsonAliasMapStorage(userPrefs.getAliasMapFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        storage \u003d new StorageManager(expenseBookStorage, userPrefsStorage, aliasMapStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s expense book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The data from the sample expense book will be used instead if {@code storage}\u0027s expense book is not found,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * or an empty expense book will be used instead if errors occur when reading {@code storage}\u0027s expense book."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Optional\u003cReadOnlyExpenseBook\u003e expenseBookOptional;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Optional\u003cAliasMap\u003e aliasMapOptional;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ReadOnlyExpenseBook initialData;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        AliasMap aliasMap;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            expenseBookOptional \u003d storage.readExpenseBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (!expenseBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample ExpenseBook\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            initialData \u003d expenseBookOptional.orElseGet(SampleDataUtil::getSampleExpenseBook);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty ExpenseBook\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            initialData \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExpenseBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            initialData \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            aliasMapOptional \u003d storage.readAliasMap();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            if (!aliasMapOptional.isPresent()) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                logger.info(\"Alias file not found. Will be starting with default settings\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            aliasMap \u003d aliasMapOptional.orElseGet(SampleDataUtil::getSampleAliasMap);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with default commands\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            aliasMap \u003d new AliasMap();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with default commands\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            aliasMap \u003d new AliasMap();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return new ModelManager(initialData, userPrefs, aliasMap);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty ExpenseBook\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        logger.info(\"Starting ExpenseBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Expense Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(model.getUserPrefs());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 30,
      "marcus2k": 31,
      "maxxyh": 1,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/core/Config.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Current log level : \" + logLevel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/core/GuiSettings.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.Point;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A Serializable class that contains the GUI settings."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiSettings implements Serializable {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final double DEFAULT_WIDTH \u003d 740;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowWidth;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final double windowHeight;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Point windowCoordinates;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the default height, width and position."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        windowWidth \u003d DEFAULT_WIDTH;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        windowHeight \u003d DEFAULT_HEIGHT;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d null; // null represent no coordinates"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code GuiSettings} with the specified height, width and position."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings(double windowWidth, double windowHeight, int xPosition, int yPosition) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowWidth \u003d windowWidth;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.windowHeight \u003d windowHeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        windowCoordinates \u003d new Point(xPosition, yPosition);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowWidth() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public double getWindowHeight() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Point getWindowCoordinates() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowCoordinates !\u003d null ? new Point(windowCoordinates) : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof GuiSettings)) { //this handles null as well."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings o \u003d (GuiSettings) other;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return windowWidth \u003d\u003d o.windowWidth"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 windowHeight \u003d\u003d o.windowHeight"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(windowCoordinates, o.windowCoordinates);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(windowWidth, windowHeight, windowCoordinates);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Width : \" + windowWidth + \"\\n\");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Height : \" + windowHeight + \"\\n\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Position : \" + windowCoordinates);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/core/LogsCenter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.ConsoleHandler;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.FileHandler;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.SimpleFormatter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Configures and manages loggers and handlers, including their logging level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * These loggers have been configured to output messages to the console and a {@code .log} file by default,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogsCenter {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_COUNT \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String LOG_FILE \u003d \"expensebook.log\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Level currentLogLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler fileHandler;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler consoleHandler;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes with a custom log level (specified in the {@code config} object)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Logging levels for existing loggers will only be updated if the logger with the same name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * is requested again from the LogsCenter."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void init(Config config) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        currentLogLevel \u003d config.getLogLevel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"currentLogLevel: \" + currentLogLevel);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a logger with the given name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Logger getLogger(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Logger logger \u003d Logger.getLogger(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.setUseParentHandlers(false);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        removeHandlers(logger);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addConsoleHandler(logger);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        addFileHandler(logger);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return Logger.getLogger(name);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a Logger for the given class name."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (clazz \u003d\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return Logger.getLogger(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return getLogger(clazz.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the {@code consoleHandler} if it is null."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addConsoleHandler(Logger logger) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (consoleHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            consoleHandler \u003d createConsoleHandler();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.addHandler(consoleHandler);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remove all the handlers from {@code logger}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void removeHandlers(Logger logger) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Arrays.stream(logger.getHandlers())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(logger::removeHandler);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates {@code fileHandler} if it is null."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void addFileHandler(Logger logger) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileHandler \u003d\u003d null) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                fileHandler \u003d createFileHandler();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.addHandler(fileHandler);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error adding file handler for logger.\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code FileHandler} for the log file."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there are problems opening the file."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private static FileHandler createFileHandler() throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setFormatter(new SimpleFormatter());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        fileHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return fileHandler;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ConsoleHandler createConsoleHandler() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        consoleHandler.setLevel(currentLogLevel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return consoleHandler;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "maxxyh": 1,
      "-": 110
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/core/Messages.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.logic.commands.AddCategoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d \"The expense index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_EXPENSES_LISTED_OVERVIEW \u003d \"%1$d expenses listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_INVALID_CATEGORY \u003d \"The \\\"%s\\\" category does not exist in the expense book. \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"If you need to, please add it using the \\\"\" + AddCategoryCommand.COMMAND_WORD + \"\\\" command first.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_INPUT_OVERLIMIT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        \"Input is too long! Maximum characters for %1$s: %2$d\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 5,
      "maxxyh": 4,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/core/Version.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a version with major, minor and patch number"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class Version implements Comparable\u003cVersion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VERSION_REGEX \u003d \"V(\\\\d+)\\\\.(\\\\d+)\\\\.(\\\\d+)(ea)?\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EXCEPTION_STRING_NOT_VERSION \u003d \"String is not a valid Version. %s\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern VERSION_PATTERN \u003d Pattern.compile(VERSION_REGEX);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int major;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int minor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int patch;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isEarlyAccess;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Version} with the given version details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Version(int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.major \u003d major;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minor \u003d minor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.patch \u003d patch;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.isEarlyAccess \u003d isEarlyAccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMajor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return major;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getMinor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return minor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getPatch() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return patch;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isEarlyAccess() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isEarlyAccess;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a version number string in the format V1.2.3."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param versionString version number string"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return a Version object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Version fromString(String versionString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Matcher versionMatcher \u003d VERSION_PATTERN.matcher(versionString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!versionMatcher.find()) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(String.format(EXCEPTION_STRING_NOT_VERSION, versionString));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Version(Integer.parseInt(versionMatcher.group(1)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(2)),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                Integer.parseInt(versionMatcher.group(3)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                versionMatcher.group(4) \u003d\u003d null ? false : true);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return String.format(\"V%d.%d.%d%s\", major, minor, patch, isEarlyAccess ? \"ea\" : \"\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public int compareTo(Version other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        if (major !\u003d other.major) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return major - other.major;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (minor !\u003d other.minor) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return minor - other.minor;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (patch !\u003d other.patch) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return patch - other.patch;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess \u003d\u003d other.isEarlyAccess()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isEarlyAccess) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Version)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        final Version other \u003d (Version) obj;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return compareTo(other) \u003d\u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String hash \u003d String.format(\"%03d%03d%03d\", major, minor, patch);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isEarlyAccess) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            hash \u003d \"1\" + hash;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return Integer.parseInt(hash);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "maxxyh": 1,
      "-": 115
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/core/index/Index.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "maxxyh": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/exceptions/DataConversionException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error during conversion of data from one format to another"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class DataConversionException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public DataConversionException(Exception cause) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cause);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/exceptions/IllegalValueException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that some given data does not fulfill some constraints."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class IllegalValueException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param message should contain relevant information on the failed constraint(s)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param cause   of the main exception"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public IllegalValueException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/util/AppUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.MainApp;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A container for App specific utility functions"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets an {@code Image} from the specified path."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(imagePath);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException if {@code condition} is false."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that {@code condition} is true. Used for validating arguments to methods."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalArgumentException with {@code errorMessage} if {@code condition} is false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void checkArgument(Boolean condition, String errorMessage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!condition) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(errorMessage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/util/CollectionUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Utility methods related to Collections"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @see #requireAllNonNull(Collection)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Object... items) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Stream.of(items).forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Throws NullPointerException if {@code items} or any element of {@code items} is null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void requireAllNonNull(Collection\u003c?\u003e items) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(items);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        items.forEach(Objects::requireNonNull);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code items} contain any elements that are non-null."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isAnyNonNull(Object... items) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return items !\u003d null \u0026\u0026 Arrays.stream(items).anyMatch(Objects::nonNull);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "maxxyh": 3,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/util/ConfigUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.Config;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A class for accessing the Config File."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cConfig\u003e readConfig(Path configFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(configFilePath, Config.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveConfig(Config config, Path configFilePath) throws IOException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(config, configFilePath);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/util/FileUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.InvalidPathException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(Path file) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return Files.exists(file) \u0026\u0026 Files.isRegularFile(file);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code path} can be converted into a {@code Path} via {@link Paths#get(String)},"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise returns false."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param path A string representing the file path. Cannot be null."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPath(String path) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Paths.get(path);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (InvalidPathException ipe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(Path file) throws IOException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (Files.exists(file)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.createFile(file);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Path parentDir \u003d file.getParent();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(parentDir);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(Path file) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file), CHARSET);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(Path file, String content) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file, content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "maxxyh": 2,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/util/JsonUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonAutoDetect;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.PropertyAccessor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.core.JsonProcessingException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationContext;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.DeserializationFeature;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.SerializationFeature;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.deser.std.FromStringDeserializer;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.module.SimpleModule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.databind.ser.std.ToStringSerializer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Converts a Java object instance to JSON and vice versa"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonUtil.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ObjectMapper objectMapper \u003d new ObjectMapper().findAndRegisterModules()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, false)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.NONE)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .setVisibility(PropertyAccessor.FIELD, JsonAutoDetect.Visibility.ANY)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .registerModule(new SimpleModule(\"SimpleModule\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addSerializer(Level.class, new ToStringSerializer())"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    .addDeserializer(Level.class, new LevelDeserializer(Level.class)));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e void serializeObjectToJsonFile(Path jsonFile, T objectToSerialize) throws IOException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(jsonFile, toJsonString(objectToSerialize));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    static \u003cT\u003e T deserializeObjectFromJsonFile(Path jsonFile, Class\u003cT\u003e classOfObjectToDeserialize)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throws IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return fromJsonString(FileUtil.readFromFile(jsonFile), classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the Json object from the given file or {@code Optional.empty()} object if the file is not found."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * If any values are missing from the file, default values will be used, as long as the file is a valid json file."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath                   cannot be null."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param classOfObjectToDeserialize Json file has to correspond to the structure in the class given here."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e Optional\u003cT\u003e readJsonFile("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            Path filePath, Class\u003cT\u003e classOfObjectToDeserialize) throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Json file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        T jsonFile;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            jsonFile \u003d deserializeObjectFromJsonFile(filePath, classOfObjectToDeserialize);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Error reading from jsonFile file \" + filePath + \": \" + e);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(jsonFile);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the Json object to the specified file."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overwrites existing file if it exists, creates a new file if it doesn\u0027t."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param jsonFile cannot be null"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath cannot be null"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was an error during writing to the file"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e void saveJsonFile(T jsonFile, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(jsonFile);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        serializeObjectToJsonFile(filePath, jsonFile);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given string representation of a JSON data to instance of a class"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e The generic type to create an instance of"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return The instance of T with the specified values in the JSON string"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e T fromJsonString(String json, Class\u003cT\u003e instanceClass) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.readValue(json, instanceClass);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given instance of a class into its JSON data string representation"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param instance The T object to be converted into the JSON string"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param \u003cT\u003e      The generic type to create an instance of"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return JSON data representation of the given class instance, in string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static \u003cT\u003e String toJsonString(T instance) throws JsonProcessingException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(instance);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Contains methods that retrieve logging level from serialized string."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class LevelDeserializer extends FromStringDeserializer\u003cLevel\u003e {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        protected LevelDeserializer(Class\u003c?\u003e vc) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            super(vc);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        protected Level _deserialize(String value, DeserializationContext ctxt) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return getLoggingLevel(value);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         * Gets the logging level that matches loggingLevelString"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * \u003cp\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns null if there are no matches"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Level getLoggingLevel(String loggingLevelString) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.parse(loggingLevelString);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public Class\u003cLevel\u003e handledType() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return Level.class;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "maxxyh": 4,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/expense/commons/util/StringUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word     cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        String preppedWord \u003d word.trim().toLowerCase();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        String preppedSentence \u003d sentence.toLowerCase();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                .anyMatch(x -\u003e x.contains(preppedWord));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "marcus2k": 3,
      "maxxyh": 2,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/Logic.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Statistics;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException   If an error occurs during parsing."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the ExpenseBook."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @see seedu.expense.model.Model#getExpenseBook()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    ReadOnlyExpenseBook getExpenseBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the Statistics."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @see seedu.expense.model.Model#getStatistics()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns an unmodifiable view of the filtered list of expenses"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the user prefs\u0027 expense book file path."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Path getExpenseBookFilePath();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Set the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 22,
      "maxxyh": 3,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/LogicManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.ExpenseBookParser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Statistics;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.storage.Storage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager implements Logic {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_MESSAGE \u003d \"Could not save data to file: \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Storage storage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final ExpenseBookParser expenseBookParser;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code LogicManager} with the given {@code Model} and {@code Storage}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model, Storage storage) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.storage \u003d storage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBookParser \u003d new ExpenseBookParser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Command command \u003d expenseBookParser.parseCommand(commandText, model.getAliasMap());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        commandResult \u003d command.execute(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            storage.saveExpenseBook(model.getExpenseBook());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            storage.saveAliasMap(model.getAliasMap());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(FILE_OPS_ERROR_MESSAGE + ioe, ioe);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandResult;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return model.getExpenseBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return model.getStatistics();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return model.getExpenseBookFilePath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getGuiSettings();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        model.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 24,
      "marcus2k": 2,
      "-": 62
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/AddCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Adds a new category tag into the tag list if the given argument is valid."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Duplicate category tag is not allowed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class AddCategoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addCat\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a category to the expense book. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + PREFIX_TAG + \"CATEGORY\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + PREFIX_TAG + \"Food\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New category added: %s \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY \u003d \"This category already exists in the expense book.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final Tag toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Creates an AddCategoryCommand to add the specified {@code categoryBudget}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public AddCategoryCommand(Tag tag) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        toAdd \u003d tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (model.hasCategory(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CATEGORY);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        model.addCategory(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd.toString()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                || other instanceof AddCategoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCategoryCommand) other).toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 4,
      "maxxyh": 1,
      "lebencwb": 50
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/AddCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Adds an expense to the expense book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the expense book. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + PREFIX_DESCRIPTION + \" DESCRIPTION \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + PREFIX_AMOUNT + \"AMOUNT \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Uniqlo Jacket \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + PREFIX_AMOUNT + \"59.90 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + PREFIX_DATE + \"04-10-2020 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + PREFIX_TAG + \"friends \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the expense book. \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"Expense should be updated \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_DEFAULT \u003d \"The category \u0027%s\u0027 does not exist yet\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \" -- tagging as \u0027Default\u0027 instead. \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_INVALID_AMOUNT \u003d \"Amount of the expense cannot be negative. Please \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"specify a non-negative amount of the expense.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_SUM_OVER_LIMIT \u003d \"Total sum of expenses cannot exceed 10e9.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public AddCommand(Expense expense) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (model.hasExpense(toAdd)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (toAdd.getAmount().smallerThan(Amount.zeroAmount())) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_AMOUNT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            model.tallyExpenses().add(toAdd.getAmount());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new CommandException(MESSAGE_SUM_OVER_LIMIT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (!model.hasCategory(toAdd.getTag())) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Expense expense \u003d toAdd.resetTag();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            model.addExpense(expense);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DEFAULT, toAdd.getTag().tagName));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 19,
      "maxxyh": 17,
      "-": 35,
      "lebencwb": 15
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/AliasCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " * Edits the alias of an existing commands in the alias map."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class AliasCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"alias\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Gives a customised alias to a command.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"Alias must not be the same as the default command words and the \u0027alias\u0027 nor \u0027clear alias\u0027 \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"command cannot have an alias.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"[desired_alias] \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"[current_alias/if none, default_command]\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" find \" + \"get \\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"To remove customised alias for a command, simply enter: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + COMMAND_WORD + \" [default_command] [current_alias]\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MESSAGE_EDIT_ALIAS_SUCCESS \u003d \"Edited alias: [%s] becomes [%s] \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MESSAGE_REMOVED_ALIAS_SUCCESS \u003d \"Removed alias. [%s] is no longer alias for [%s]. \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final String previousAlias;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final String newAlias;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @param previousAlias   of a command, or default keyword"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @param newAlias      to set to a command"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public AliasCommand(String previousAlias, String newAlias) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(previousAlias);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(newAlias);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.previousAlias \u003d previousAlias;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.newAlias \u003d newAlias;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            String actualCommand \u003d model.getAliasMap().getValue(previousAlias);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            model.setAlias(new AliasEntry(previousAlias, actualCommand),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                    new AliasEntry(newAlias, actualCommand));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new CommandException(e.getMessage());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (AliasMap.RESERVED_KEYWORDS.contains(newAlias)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_REMOVED_ALIAS_SUCCESS, previousAlias, newAlias));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_ALIAS_SUCCESS, previousAlias, newAlias));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (!(other instanceof AliasCommand)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        AliasCommand e \u003d (AliasCommand) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return previousAlias.equals(e.previousAlias)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                \u0026\u0026 newAlias.equals(e.newAlias);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 79
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/ClearCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Clears the expense book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expense book has been cleared! \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.setExpenseBook(new ExpenseBook());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 6,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/Command.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public abstract CommandResult execute(Model model) throws CommandException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/CommandResult.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the result of a command execution."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResult {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String feedbackToUser;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Help information should be shown to the user."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean showHelp;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * The application should exit."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean exit;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Budget display information should be shown to the user."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final boolean showBudgetDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Graph window should be shown to user."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private final boolean showGraph;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified fields."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public CommandResult(String feedbackToUser, boolean showHelp, boolean exit, boolean showBudgetDisplay,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                         boolean showGraph) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.feedbackToUser \u003d requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.showHelp \u003d showHelp;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.exit \u003d exit;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.showBudgetDisplay \u003d showBudgetDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.showGraph \u003d showGraph;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code CommandResult} with the specified {@code feedbackToUser},"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * and other fields set to their default value."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult(String feedbackToUser) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this(feedbackToUser, false, false, true, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getFeedbackToUser() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowHelp() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return showHelp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isExit() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return exit;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean isShowBudgetDisplay() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return showBudgetDisplay;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public boolean isShowGraph() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return showGraph;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof CommandResult)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult otherCommandResult \u003d (CommandResult) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return feedbackToUser.equals(otherCommandResult.feedbackToUser)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 showHelp \u003d\u003d otherCommandResult.showHelp"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                \u0026\u0026 exit \u003d\u003d otherCommandResult.exit"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                \u0026\u0026 showBudgetDisplay \u003d\u003d otherCommandResult.showBudgetDisplay"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                \u0026\u0026 showGraph \u003d\u003d otherCommandResult.showGraph;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return Objects.hash(feedbackToUser, showHelp, exit, showBudgetDisplay, showGraph);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 12,
      "hakiem526": 17,
      "maxxyh": 6,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/DeleteCategoryCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Deletes an existing category tag in the tag list if the given argument is valid."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Deleting a category tag sets the expenses with same tag to DEFAULT tag."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class DeleteCategoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteCat\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes a category from the expense book. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        + PREFIX_TAG + \"CATEGORY\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        + PREFIX_TAG + \"Food\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Existing category deleted: %s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_INVALID_CATEGORY \u003d \"The \\\"%s\\\" category does not exist in the expense book. \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final Tag toDelete;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Creates an DeleteCategoryCommand to delete the specified {@code categoryBudget}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public DeleteCategoryCommand(Tag tag) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        toDelete \u003d tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!model.hasCategory(toDelete)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_CATEGORY, toDelete));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.deleteCategory(toDelete);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            || other instanceof DeleteCategoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            \u0026\u0026 toDelete.equals(((DeleteCategoryCommand) other).toDelete);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 52,
      "maxxyh": 3
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/DeleteCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.Messages;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Deletes an expense identified using it\u0027s displayed index from the expense book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + \": Deletes the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted Expense: %1$s \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense expenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 14,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/EditCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Description;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Remark;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Edits the details of an existing expense in the expense book."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"DESCRIPTION] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + \"[\" + PREFIX_AMOUNT + \"AMOUNT] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + PREFIX_AMOUNT + \"10 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + PREFIX_DATE + \"01-07-2020\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Edited expense: %1$s \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided. \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the expense book. \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_INVALID_CATEGORY \u003d \"The \\\"%s\\\" category does not exist in the expense book. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"Please add it using the \\\"AddCat\\\" command first.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_INVALID_AMOUNT \u003d \"Amount of the expense cannot be negative. Please \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"specify a non-negative amount of the expense.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_SUM_OVER_LIMIT \u003d \"Total sum of expenses cannot exceed 10e9.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param index                of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public EditCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (editExpenseDescriptor.getTag().isPresent() \u0026\u0026 !model.hasCategory(editExpenseDescriptor.getTag().get())) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_CATEGORY, editExpenseDescriptor.getTag().get()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (editedExpense.getAmount().smallerThan(Amount.zeroAmount())) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_AMOUNT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!expenseToEdit.isSameExpense(editedExpense) \u0026\u0026 model.hasExpense(editedExpense)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            model.tallyExpenses().subtract(expenseToEdit.getAmount()).add(editedExpense.getAmount());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new CommandException(MESSAGE_SUM_OVER_LIMIT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Description updatedDescription \u003d editExpenseDescriptor.getDescription().orElse(expenseToEdit.getDescription());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Amount updatedAmount \u003d editExpenseDescriptor.getAmount().orElse(expenseToEdit.getAmount());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Date updatedDate \u003d editExpenseDescriptor.getDate().orElse(expenseToEdit.getDate());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Remark updatedRemark \u003d expenseToEdit.getRemark(); // edit command does not allow editing remarks"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag updatedTag \u003d editExpenseDescriptor.getTag().orElse(expenseToEdit.getTag());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return new Expense(updatedDescription, updatedAmount, updatedDate, updatedRemark, updatedTag);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Stores the details to edit the expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Important Note: Not able to change {@code Remark}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        private Description description;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        private Amount amount;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        private Tag tag;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public EditExpenseDescriptor() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            setDescription(toCopy.description);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            setAmount(toCopy.amount);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            setTag(toCopy.tag);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return CollectionUtil.isAnyNonNull(description, amount, date, tag);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public void setDescription(Description description) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            this.description \u003d description;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Optional\u003cDescription\u003e getDescription() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return Optional.ofNullable(description);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public void setAmount(Amount amount) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            this.amount \u003d amount;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Optional\u003cAmount\u003e getAmount() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return Optional.ofNullable(amount);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setTag(Tag tag) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tag} is null."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public Optional\u003cTag\u003e getTag() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return Optional.ofNullable(tag);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return getDescription().equals(e.getDescription())"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    \u0026\u0026 getAmount().equals(e.getAmount())"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate())"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                    \u0026\u0026 getTag().equals(e.getTag());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 59,
      "maxxyh": 33,
      "-": 115,
      "lebencwb": 20
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/ExitCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Expense Book as requested ... \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true, false, false);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "hakiem526": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/FindCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.Model.PREDICATE_SHOW_ALL_BUDGETS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.DateMatchesPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Finds and lists all expenses in expense book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all the expenses with details \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"that match the arguments (keywords, date). \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"[\" + PREFIX_DESCRIPTION + \"KEYWORD] \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DD-MM-YYYY]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"  \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + PREFIX_DATE + \"18-02-2020 \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + PREFIX_DESCRIPTION + \"Lunch at YIH\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final DescriptionContainsKeywordsPredicate namePredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final DateMatchesPredicate datePredicate;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Constructor that takes in the predicates used to filter through"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * the expenses list and find matching expenses. It matches based on keywords,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * date, and tags."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public FindCommand(DescriptionContainsKeywordsPredicate namePredicate,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                       DateMatchesPredicate datePredicate) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.namePredicate \u003d namePredicate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.datePredicate \u003d datePredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (this.namePredicate.isEmpty() \u0026\u0026 this.datePredicate.isEmpty()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            model.updateFilteredExpenseList(x -\u003e false);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Predicate\u003cExpense\u003e predicate \u003d x -\u003e true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (!namePredicate.isEmpty()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            predicate \u003d predicate.and(namePredicate);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (!datePredicate.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            predicate \u003d predicate.and(datePredicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        model.updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            String.format(Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                model.getFilteredExpenseList().size()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            false, false, false, false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                \u0026\u0026 namePredicate.equals(((FindCommand) other).namePredicate)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                \u0026\u0026 datePredicate.equals(((FindCommand) other).datePredicate)); // state check"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 11,
      "hakiem526": 1,
      "marcus2k": 36,
      "-": 24,
      "lebencwb": 2
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/GraphCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * Displays graph window."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class GraphCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"graph\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            + \": Displays a graphical representation of the user\u0027s expenses.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static final String SHOWING_GRAPH_MESSAGE \u003d \"Displaying graph of expenses.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return new CommandResult(SHOWING_GRAPH_MESSAGE, false, false, true, true);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 24
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/HelpCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window. \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE, true, false, true, false);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "hakiem526": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/ListCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.model.Model.PREDICATE_SHOW_ALL_BUDGETS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Lists all expenses in the expense book to the user."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses. \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 7,
      "maxxyh": 1,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/ReduceCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.ExpenseBook.DEFAULT_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Reduces the budget by a specified amount."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class ReduceCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"reduce\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Reduces the category-budget by a specified amount.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"If reducing by the full amount would result in a negative amount, reduces to zero instead.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"If category is unspecified, reduces the default category-budget. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + PREFIX_AMOUNT + \" AMOUNT \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"[\" + PREFIX_TAG + \" CATEGORY] \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + PREFIX_AMOUNT + \"59.90 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + PREFIX_TAG + \"Food\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New budget amount for %s: $%s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_INVALID_CATEGORY \u003d \"The \\\"%s\\\" category does not exist in the expense book. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"If you need to, please add it using the \\\"\" + AddCategoryCommand.COMMAND_WORD + \"\\\" command first.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_BUDGET \u003d \"The budget amount for %s was insufficient -- \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"amount reduced to zero instead\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_INVALID_AMOUNT \u003d \"Amount to reduce the budget by cannot be negative. Please \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"specify the non-negative amount to reduce the budget by.\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"If you wish to increase the amount in the budget, use the \\\"\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + TopupCommand.COMMAND_WORD + \"\\\" command instead.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final Amount toSubtract;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final Tag category;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Creates a ReduceCommand to reduce the {@code defaultBudget} by the specified {@code Amount}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public ReduceCommand(Amount amount) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        toSubtract \u003d amount;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        category \u003d DEFAULT_TAG;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Creates a ReduceCommand to reduce the {@code CategoryBudget} that matches the {@code tag} by the specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * {@code amount}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public ReduceCommand(Amount amount, Tag tag) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireAllNonNull(amount, tag);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        toSubtract \u003d amount;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        category \u003d tag;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (!model.hasCategory(category)) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_CATEGORY, category));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (toSubtract.smallerThan(Amount.zeroAmount())) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_AMOUNT);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (!model.categoryBudgetHasAmount(category, toSubtract)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            model.getCategoryBudget(category).reset();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_INSUFFICIENT_BUDGET, category.tagName));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        model.reduceCategoryBudget(category, toSubtract);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, category.tagName,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                model.getCategoryBudget(category).getAmount()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                || (other instanceof ReduceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \u0026\u0026 toSubtract.equals(((ReduceCommand) other).toSubtract))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \u0026\u0026 category.equals(((ReduceCommand) other).category);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 3,
      "lebencwb": 89
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/RemarkCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Changes the remark of an existing expense in the expense book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class RemarkCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the remark of the expense identified \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            + \"by the index number used in the last expense listing. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"Existing remark will be overwritten by the input.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + PREFIX_REMARK + \"[REMARK]\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + PREFIX_REMARK + \"Likes to swim.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added remark to Expense: %1$s \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed remark from Expense: %1$s \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param index  of the expense in the filtered expense list to edit the remark"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param remark of the expense to be updated to"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public RemarkCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireAllNonNull(index, remark);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense editedExpense \u003d new Expense(expenseToEdit.getDescription(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                expenseToEdit.getAmount(), expenseToEdit.getDate(),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                remark, expenseToEdit.getTag());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.setExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new CommandResult(generateSuccessMessage(editedExpense));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Generates a command execution success message based on whether the remark is added to or removed from"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code expenseToEdit}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private String generateSuccessMessage(Expense expenseToEdit) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String message \u003d !remark.value.isEmpty() ? MESSAGE_ADD_REMARK_SUCCESS : MESSAGE_DELETE_REMARK_SUCCESS;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return String.format(message, expenseToEdit);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        RemarkCommand e \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \u0026\u0026 remark.equals(e.remark);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 28,
      "lebencwb": 65
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/ResetAliasCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " * Deletes all existing aliases in the alias map."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class ResetAliasCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"resetAlias\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Removes all custom aliases defined by user.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MESSAGE_EMPTY \u003d \"No custom aliases found.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All custom aliases removed.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (model.getAliasMap().isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        model.getAliasMap().removeAllAliases();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (!(other instanceof ResetAliasCommand)) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 42
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/SortCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_SORT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.AmountComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.DateComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.DescriptionComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.SortKeyComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Sorts the current expenses listed."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Able to take in up to 3 parameters, specifying sorts according to Amount, Date and Description."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * \u003c/p\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class SortCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"sort\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String REVERSE_KEYWORD \u003d \"R\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sorts expenses currently listed in Bamboo. \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"[\" + PREFIX_SORT + DescriptionComparator.SORT_KEYWORD + \"[\" + REVERSE_KEYWORD + \"]] \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"[\" + PREFIX_SORT + DateComparator.SORT_KEYWORD + \"[\" + REVERSE_KEYWORD + \"]] \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"[\" + PREFIX_SORT + AmountComparator.SORT_KEYWORD + \"[\" + REVERSE_KEYWORD + \"]]\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + PREFIX_SORT + \"date \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + PREFIX_SORT + \"descriptionR \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Expenses sorted according to: %s. \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private Comparator\u003cExpense\u003e expenseComparator;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private List\u003cString\u003e sortOrder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Constructor for SortCommand, takes in parameters specifying the sort required."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param sortKeyComparators various comparators that will be merged into 1 in order of their index."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public SortCommand(SortKeyComparator ... sortKeyComparators) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        requireNonNull(sortKeyComparators);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        sortOrder \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        List\u003cSortKeyComparator\u003e sortedSortKeyComparators \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (SortKeyComparator sortKeyComparator : sortKeyComparators) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            sortedSortKeyComparators.add(sortKeyComparator);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        sortedSortKeyComparators.sort(Comparator.comparingInt(SortKeyComparator::getSortIndex));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (int i \u003d 0; i \u003c sortedSortKeyComparators.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            SortKeyComparator current \u003d sortedSortKeyComparators.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            if (current.isActive()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                if (expenseComparator \u003d\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    expenseComparator \u003d current.isReverse() ? current.reversed() : current;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    expenseComparator \u003d current.isReverse()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                            ? expenseComparator.thenComparing(current.reversed())"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                            : expenseComparator.thenComparing(current);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                sortOrder.add(current.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assert expenseComparator !\u003d null : \"ExpenseComparator for SortCommand processed by Parser but is null.\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        model.sortExpenseList(expenseComparator);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, sortOrder.toString()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                || (other instanceof SortCommand); // instanceof handles nulls"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                // \u0026\u0026 expenseComparator.equals(((SortCommand) other).expenseComparator)); // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 88
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/SwitchCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.LogicManager;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Switches a category expense in the expense book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class SwitchCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"switch\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Switches a category expense in the expense book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        + \"[\" + PREFIX_TAG + \"CATEGORY]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        + PREFIX_TAG + \"Food \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_INVALID_CATEGORY \u003d \"No such category account:  %1$s. \";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Category expense switched:  %1$s. \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final Tag toMatch;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Creates an SwitchCommand to switch to the specified {@code Tag} category"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public SwitchCommand(Tag tag) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        toMatch \u003d tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!model.hasCategory(toMatch)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_CATEGORY, toMatch));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        LogsCenter.getLogger(LogicManager.class).info("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            \"----------------[USER COMMAND][\" + COMMAND_WORD + \" \" + toMatch + \"]\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.switchCategory(toMatch);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toMatch));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            || (other instanceof SwitchCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            \u0026\u0026 toMatch.equals(((SwitchCommand) other).toMatch));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 56,
      "maxxyh": 3
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/TopupCommand.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.ExpenseBook.DEFAULT_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Tops up the budget by a specified amount."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class TopupCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"topup\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Tops up the category-budget by a specified amount.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"If category is unspecified, tops up the default category-budget. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + PREFIX_AMOUNT + \" AMOUNT \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"[\" + PREFIX_TAG + \" CATEGORY] \\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + PREFIX_AMOUNT + \"59.90 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + PREFIX_TAG + \"Food\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New budget amount for %s: $%s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_INVALID_CATEGORY \u003d \"The \\\"%s\\\" category does not exist in the expense book. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"If you need to, please add it using the \\\"AddCat\\\" command first.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_INVALID_AMOUNT \u003d \"Amount to top-up the budget by cannot be negative. Please \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"specify the non-negative amount to top-up the budget by.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"If you wish to decrease the amount in the budget, use the \\\"reduce\\\" command instead.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_SUM_OVER_LIMIT \u003d \"Total budget cannot exceed 10e9.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final Amount toAdd;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final Tag category;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Creates a TopupCommand to top up the {@code defaultBudget} by the specified {@code Amount}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public TopupCommand(Amount amount) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        toAdd \u003d amount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        category \u003d DEFAULT_TAG;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Creates a TopupCommand to top up the {@code CategoryBudget} that matches the {@code tag} by the specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * {@code amount}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public TopupCommand(Amount amount, Tag tag) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireAllNonNull(amount, tag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        toAdd \u003d amount;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        category \u003d tag;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public CommandResult execute(Model model) throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (!model.hasCategory(category)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_INVALID_CATEGORY, category));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (toAdd.smallerThan(Amount.zeroAmount())) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_AMOUNT);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            model.getTotalBudget().getAmount().add(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } catch (IllegalArgumentException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new CommandException(MESSAGE_SUM_OVER_LIMIT);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        model.topupCategoryBudget(category, toAdd);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, category.tagName,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                model.getCategoryBudget(category).getAmount()));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                || (other instanceof TopupCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \u0026\u0026 toAdd.equals(((TopupCommand) other).toAdd))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \u0026\u0026 category.equals(((TopupCommand) other).category);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 4,
      "maxxyh": 13,
      "lebencwb": 73
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/commands/exceptions/CommandException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents an error which occurs during execution of a {@link Command}."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandException extends Exception {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a new {@code CommandException} with the specified detail {@code message} and {@code cause}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/AddCategoryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.AddCategoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Parses input arguments and creates a new AddCategoryCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class AddCategoryCommandParser implements Parser\u003cAddCategoryCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCategoryCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * and returns an AddCategoryCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public AddCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (!isTagPrefixPresent(argMultimap) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return new AddCategoryCommand(tag);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns true if the tag prefix contains a non-empty {@code Optional} value in the given"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static boolean isTagPrefixPresent(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return argumentMultimap.getValue(PREFIX_TAG).isPresent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 42
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/AddCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.ExpenseBook.DEFAULT_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Description;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // argMultimap stores mapping of prefixes to respective arguments"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_AMOUNT,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_DESCRIPTION, PREFIX_AMOUNT)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Description description \u003d ParserUtil.parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Amount amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Remark remark \u003d new Remark(\"\"); // add command does not allow adding remarks straight away"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag tag;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tag \u003d DEFAULT_TAG;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Date date;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            date \u003d new Date(); // creates a default Date object with date set as now."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Expense expense \u003d new Expense(description, amount, date, remark, tag);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new AddCommand(expense);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 15,
      "maxxyh": 11,
      "-": 34,
      "lebencwb": 13
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/AliasCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.AliasCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " * Parses input arguments and creates a new AliasCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class AliasCommandParser implements Parser\u003cAliasCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AliasCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * and returns an AliasCommand object for execution."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public AliasCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        String[] argsArr \u003d args.trim().split(\"\\\\s+\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (argsArr.length !\u003d 2) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return new AliasCommand(argsArr[0], argsArr[1]);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 30
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/ArgumentMultimap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Prefixes mapped to their respective arguments"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     **/"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "maxxyh": 3,
      "-": 58
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/ArgumentTokenizer.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(prefixes)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .flatMap(prefix -\u003e findPrefixPositions(argsString, prefix).stream())"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Repeatedly searches down the string for all occurrences of one prefix"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString, prefix.getPrefix(), prefixPosition);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                               PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return startPosition;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return prefix;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "maxxyh": 2,
      "-": 146
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/CliSyntax.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final Prefix PREFIX_DESCRIPTION \u003d new Prefix(\"-d\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final Prefix PREFIX_AMOUNT \u003d new Prefix(\"-$\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"-@\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"-r\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final Prefix PREFIX_SORT \u003d new Prefix(\"-by\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "maxxyh": 5,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/DeleteCategoryCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Parses input arguments and creates a new DeleteCategoryCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class DeleteCategoryCommandParser implements Parser\u003cDeleteCategoryCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCategoryCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * and returns an DeleteCategoryCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public DeleteCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!isTagPrefixPresent(argMultimap) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                DeleteCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag tag \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new DeleteCategoryCommand(tag);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns true if the tag prefix contains a non-empty {@code Optional} value in the given"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static boolean isTagPrefixPresent(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return argumentMultimap.getValue(PREFIX_TAG).isPresent();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 43
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/DeleteCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a DeleteCommand object for execution."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommand(index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 5,
      "maxxyh": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/EditCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_AMOUNT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand.EditExpenseDescriptor editExpenseDescriptor \u003d new EditCommand.EditExpenseDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            editExpenseDescriptor.setDescription(ParserUtil"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    .parseDescription(argMultimap.getValue(PREFIX_DESCRIPTION).get()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            editExpenseDescriptor.setAmount(ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            editExpenseDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            editExpenseDescriptor.setTag(ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new EditCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @Deprecated since v1.3."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 16,
      "maxxyh": 6,
      "-": 56,
      "lebencwb": 5
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/ExpenseBookParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.LogicManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.AddCategoryCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.AliasCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.Command;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import seedu.expense.logic.commands.GraphCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.ReduceCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.ResetAliasCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.TopupCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ExpenseBookParser {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return parseCommand(userInput, null);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Accepts an aliasMap as a dictionary to translate aliases into COMMAND_WORD."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @param aliasMap alias dictionary"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public Command parseCommand(String userInput, AliasMap aliasMap) throws ParseException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (aliasMap !\u003d null \u0026\u0026 aliasMap.hasAlias(commandWord)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            commandWord \u003d aliasMap.getValue(commandWord);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        LogsCenter.getLogger(LogicManager.class).info("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                \"----------------[USER COMMAND][\" + commandWord + \" \" + arguments + \"]\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            checkSingleWordCommand(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            checkSingleWordCommand(arguments);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            checkSingleWordCommand(arguments);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            checkSingleWordCommand(arguments);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case TopupCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return new TopupCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case ReduceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return new ReduceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        case AddCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return new AddCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        case DeleteCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return new DeleteCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        case SwitchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return new SwitchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        case AliasCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return new AliasCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        case SortCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return new SortCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        case ResetAliasCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return new ResetAliasCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        case GraphCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            checkSingleWordCommand(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            return new GraphCommand();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private void checkSingleWordCommand(String args) throws ParseException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (!args.isEmpty()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 25,
      "hakiem526": 15,
      "marcus2k": 28,
      "maxxyh": 4,
      "-": 62,
      "lebencwb": 14
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/FindCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.DateMatchesPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MISSING_ARGUMENTS \u003d \"You cannot leave arguments empty.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns a FindCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_DESCRIPTION, PREFIX_DATE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        String keywords \u003d \"\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        List\u003cString\u003e dates \u003d argMultimap.getAllValues(PREFIX_DATE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DESCRIPTION).isPresent()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            keywords \u003d argMultimap.getValue(PREFIX_DESCRIPTION).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            if (keywords.isEmpty()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MISSING_ARGUMENTS));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (dates.size() \u003d\u003d 1 \u0026\u0026 dates.get(0).isEmpty()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, MISSING_ARGUMENTS));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        for (String date: dates) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, Date.MESSAGE_CONSTRAINTS));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (keywords.isEmpty() \u0026\u0026 dates.isEmpty()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return new FindCommand("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Arrays.asList(keywords.trim().split(\"\\\\s+\"))),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DateMatchesPredicate(dates)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        );"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 8,
      "marcus2k": 30,
      "maxxyh": 1,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/Parser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    T parse(String userInput) throws ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "maxxyh": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/ParserUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.ExpenseBook.DEFAULT_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Parses a {@code String description} into a {@code Description}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @throws ParseException if the given {@code description} is invalid."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static Description parseDescription(String description) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String trimmedName \u003d description.trim();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!Description.isValidDescription(trimmedName)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new ParseException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new Description(trimmedName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Parses a {@code String amount} into a {@code Amount}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @throws ParseException if the given {@code amount} is invalid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static Amount parseAmount(String amount) throws ParseException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String trimmedAmount \u003d amount.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!Amount.isValidAmount(trimmedAmount)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new ParseException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new Amount(trimmedAmount);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new ParseException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (trimmedTag.isEmpty()) { // reset the tag to the default tag"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return DEFAULT_TAG;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 8,
      "maxxyh": 25,
      "-": 76,
      "lebencwb": 5
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/Prefix.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * A prefix that marks the beginning of an argument in an arguments string."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * E.g. \u0027t/\u0027 in \u0027add James t/ friend\u0027."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class Prefix {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String prefix;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public Prefix(String prefix) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPrefix() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPrefix();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefix \u003d\u003d null ? 0 : prefix.hashCode();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof Prefix)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix otherPrefix \u003d (Prefix) obj;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPrefix.getPrefix().equals(getPrefix());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/ReduceCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.ReduceCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Parses input arguments and creates a new ReduceCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class ReduceCommandParser implements Parser\u003cReduceCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code TopupCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * and returns a {@code TopupCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public ReduceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReduceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReduceCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_TAG).get().isBlank()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Tag category \u003d new Tag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return new ReduceCommand(amount, category);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return new ReduceCommand(amount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 49
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/RemarkCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Parses input arguments and creates a new {@code RemarkCommand} object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code RemarkCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * and returns a {@code RemarkCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String remark \u003d argMultimap.getValue(PREFIX_REMARK).orElse(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return new RemarkCommand(index, new Remark(remark));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 8,
      "maxxyh": 1,
      "lebencwb": 30
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/ResetAliasCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.ResetAliasCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " * Creates a new ResetAliasCommand object"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class ResetAliasCommandParser implements Parser\u003cResetAliasCommand\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AliasCommand"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * and returns an AliasCommand object for execution. Arguments must be empty as"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * the ResetAliasCommand takes in no argument in its constructor (it is a complete"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * deletion command)."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public ResetAliasCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (!args.trim().isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new ParseException(String.format("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                    MESSAGE_INVALID_COMMAND_FORMAT, ResetAliasCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return new ResetAliasCommand();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 29
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/SortCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.logic.commands.SortCommand.REVERSE_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.AmountComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.DateComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.DescriptionComparator;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Parses input arguments and creates a new SortCommand object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class SortCommandParser implements Parser\u003cSortCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            \"(?\u003ckeyword\u003e\" + DescriptionComparator.SORT_KEYWORD + \"|\" + AmountComparator.SORT_KEYWORD + \"|\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    + DateComparator.SORT_KEYWORD + \")\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SortCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * and returns an SortCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public SortCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // argMultimap stores mapping of prefixes to respective arguments"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_SORT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        List\u003cString\u003e sortKeys \u003d argMultimap.getAllValues(PREFIX_SORT);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (String sortKey : sortKeys) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            if (!sortKey.matches(VALIDATION_REGEX + \"(\" + REVERSE_KEYWORD + \")?\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (sortKeys.isEmpty()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // filter and clean up repeats. Only take the latest entry if conflicting entries are found"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        List\u003cString\u003e sortKeysUnique \u003d getUniqueSortKeys(sortKeys);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        DescriptionComparator descriptionComparator \u003d new DescriptionComparator(false, false, -1);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        AmountComparator amountComparator \u003d new AmountComparator(false, false, -1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        DateComparator dateComparator \u003d new DateComparator(false, false, -1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (String sortKey : sortKeysUnique) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            if (sortKey.contains(DescriptionComparator.SORT_KEYWORD)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                descriptionComparator \u003d new DescriptionComparator(true,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                        sortKey.matches(VALIDATION_REGEX + REVERSE_KEYWORD), index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            } else if (sortKey.contains(AmountComparator.SORT_KEYWORD)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                amountComparator \u003d new AmountComparator(true,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                        sortKey.matches(VALIDATION_REGEX + REVERSE_KEYWORD), index);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            } else if (sortKey.contains(DateComparator.SORT_KEYWORD)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                dateComparator \u003d new DateComparator(true,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                        sortKey.matches(VALIDATION_REGEX + REVERSE_KEYWORD), index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new SortCommand(descriptionComparator, amountComparator, dateComparator);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static List\u003cString\u003e getUniqueSortKeys(Collection\u003cString\u003e sortKeys) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        List\u003cString\u003e sortKeysUnique \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (String sortKey : sortKeys) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            Matcher m \u003d Pattern.compile(VALIDATION_REGEX).matcher(sortKey);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            Matcher mReverse \u003d Pattern.compile(VALIDATION_REGEX + REVERSE_KEYWORD).matcher(sortKey);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            if (m.matches()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                if (sortKeysUnique.contains(sortKey + REVERSE_KEYWORD)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    sortKeysUnique.remove(sortKey + REVERSE_KEYWORD);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                if (!sortKeysUnique.contains(sortKey)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    sortKeysUnique.add(sortKey);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            } else if (mReverse.matches()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                if (sortKeysUnique.contains(mReverse.group(\"keyword\"))) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    sortKeysUnique.remove(mReverse.group(\"keyword\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                if (!sortKeysUnique.contains(sortKey)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    sortKeysUnique.add(sortKey);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return sortKeysUnique;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 108
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/SwitchCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Parses input arguments and creates a new SwitchCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class SwitchCommandParser implements Parser\u003cSwitchCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code SwitchCommand}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * and returns a {@code SwitchCommand} object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public SwitchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag category;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            category \u003d ParserUtil.parseTag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new SwitchCommand(category);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 40
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/TopupCommandParser.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.TopupCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Parses input arguments and creates a new TopupCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class TopupCommandParser implements Parser\u003cTopupCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the {@code TopupCommand}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * and returns a {@code TopupCommand} object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public TopupCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_AMOUNT, PREFIX_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_AMOUNT).isPresent()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TopupCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            amount \u003d ParserUtil.parseAmount(argMultimap.getValue(PREFIX_AMOUNT).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, TopupCommand.MESSAGE_USAGE), ive);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TAG).isPresent()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \u0026\u0026 !argMultimap.getValue(PREFIX_TAG).get().isBlank()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Tag category \u003d new Tag(argMultimap.getValue(PREFIX_TAG).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return new TopupCommand(amount, category);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return new TopupCommand(amount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 7,
      "hakiem526": 4,
      "lebencwb": 38
    }
  },
  {
    "path": "src/main/java/seedu/expense/logic/parser/exceptions/ParseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a parse error encountered by a parser."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParseException extends IllegalValueException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ParseException(String message, Throwable cause) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(message, cause);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/ChartDataCollector.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package seedu.expense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * Statistical calculation of expense data to construct charts/graphs."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public interface ChartDataCollector {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns an ObservableList that contains data required to contruct the chart."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return List of data."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    ObservableList\u003cPieChart.Data\u003e retrieveData();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns a String representation of chart data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Chart data as String."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    String getDataAsString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 24
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/ExpenseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.UniqueCategoryBudgetList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.UniqueExpenseList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.exceptions.CategoryNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Wraps all data at the expense-book level"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Duplicates are not allowed (by .isSameExpense comparison)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ExpenseBook implements ReadOnlyExpenseBook, Statistics {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final Tag DEFAULT_TAG \u003d new Tag(\"Default\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final UniqueCategoryBudgetList budgets;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final UniqueExpenseList expenses;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is a non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        budgets \u003d new UniqueCategoryBudgetList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenses \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Creates an ExpenseBook using the Expenses and Budgets in the {@code toBeCopied}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBook(ReadOnlyExpenseBook toBeCopied) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.expenses.setExpenses(expenses);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Replaces the contents of the category-budgets list with {@code budgets}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void setBudgets(UniqueCategoryBudgetList budgets) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.budgets.setBudgets(budgets);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Resets the existing data of this {@code ExpenseBook} with {@code newData}."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void resetData(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        setBudgets(newData.getBudgets());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        setTags(newData.getTags());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public ObservableList\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return tags.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    //// budget-level operations"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public UniqueCategoryBudgetList getBudgets() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return budgets;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @see UniqueCategoryBudgetList#asUnmodifiableObservableList()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ObservableList\u003cCategoryBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return budgets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void topupBudget(Amount amount) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        budgets.topupBudget(amount);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Tops up a category-budget by a given amount."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @throws CategoryNotFoundException if requested category does not exist."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void topupCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!tags.contains(category)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new CategoryNotFoundException(category);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        budgets.topupCategoryBudget(category, amount);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean containsCategory(Tag tag) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return tags.contains(tag);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Adds a category to the expense book."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * The tag must not already exist in the expense book."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void addCategory(Tag tag) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        tags.add(tag);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        budgets.add(new CategoryBudget(tag));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Deletes a category from the expense book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The tag must already exist in the expense book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void deleteCategory(Tag tag) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!tags.contains(tag)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new CategoryNotFoundException(tag);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        tags.remove(tag);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        budgets.remove(new CategoryBudget(tag));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenses.resetExpenseCategory(expense -\u003e expense.getTag().equals(tag));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Updates the filter of the filtered budget list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void updateFilteredBudgets(Predicate\u003cCategoryBudget\u003e predicate) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        budgets.filterCategoryBudget(predicate);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns true if the {@code CategoryBudget} that matches the specified category contains the given {@code amount}"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * or more."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @see UniqueCategoryBudgetList#categoryBudgetHasAmount(Tag, Amount)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean categoryBudgetHasAmount(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return budgets.categoryBudgetHasAmount(category, amount);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Reduces a category-budget by a given amount."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @throws CategoryNotFoundException if requested category does not exist."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void reduceCategoryBudget(Tag category, Amount amount) throws CategoryNotFoundException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (!containsCategory(category)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new CategoryNotFoundException(category);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        budgets.reduceCategoryBudget(category, amount);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    //// expense-level operations"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense} exists in the expense book."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenses.contains(expense);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Adds a expense to the expense book."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The expense must not already exist in the expense book."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void addExpense(Expense p) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(p);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!tags.contains(p.getTag())) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new CategoryNotFoundException(p.getTag());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenses.add(p);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code target} must exist in the expense book."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * expense in the expense book."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!tags.contains(editedExpense.getTag())) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new CategoryNotFoundException(editedExpense.getTag());"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenses.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Removes {@code key} from this {@code ExpenseBook}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code key} must exist in the expense book."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(key);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void updateFilteredExpenses(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenses.filterExpenses(predicate);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code versionedExpenseBook}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenses.getFilteredExpenses();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    // Statistics method"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @see UniqueExpenseList#tallyExpenses()"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return expenses.tallyExpenses();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Sort expenses in Expense List according to comparator provided."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param comparator"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void sortExpenses(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        expenses.sortExpenses(comparator);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@inheritDoc}"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @see UniqueCategoryBudgetList#tallyAmounts()"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Amount tallyBudgets() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return budgets.tallyAmounts();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Tallies the balance of budgets and expenses in the expense book."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return tallied balance of the expense book"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Amount tallyBalance() {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return tallyBudgets().subtract(tallyExpenses());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getBudgetBarLabel() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        ArrayList\u003cTag\u003e checkedTagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        tags.getTags().stream().map(tag -\u003e Expense.getGenericExpenseWithTag(tag))"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                .filter(expense -\u003e expenses.getFilteredList().getPredicate().test(expense))"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                .map(expense -\u003e expense.getTag()).forEach(checkedTagList::add);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return getBudgetLabelFromList(checkedTagList);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private String getBudgetLabelFromList(ArrayList\u003cTag\u003e list) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (list.size() \u003e 1) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // Show total budget if Expenses of all tags in UniqueTagList passes"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // predicate from expenses.getFilteredList()"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            return \"Total\";"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else if (list.size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // Exactly one tag matches"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            return list.get(0).toString();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            // No match"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            return \"Default\";"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenses.asUnmodifiableObservableList().size() + \" expenses\";"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                || (other instanceof ExpenseBook // instanceof handles nulls"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                \u0026\u0026 expenses.equals(((ExpenseBook) other).expenses));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenses.hashCode();"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 122,
      "hakiem526": 26,
      "maxxyh": 34,
      "-": 74,
      "lebencwb": 84
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/Model.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.exceptions.CategoryBudgetNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.expense.exceptions.CategoryNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    Predicate\u003cCategoryBudget\u003e PREDICATE_SHOW_ALL_BUDGETS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces user prefs data with the data in {@code userPrefs}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    void setUserPrefs(ReadOnlyUserPrefs userPrefs);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyUserPrefs getUserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the user prefs\u0027 GUI settings."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    void setGuiSettings(GuiSettings guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the user prefs\u0027 expense book file path."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Path getExpenseBookFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Sets the user prefs\u0027 expense book file path."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void setExpenseBookFilePath(Path expenseBookFilePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Replaces expense book data with the data in {@code expenseBook}."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void setExpenseBook(ReadOnlyExpenseBook expenseBook);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the ExpenseBook"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    ReadOnlyExpenseBook getExpenseBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the Statistics"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Statistics getStatistics();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns true if an expense with the same identity as {@code expense} exists in the expense book."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    boolean hasExpense(Expense expense);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Deletes the given expense."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The expense must exist in the expense book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void deleteExpense(Expense target);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code expense} must not already exist in the expense book."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void addExpense(Expense expense);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code target} must exist in the expense book."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * in the expense book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void setExpense(Expense target, Expense editedExpense);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    Amount tallyExpenses();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    void setAliasMap(AliasMap aliasMap);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    AliasMap getAliasMap();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    boolean hasAlias(AliasEntry alias);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    void deleteAlias(AliasEntry alias);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    void addAlias(AliasEntry alias);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    void setAlias(AliasEntry target, AliasEntry editedExpense);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Returns an unmodifiable view of the sorted expense list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    void sortExpenseList(Comparator\u003cExpense\u003e expenseComparator);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns an unmodifiable view of the filtered expense list"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Updates the filter of the filtered budget list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void updateFilteredBudgetList(Predicate\u003cCategoryBudget\u003e predicate);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Updates the category expense book by the given {@code category}."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws NullPointerException if {@code category} is null."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void updateExpenseBookCategory(Tag category);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns the budget."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    Budget getTotalBudget();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns the category-budget."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    CategoryBudget getCategoryBudget(Tag category) throws CategoryBudgetNotFoundException;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Adds the given amount to the budget."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void topupBudget(Amount amount);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Adds the given {@code amount} to the {@code CategoryBudget} that corresponds to the specified {@code category}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void topupCategoryBudget(Tag category, Amount amount) throws CategoryNotFoundException;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Checks if the {@code CategoryBudget} that corresponds to the specified {@code category} contains at least the"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * given {@code amount}."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    boolean categoryBudgetHasAmount(Tag category, Amount amount);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Subtracts the given {@code amount} from the {@code CategoryBudget} that corresponds to the specified"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * {@code category}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void reduceCategoryBudget(Tag category, Amount amount);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Checks if the given Tag is present in any of the category budget."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    boolean hasCategory(Tag toCheck);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Adds the given Tag to the expense book."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void addCategory(Tag tag);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Deletes the given Tag from the expense book."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void deleteCategory(Tag tag);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Switches the category expense book into the one that matches the given Tag."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void switchCategory(Tag category);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 67,
      "marcus2k": 14,
      "maxxyh": 16,
      "-": 58,
      "lebencwb": 42
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/ModelManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.Budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Represents the in-memory model of the expense book data."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager implements Model {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final ExpenseBook expenseBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final AliasMap aliasMap;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Initializes a ModelManager with the given expenseBook and userPrefs."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public ModelManager(ReadOnlyExpenseBook expenseBook, ReadOnlyUserPrefs userPrefs,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                        AliasMap aliasMap) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireAllNonNull(expenseBook, userPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        logger.fine(\"Initializing with expense book: \" + expenseBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.expenseBook \u003d new ExpenseBook(expenseBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.aliasMap \u003d new AliasMap(aliasMap);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this(new ExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(userPrefs);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs.resetData(userPrefs);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs.getGuiSettings();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return userPrefs.getExpenseBookFilePath();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(expenseBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        userPrefs.setExpenseBookFilePath(expenseBookFilePath);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExpenseBook \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenseBook(ReadOnlyExpenseBook expenseBook) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.expenseBook.resetData(expenseBook);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenseBook;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Statistics getStatistics() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenseBook;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenseBook.hasExpense(expense);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBook.removeExpense(target);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBook.addExpense(expense);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBook.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return expenseBook.tallyExpenses();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Budget getTotalBudget() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenseBook.getBudgets();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public CategoryBudget getCategoryBudget(Tag category) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return expenseBook.getBudgets().getCategoryBudget(category);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void topupBudget(Amount amount) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBook.topupBudget(amount);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void topupCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        expenseBook.topupCategoryBudget(category, amount);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean categoryBudgetHasAmount(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return expenseBook.categoryBudgetHasAmount(category, amount);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void reduceCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        expenseBook.reduceCategoryBudget(category, amount);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AliasMap \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void setAliasMap(AliasMap aliasMap) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.aliasMap.resetData(aliasMap);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public AliasMap getAliasMap() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return aliasMap;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public boolean hasAlias(AliasEntry alias) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(alias);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return aliasMap.hasAlias(alias);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void deleteAlias(AliasEntry alias) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        aliasMap.removeAlias(alias);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void addAlias(AliasEntry alias) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        aliasMap.addAlias(alias);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void setAlias(AliasEntry target, AliasEntry editedExpense) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        aliasMap.setAlias(target, editedExpense);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Sorted Expense List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void sortExpenseList(Comparator\u003cExpense\u003e expenseComparator) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        expenseBook.sortExpenses(expenseComparator);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Expense List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code versionedExpenseBook}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenseBook.getFilteredExpenseList();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBook.updateFilteredExpenses(predicate);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void updateFilteredBudgetList(Predicate\u003cCategoryBudget\u003e predicate) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBook.updateFilteredBudgets(predicate);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Updates the expense book to one that matches the given {@code category}."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void updateExpenseBookCategory(Tag category) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        updateFilteredBudgetList(budget -\u003e budget.getTag().equals(category));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        updateFilteredExpenseList(expense -\u003e expense.getTag().equals(category));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Checks if the given Tag is present in the expense book."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @see ExpenseBook#containsCategory(Tag)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return expenseBook.containsCategory(toCheck);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void addCategory(Tag tag) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        expenseBook.addCategory(tag);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void deleteCategory(Tag tag) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBook.deleteCategory(tag);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Switches the expense book to one that matches the given {@code category}."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void switchCategory(Tag category) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (hasCategory(category)) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            updateExpenseBookCategory(category);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenseBook.equals(other.expenseBook)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                \u0026\u0026 userPrefs.equals(other.userPrefs);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 92,
      "marcus2k": 41,
      "maxxyh": 14,
      "-": 103,
      "lebencwb": 38
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/PieChartData.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package seedu.expense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * Association class that collects necessary data from {@code ReadOnlyExpenseBook}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * in order for {@code GraphicalDisplayWindow} to initialise charts."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class PieChartData implements ChartDataCollector {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private final ReadOnlyExpenseBook expenseBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Creates instance of PieChartData using {@code ReadOnlyExpenseBook}"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param expenseBook ReadOnlyExpenseBook that contains stored data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public PieChartData(ReadOnlyExpenseBook expenseBook) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.expenseBook \u003d expenseBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public ObservableList\u003cPieChart.Data\u003e retrieveData() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        ObservableList\u003cPieChart.Data\u003e pieChartData \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        getDataAsMap().entrySet().stream().filter(entry -\u003e entry.getValue() \u003e 0).map(entry -\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                new PieChart.Data(entry.getKey() + \" [$\" + getTwoDecimalPlaces(entry.getValue()) + \"]\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                        entry.getValue())).forEach(pieChartData::add);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return pieChartData;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Collects necessary data in a HashMap."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Map containing {@code Tag.toString()} as keys and Double as values."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private HashMap\u003cString, Double\u003e getDataAsMap() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        HashMap\u003cString, Double\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        map.put(\"Default\", 0.0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        expenseBook.getTags().forEach(tag -\u003e map.put(tag.toString(), 0.0));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        // map must now contain all existing tags. Assertion here?"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        expenseBook.getExpenseList().forEach(expense -\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                map.put(expense.getTag().toString(), map.get(expense.getTag().toString())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                        + expense.getAmount().getDollarAsDoubleValue()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getDataAsString() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        getDataAsMap().entrySet().stream().map(entry -\u003e \"[\" + entry.getKey() + \" : $\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                + getTwoDecimalPlaces(entry.getValue()) + \"] \").forEach(sb::append);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public String getTwoDecimalPlaces(Double amt) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return String.format(\"%.2f\", amt);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 62
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/ReadOnlyExpenseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.UniqueCategoryBudgetList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Unmodifiable view of an expense book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public interface ReadOnlyExpenseBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns an unmodifiable view of the expenses list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * This list will not contain any duplicate expenses."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns an unmodifiable view of the budgets list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * This list will not contain any duplicate budgets."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    ObservableList\u003cCategoryBudget\u003e getBudgetList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the budgets."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    UniqueCategoryBudgetList getBudgets();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns the tags."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ObservableList\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 15,
      "-": 10,
      "lebencwb": 10
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/ReadOnlyUserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of user prefs."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getGuiSettings();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Path getExpenseBookFilePath();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/Statistics.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Statistical calculation of an expense book"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public interface Statistics {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the tallied total expenses amount"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return tallied amount"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    Amount tallyExpenses();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the tallied filtered budgets amount"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return tallied amount"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    Amount tallyBudgets();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Tallies the balance of filtered budgets and filtered expenses in the expense book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return tallied balance of the expense book"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    Amount tallyBalance();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns the appropriate budget bar label to be displayed based on user commands."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Label for budget bar as String."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    String getBudgetBarLabel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 25,
      "hakiem526": 7,
      "maxxyh": 5
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/UserPrefs.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs implements ReadOnlyUserPrefs {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings \u003d new GuiSettings();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Path expenseBookFilePath \u003d Paths.get(\"data\", \"expensebook.json\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private Path aliasMapFilePath \u003d Paths.get(\"data\", \"aliasmap.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with default values."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UserPrefs} with the prefs in {@code userPrefs}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(userPrefs);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code UserPrefs} with {@code newUserPrefs}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyUserPrefs newUserPrefs) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newUserPrefs);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(newUserPrefs.getGuiSettings());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        setExpenseBookFilePath(newUserPrefs.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(guiSettings);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenseBookFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public Path getAliasMapFilePath() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return aliasMapFilePath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(expenseBookFilePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.expenseBookFilePath \u003d expenseBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings.equals(o.guiSettings)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                \u0026\u0026 expenseBookFilePath.equals(o.expenseBookFilePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return Objects.hash(guiSettings, expenseBookFilePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + expenseBookFilePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 11,
      "marcus2k": 4,
      "maxxyh": 2,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/alias/AliasEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.model.alias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class AliasEntry {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final String key;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final String value;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Constructs an {@code AliasEntry} with specific Key and Value string."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @param key alias string"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @param value default command word"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public AliasEntry(String key, String value) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.key \u003d key;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public String getKey() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return this.key;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return this.value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (!(o instanceof AliasEntry)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return this.key.equals(((AliasEntry) o).key)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                \u0026\u0026 this.value.equals(((AliasEntry) o).value);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 37
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/alias/AliasMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.model.alias;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.function.IntPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.AddCategoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.AliasCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.TopupCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " * Wraps all data at the expense-book level"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " * Duplicates are not allowed (by .isSameExpense comparison)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class AliasMap {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MESSAGE_RESERVED \u003d \"The [%s] keyword is reserved.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String DUPLICATE_KEYWORD_FOUND \u003d \"The [%s] keyword already exists.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String UNCHANGED_ALIAS \u003d \"Previous and updated alias must not be the same.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String ALIAS_NOT_FOUND \u003d \"The [%s] alias cannot be found.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String ALIAS_ALPHABETS_ONLY \u003d \"Only case-sensitive alphabets can be used as aliases.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String ALIAS_COMMAND_UNALIASABLE \u003d \"`alias` and `reset alias` commands cannot have aliases.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MESSAGE_OVERRIDE_ALIAS \u003d \"Override existing alias instead: %s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MESSAGE_TOO_LONG \u003d \"Alias can only be up to 10 characters long.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final Predicate\u003cString\u003e IS_VALID_LENGTH \u003d x -\u003e x.length() \u003c 11;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final IntPredicate IS_ALPHABET_ASCII \u003d x -\u003e (x \u003e 96 \u0026\u0026 x \u003c 123 || x \u003e 64 \u0026\u0026 x \u003c 91);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final Set\u003cString\u003e RESERVED_KEYWORDS \u003d Set.of("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            AddCommand.COMMAND_WORD, DeleteCommand.COMMAND_WORD, ClearCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            EditCommand.COMMAND_WORD, ExitCommand.COMMAND_WORD, FindCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            HelpCommand.COMMAND_WORD, ListCommand.COMMAND_WORD, RemarkCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            TopupCommand.COMMAND_WORD, AliasCommand.COMMAND_WORD, AddCategoryCommand.COMMAND_WORD,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            DeleteCategoryCommand.COMMAND_WORD, SwitchCommand.COMMAND_WORD, SortCommand.COMMAND_WORD"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    // Maps String alias to String default_command"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final HashMap\u003cString, String\u003e aliasMap;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Constructs a new {@code AliasMap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public AliasMap() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        aliasMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Creates an AliasMap using the AliasMap in the {@code toBeCopied}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public AliasMap(AliasMap toBeCopied) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Replaces the contents of the alias list with {@code aliases}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * {@code aliases} must not contain duplicate expenses."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void setAliases(List\u003cAliasEntry\u003e aliases) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        for (AliasEntry e: aliases) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            this.aliasMap.put(e.getKey(), e.getValue());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Resets the existing data of this {@code AliasMap} with {@code newData}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void resetData(AliasMap newData) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        setAliases(newData.getAliasList());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    //// alias-level operations"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Returns true if an AliasEntry with the same identity as {@code aliasEntry} exists in the alias map."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public boolean hasAlias(AliasEntry aliasEntry) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(aliasEntry);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return this.aliasMap.containsKey(aliasEntry.getKey());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Returns true if a String with the same identity as {@code aliasString} exists in the alias map."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public boolean hasAlias(String aliasString) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(aliasString);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return this.aliasMap.containsKey(aliasString);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public String getValue(String aliasString) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(aliasString);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        // by definition, RESERVED_KEYWORD cannot be aliases"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (RESERVED_KEYWORDS.contains(aliasString)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return aliasString;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (!this.aliasMap.containsKey(aliasString)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new IllegalArgumentException(String.format(ALIAS_NOT_FOUND, aliasString));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return this.aliasMap.get(aliasString);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Adds an AliasEntry to the alias map."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * The entry must not already exist in the alias map."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void addAlias(AliasEntry aliasEntry) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        aliasMap.put(aliasEntry.getKey(), aliasEntry.getValue());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Replaces the given etnry {@code prev} in the list with {@code update}."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * {@code prev} must exist in the expense book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * The alias of {@code update} must not be the same as another existing"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * alias in the alias map."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void setAlias(AliasEntry prev, AliasEntry update) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(prev);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(update);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assert (prev.getValue().equals(update.getValue())) : \"Must replace the same value (command) alias\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (prev.getKey().equals(AliasCommand.COMMAND_WORD)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new IllegalArgumentException(ALIAS_COMMAND_UNALIASABLE);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (!update.getKey().chars().allMatch(IS_ALPHABET_ASCII)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new IllegalArgumentException(ALIAS_ALPHABETS_ONLY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (aliasMap.containsKey(update.getKey())) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new IllegalArgumentException(String.format(DUPLICATE_KEYWORD_FOUND, update.getKey()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (RESERVED_KEYWORDS.contains(update.getKey()) \u0026\u0026 !prev.getValue().equals(update.getKey())) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new IllegalArgumentException(String.format(MESSAGE_RESERVED, update.getKey()));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (prev.getKey().equals(update.getKey())) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new IllegalArgumentException(UNCHANGED_ALIAS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (RESERVED_KEYWORDS.contains(prev.getKey())) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            for (HashMap.Entry\u003cString, String\u003e e: this.aliasMap.entrySet()) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                if (e.getValue().equals(prev.getKey())) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                    throw new IllegalArgumentException(String.format(MESSAGE_OVERRIDE_ALIAS, e.getKey()));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (!IS_VALID_LENGTH.test(update.getKey())) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new IllegalArgumentException(MESSAGE_TOO_LONG);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.aliasMap.remove(prev.getKey());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (!RESERVED_KEYWORDS.contains(update.getKey())) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            addAlias(update);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public List\u003cAliasEntry\u003e getAliasList() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        List\u003cAliasEntry\u003e aliases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        for (Map.Entry\u003cString, String\u003e e: this.aliasMap.entrySet()) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            aliases.add(new AliasEntry(e.getKey(), e.getValue()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return aliases;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Removes {@code alias} from this {@code AliasMap}."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * {@code alias} must exist in the expense book."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void removeAlias(AliasEntry alias) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        aliasMap.remove(alias.getKey());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void removeAllAliases() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        aliasMap.clear();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return this.aliasMap.isEmpty();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (o \u003d\u003d this) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (!(o instanceof AliasMap)) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return this.aliasMap.equals(((AliasMap) o).aliasMap);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 205
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/budget/Budget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Represents a Budget in the ledger."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public interface Budget {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Tops up the budget by the specified {@code Amount}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void topupBudget(Amount toAdd);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Reduces the budget by the specified {@code Amount}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void reduceBudget(Amount toSubtract);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    Amount getAmount();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns true if the budget contains the specified amount or more."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    boolean hasAmount(Amount amount);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Resets the amount in the {@code Budget} to have zero value."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void reset();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "lebencwb": 29
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/budget/CategoryBudget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Represents a category-budget in the expense book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class CategoryBudget implements Budget {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Constructs a new category-budget with the specified {@code Tag} with zero amount."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public CategoryBudget(Tag tag) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        amount \u003d new Amount(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Tops up the budget by the specified {@code Amount}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void topupBudget(Amount toAdd) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assert toAdd.greaterThanEquals(Amount.zeroAmount());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        amount \u003d amount.add(toAdd);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Reduces the budget by the specified {@code Amount}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void reduceBudget(Amount toSubtract) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assert toSubtract.greaterThanEquals(Amount.zeroAmount());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (toSubtract.smallerThanEquals(amount)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            amount \u003d amount.subtract(toSubtract);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            reset();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Resets the amount in the {@code budget} to have zero value."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        amount \u003d Amount.zeroAmount();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Sets the amount in the category-budget to be the same as {@code toCopy}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void copyAmount(Amount toCopy) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        reset();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        topupBudget(toCopy);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns true if both category-budgets have the same {@code Tag}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * This defines a weaker notion of equality between the two category-budgets."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean isSameCategoryBudget(CategoryBudget otherCategoryBudget) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (otherCategoryBudget \u003d\u003d this) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return otherCategoryBudget !\u003d null \u0026\u0026 otherCategoryBudget.getTag().equals(tag);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns true if the category-budget contains the specified {@code amount} or more."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean hasAmount(Amount amount) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return this.amount.greaterThanEquals(amount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return String.format(\"Budget: %s\", amount.toString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!(other instanceof CategoryBudget)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        CategoryBudget otherCategoryBudget \u003d (CategoryBudget) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return otherCategoryBudget.getTag().equals(getTag());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 14,
      "maxxyh": 1,
      "lebencwb": 90
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/budget/UniqueCategoryBudgetList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.ExpenseBook.DEFAULT_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.exceptions.CategoryBudgetNotFoundException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.exceptions.DuplicateCategoryBudgetException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * A list of category-budgets that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * A category-budget is considered unique by comparing using"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * {@code CategoryBudget#isSameCategoryBudget(CategoryBudget)}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * As such, adding and updating of expenses uses Expense#isSameExpense(Expense) for equality so as"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * to ensure that the expense being added or updated is unique in terms of identity in the UniqueExpenseList."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * However, the removal of an expense uses Expense#equals(Object) so"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * as to ensure that the expense with exactly the same fields will be removed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " *"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * @see CategoryBudget#isSameCategoryBudget(CategoryBudget)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class UniqueCategoryBudgetList implements Budget, Iterable\u003cCategoryBudget\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final CategoryBudget defaultCategory \u003d new CategoryBudget(DEFAULT_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final ObservableList\u003cCategoryBudget\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final ObservableList\u003cCategoryBudget\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final FilteredList\u003cCategoryBudget\u003e filteredList \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        new FilteredList\u003c\u003e(asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns true if the list contains an equivalent category-budget as the given argument."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean contains(CategoryBudget toCheck) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return defaultCategory.isSameCategoryBudget(toCheck)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                || internalList.stream().anyMatch(toCheck::isSameCategoryBudget);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Adds a category-budget to the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * The category-budget must not already exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void add(CategoryBudget toAdd) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new DuplicateCategoryBudgetException();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Removes a category-budget to the list."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The category-budget must already exist in the list."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void remove(CategoryBudget toDelete) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(toDelete);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!contains(toDelete)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new CategoryBudgetNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        internalList.remove(toDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Calculates the sum of the budgets in the category-budgets list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @return sum of budgets."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Amount tallyAmounts() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        int size \u003d filteredList.size();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Amount sum \u003d internalList.size() \u003d\u003d size \u0026\u0026 size !\u003d 1 || isAllDefaultCategory()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            ? defaultCategory.getAmount()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            : Amount.zeroAmount();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assert sum.greaterThanEquals(Amount.zeroAmount());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Iterator\u003cCategoryBudget\u003e i \u003d iterator();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        while (i.hasNext()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            sum \u003d sum.add(i.next().getAmount());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void setBudgets(UniqueCategoryBudgetList replacement) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        defaultCategory.copyAmount(replacement.defaultCategory.getAmount());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void setBudgets(List\u003cCategoryBudget\u003e budgets) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        internalList.setAll(budgets);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        setFilteredBudgets(budgets);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setFilteredBudgets(List\u003cCategoryBudget\u003e budgets) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireAllNonNull(budgets);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        filteredList.setAll(budgets);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Filters this list\u0027s filtered list by {@code predicate}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void filterCategoryBudget(Predicate\u003cCategoryBudget\u003e predicate) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        filteredList.setPredicate(predicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public List\u003cCategoryBudget\u003e getCategoryBudgets() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ObservableList\u003cCategoryBudget\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public FilteredList\u003cCategoryBudget\u003e getFilteredList() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return filteredList;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public CategoryBudget getDefaultCategory() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return defaultCategory;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns the {@code CategoryBudget} corresponding to the specified category."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @throws CategoryBudgetNotFoundException if the supplied category does not exist in the list of category-budgets."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public CategoryBudget getCategoryBudget(Tag category) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (category.equals(DEFAULT_TAG)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return getDefaultCategory();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        List\u003cCategoryBudget\u003e categoryBudgets \u003d internalList.stream()"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .filter(categoryBudget -\u003e categoryBudget.getTag().equals(category))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (categoryBudgets.isEmpty()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new CategoryBudgetNotFoundException();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return categoryBudgets.get(0);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Tops up the {@code CategoryBudget} that matches the specified category by the given amount {@code toAdd}."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void topupCategoryBudget(Tag category, Amount toAdd) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireAllNonNull(category, toAdd);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (category.equals(DEFAULT_TAG)) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            topupBudget(toAdd);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        internalList.stream()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .filter(categoryBudget -\u003e categoryBudget.getTag().equals(category))"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .forEach(categoryBudget -\u003e categoryBudget.topupBudget(toAdd));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Reduces the {@code CategoryBudget} that matches the specified category by the given amount {@code toSubtract}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void reduceCategoryBudget(Tag category, Amount toSubtract) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireAllNonNull(category, toSubtract);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (category.equals(DEFAULT_TAG)) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            reduceBudget(toSubtract);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        internalList.stream()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .filter(categoryBudget -\u003e categoryBudget.getTag().equals(category))"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .forEach(categoryBudget -\u003e categoryBudget.reduceBudget(toSubtract));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return tallyAmounts();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void topupBudget(Amount toAdd) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        defaultCategory.topupBudget(toAdd);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void reduceBudget(Amount toSubtract) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        defaultCategory.reduceBudget(toSubtract);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns true if the default budget contains the specified {@code amount} or more."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean hasAmount(Amount amount) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return defaultCategory.hasAmount(amount);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns true if the {@code CategoryBudget} that matches the specified category contains the given {@code amount}"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * or more."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean categoryBudgetHasAmount(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return getCategoryBudget(category).hasAmount(amount);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private boolean isAllDefaultCategory() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag defaultTag \u003d new Tag(\"Default\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return filteredList.stream().allMatch(budget -\u003e budget.getTag().equals(defaultTag));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Iterator\u003cCategoryBudget\u003e iterator() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return filteredList.iterator();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                || (other instanceof UniqueCategoryBudgetList // instanceof handles nulls"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueCategoryBudgetList) other).internalList));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void reset() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        partialReset();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Iterator\u003cCategoryBudget\u003e i \u003d iterator();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        while (i.hasNext()) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            i.next().reset();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Resets only the default category-budget."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void partialReset() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        defaultCategory.reset();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 51,
      "maxxyh": 7,
      "lebencwb": 200
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/budget/exceptions/CategoryBudgetNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.budget.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Signals that the operation is unable to find the specified budget."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class CategoryBudgetNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public CategoryBudgetNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(\"The given CategoryBudget does not exist in expense book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 10
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/budget/exceptions/DuplicateCategoryBudgetException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.model.budget.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Signals that the operation will result in duplicate CategoryBudgets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * (CategoryBudgets are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class DuplicateCategoryBudgetException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public DuplicateCategoryBudgetException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(\"Operation would result in duplicate category-budgets\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 11
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/Amount.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Represents an Expense\u0027s amount in the expense book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAmount(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class Amount implements Comparable\u003cAmount\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            \"Expense Amount restrictions:\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"Amount Format: should only contain numbers and 1 \u0027.\u0027, and should be in the \u003cdollars\u003e.\u003ccents\u003e format.\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"    \\\".\u003ccents\u003e\\\" input is optional but \u003cdollars\u003e should contain at least 1 digit.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \"Value Restrictions: -10e9 to 10e9 inclusive\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"(?\u003cdollars\u003e\\\\-??\\\\d+)(.(?\u003ccents\u003e\\\\d{1,2}))?\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final BigDecimal MAX_VALUE \u003d new BigDecimal(\"10e9\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final BigDecimal MIN_VALUE \u003d new BigDecimal(\"-10e9\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final BigDecimal ZERO_VALUE \u003d new BigDecimal(\"0\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final RoundingMode ROUNDING_MODE \u003d RoundingMode.HALF_EVEN;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    // value in Amount stored as cents"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    protected final BigDecimal value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Constructs a {@code Amount}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param amount A valid amount, as a {@code String}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Amount(String amount) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        checkArgument(isValidAmount(amount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        value \u003d toCents(new BigDecimal(amount));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Constructs a {@code Amount}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param amount A valid amount, as a {@code double}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Amount(double amount) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this(String.valueOf(amount));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Constructor for Amount that already comes in cents."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param minTermAmount value already comes in cents."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Amount(BigDecimal minTermAmount) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        requireNonNull(minTermAmount);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        checkArgument(isWithinMinTermRange(minTermAmount), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.value \u003d minTermAmount;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Converts an amount (rounded to two decimal places) into cents."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static BigDecimal toCents(BigDecimal amount) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return amount.multiply(new BigDecimal(\"100\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Converts an amount (in cents) into the format [dollars].[cents]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static BigDecimal toDollars(BigDecimal amount) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return amount.divide(new BigDecimal(\"100\"), ROUNDING_MODE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Returns true if a given string is a valid amount."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static boolean isValidAmount(String test) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return test.matches(VALIDATION_REGEX) \u0026\u0026 isWithinRange(new BigDecimal(test));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static boolean isWithinRange(BigDecimal value) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return value.compareTo(MAX_VALUE) \u003c\u003d 0 \u0026\u0026 value.compareTo(MIN_VALUE) \u003e\u003d 0;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static boolean isWithinMinTermRange(BigDecimal value) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return value.compareTo(MAX_VALUE.multiply(new BigDecimal(\"100\"))) \u003c\u003d 0"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                \u0026\u0026 value.compareTo(MIN_VALUE.multiply(new BigDecimal(\"100\"))) \u003e\u003d 0;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns a new {@code Amount} as the sum of the current {@code Amount} and the specified {@code Amount}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Uses the minTerm constructor so no need to divide the values by 100 beforehand."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Amount add(Amount other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new Amount(this.value.add(other.value));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Returns a new {@code Amount} as the difference of the current {@code Amount} and the specified {@code Amount}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Uses the minTerm constructor so no need to divide the values by 100 beforehand."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Amount subtract(Amount other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        requireNonNull(other);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new Amount(this.value.subtract(other.value));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Returns the {@code Double} dollar value of the amount."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Warning: use only if absolutely required due to precision loss."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Double getDollarAsDoubleValue() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return toDollars(value).doubleValue();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static Amount zeroAmount() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return new Amount(\"0\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public boolean greaterThan(Amount other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return this.value.compareTo(other.value) \u003e 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public boolean smallerThan(Amount other) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return this.value.compareTo(other.value) \u003c 0;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public boolean greaterThanEquals(Amount other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return this.value.compareTo(other.value) \u003e\u003d 0;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public boolean smallerThanEquals(Amount other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return this.value.compareTo(other.value) \u003c\u003d 0;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        BigDecimal output \u003d toDollars(this.value);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return output.setScale(2, ROUNDING_MODE).toString();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Equality for Amount."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Note that BigDecimal equality should be calculated irrespective of scale."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                || (other instanceof Amount // instanceof handles nulls"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                \u0026\u0026 value.compareTo(((Amount) other).value) \u003d\u003d 0); // state check"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public int compareTo(Amount o) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return this.value.compareTo(o.value);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "maxxyh": 130,
      "lebencwb": 30
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/AmountComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Compares two expenses according to their alphabetical description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class AmountComparator extends SortKeyComparator {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String SORT_KEYWORD \u003d \"amount\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Constructor for {@code DescriptionComparator} to work with SortCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param sortActive specifies if the sort should be used."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param reverse specifies if the sort should be reversed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public AmountComparator(boolean sortActive, boolean reverse, int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(sortActive, reverse, index);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public int compare(Expense o1, Expense o2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return o1.getAmount().compareTo(o2.getAmount());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return this.isReverse() ? this.SORT_KEYWORD + \" reversed\" : this.SORT_KEYWORD;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 27
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/Date.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Represents the date of an expense in the expense book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    // private static final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Dates should be of the format dd-MM-yyyy,\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            + \"and it should adhere to the following constraints:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"1. String should not be blank.\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"2. Date given should be a valid date that exists.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \"** Note: Date input is optional.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    // dd-MM-yyyy"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"^(0[1-9]|[12][0-9]|3[01])-(0[1-9]|1[012])-\\\\d{4}\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public final LocalDate value;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Constructs an {@code Date}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param date A valid date string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        checkArgument(isValidDate(date), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        value \u003d LocalDate.parse(date, DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Constructs an {@code Date} using current Date"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Date() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        value \u003d LocalDate.now();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Factory method returns {@code Date} using current Date."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static Date getDateNow() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return new Date();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Returns if a given string is a valid date."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (test.matches(VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                DateTimeFormatter format \u003d DateTimeFormatter.ofPattern(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                LocalDate date \u003d LocalDate.parse(test, format);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                if (date.format(format).equals(test)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            } catch (DateTimeParseException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return value.format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                || (other instanceof Date // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                \u0026\u0026 value.equals(((Date) other).value)); // state check"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 8,
      "hakiem526": 7,
      "marcus2k": 1,
      "maxxyh": 73
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/DateComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Compares two expenses according to their alphabetical description"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class DateComparator extends SortKeyComparator {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String SORT_KEYWORD \u003d \"date\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Constructor for {@code DescriptionComparator} to work with SortCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param sortActive specifies if the sort should be used."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param reverse specifies if the sort should be reversed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public DateComparator(boolean sortActive, boolean reverse, int index) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(sortActive, reverse, index);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public int compare(Expense o1, Expense o2) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        LocalDate s1 \u003d o1.getDate().value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        LocalDate s2 \u003d o2.getDate().value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return s1.compareTo(s2);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return this.isReverse() ? this.SORT_KEYWORD + \" reversed\" : this.SORT_KEYWORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 31
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/DateMatchesPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " * Tests that any of an {@code Expense}\u0027s {@code Dates} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class DateMatchesPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final Set\u003cDate\u003e dates;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Constructor that takes in a list of strings representing dates."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * It stores parsable strings into the dates HashSet."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public DateMatchesPredicate(List\u003cString\u003e dateStrings) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Set\u003cDate\u003e temp \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        for (String s: dateStrings) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            if (Date.isValidDate(s)) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                temp.add(new Date(s));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.dates \u003d temp;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (this.isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return this.dates.contains(expense.getDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Returns true if there are no dates to match in this predicate. Otherwise, return false."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return this.dates.isEmpty();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                || (other instanceof DateMatchesPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                \u0026\u0026 dates.equals(((DateMatchesPredicate) other).dates)); // state check"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "marcus2k": 48
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/Description.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INPUT_OVERLIMIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Represents an Expense\u0027s description in the expense book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDescription(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class Description {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final int MAX_CHARACTERS \u003d 200;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String CLASS_NAME \u003d \"Description\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            \"Descriptions can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * The first character of the description must not be a whitespace,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public final String fullDescription;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Constructs a {@code Description}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param description A valid description."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Description(String description) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        requireNonNull(description);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        checkArgument(isValidDescription(description), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        checkArgument(isValidLength(description), String.format(MESSAGE_INPUT_OVERLIMIT,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            CLASS_NAME, MAX_CHARACTERS));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        fullDescription \u003d description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns new generic Description instance for some internal functions."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static Description getGenericDescription() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return new Description(CLASS_NAME);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Returns true if a given string is a valid description."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static boolean isValidDescription(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns true if a given string is of valid length."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static boolean isValidLength(String test) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return test.length() \u003c\u003d MAX_CHARACTERS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return fullDescription;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                || (other instanceof Description // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                \u0026\u0026 fullDescription.equals(((Description) other).fullDescription)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return fullDescription.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 14,
      "hakiem526": 7,
      "maxxyh": 57
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/DescriptionComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Compares two expenses according to their alphabetical description"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class DescriptionComparator extends SortKeyComparator {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String SORT_KEYWORD \u003d \"description\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Constructor for {@code DescriptionComparator} to work with SortCommand."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param sortActive specifies if the sort should be used."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param reverse specifies if the sort should be reversed."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public DescriptionComparator(boolean sortActive, boolean reverse, int index) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(sortActive, reverse, index);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public int compare(Expense o1, Expense o2) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String s1 \u003d o1.getDescription().toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String s2 \u003d o2.getDescription().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return s1.compareToIgnoreCase(s2);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return this.isReverse() ? this.SORT_KEYWORD + \" reversed\" : this.SORT_KEYWORD;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 31
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/DescriptionContainsKeywordsPredicate.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.util.StringUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Description} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class DescriptionContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final Set\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public DescriptionContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.keywords \u003d new HashSet\u003c\u003e(keywords);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(expense.getDescription()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                        .fullDescription, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                || (other instanceof DescriptionContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                \u0026\u0026 keywords.equals(((DescriptionContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Returns true if there are no valid keywords in this predicate. Otherwise, return false."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public boolean isEmpty() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return this.keywords.isEmpty() || (this.keywords.size() \u003d\u003d 1 \u0026\u0026 this.keywords.contains(\"\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 5,
      "marcus2k": 15,
      "maxxyh": 1,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/Expense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.ExpenseBook.DEFAULT_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Represents an Expense in the expense book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private final Description description;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private final Amount amount;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final Tag tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Expense(Description description, Amount amount, Date date, Remark remark, Tag tag) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireAllNonNull(description, amount, date, tag);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns a generic {@code Expense} with specific {@code Tag} used for some internal functions."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param tag Specific Tag to initialise new Expense."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @see ExpenseBook#getBudgetBarLabel()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public static Expense getGenericExpenseWithTag(Tag tag) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return new Expense(Description.getGenericDescription(), Amount.zeroAmount(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                Date.getDateNow(), null, tag);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Description getDescription() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return description;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Amount getAmount() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return amount;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Tag getTag() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return tag;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Expense resetTag() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return new Expense(description, amount, date, remark, DEFAULT_TAG);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Returns true if both expenses have the same description, amount and date."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * The same level of equality is defined as the this#equals method."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean isSameExpense(Expense otherExpense) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (otherExpense \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return otherExpense !\u003d null"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                \u0026\u0026 otherExpense.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                \u0026\u0026 (otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                \u0026\u0026 otherExpense.getDate().equals(getDate()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Returns true if both expenses have the same description, amount and date."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * This defines a strong notion of equality between two expenses."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return otherExpense.getDescription().equals(getDescription())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                \u0026\u0026 otherExpense.getAmount().equals(getAmount())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \u0026\u0026 otherExpense.getDate().equals(getDate());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return Objects.hash(description, amount, date);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        builder.append(getDescription())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                .append(\" Amount: $\")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                .append(getAmount())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .append(\" Tags: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .append(getTag());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 13,
      "hakiem526": 12,
      "maxxyh": 23,
      "-": 58,
      "lebencwb": 23
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/Remark.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INPUT_OVERLIMIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Represents an Expense\u0027s remark in the expense book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Guarantees: immutable; is always valid"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final int MAX_CHARACTERS \u003d 200;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String CLASS_NAME \u003d \"Remark\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Constructs a {@code Remark}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @param remark A remark."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        checkArgument(isValidLength(remark), String.format(MESSAGE_INPUT_OVERLIMIT,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            CLASS_NAME, MAX_CHARACTERS));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        value \u003d remark;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns true if a given string is of valid length."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static boolean isValidLength(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return test.length() \u003c\u003d MAX_CHARACTERS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                \u0026\u0026 value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 16,
      "lebencwb": 37
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/SortKeyComparator.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public abstract class SortKeyComparator implements Comparator\u003cExpense\u003e {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    protected boolean sortActive;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    protected boolean reverse;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    protected int index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Constructor for {@code SortKeyComparator} to work with SortCommand."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param sortActive specifies if the sort should be used."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param reverse specifies if the sort should be reversed."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param index specifies the priority of the sort (lower higher priority)."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public SortKeyComparator(boolean sortActive, boolean reverse, int index) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.sortActive \u003d sortActive;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.reverse \u003d reverse;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (sortActive) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            this.index \u003d index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            this.index \u003d -1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Returns true if the sort should be used. Otherwise, return false."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public boolean isActive() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return this.sortActive;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Getter for the index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public int getSortIndex() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return index;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public boolean isReverse() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        return this.reverse;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 44
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/UniqueExpenseList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * A list of expenses that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * A expense is considered unique by comparing using {@code Expense#isSameExpense(Expense)}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * As such, adding and updating of expenses uses Expense#isSameExpense(Expense) for equality so as"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * to ensure that the expense being added or updated is unique in terms of identity in the UniqueExpenseList."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * However, the removal of an expense uses Expense#equals(Object) so"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * as to ensure that the expense with exactly the same fields will be removed."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * @see Expense#isSameExpense(Expense)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class UniqueExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final FilteredList\u003cExpense\u003e filteredList \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new FilteredList\u003c\u003e(asUnmodifiableObservableList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns true if the list contains an equivalent expense as the given argument."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean contains(Expense toCheck) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExpense);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Adds a expense to the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The expense must not already exist in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense in the list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!target.isSameExpense(editedExpense) \u0026\u0026 contains(editedExpense)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Resets the category tag of expenses that passes the {@code predicate} to Default tag"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param predicate condition for the expenses to be met"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void resetExpenseCategory(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        internalList.stream().filter(predicate).forEach(expense -\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            setExpense(expense, expense.resetTag()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The expense must exist in the list."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenses(UniqueExpenseList replacement) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!expensesAreUnique(expenses)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        internalList.setAll(expenses);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Replaces the contents of this list\u0027s filtered list with {@code expenses}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setFilteredExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!expensesAreUnique(expenses)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        filteredList.setAll(expenses);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the filtered list of this object."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenses() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return filteredList;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Filters the contents of this list\u0027s filtered list with {@code predicate}."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void filterExpenses(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireAllNonNull(predicate);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        filteredList.setPredicate(predicate);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Calculates the sum of the expenses in the expense list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @return sum of expenses."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Amount sum \u003d new Amount(\"0\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Iterator\u003cExpense\u003e i \u003d iterator();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        while (i.hasNext()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            sum \u003d sum.add(i.next().getAmount());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Sort expenses in Expense List according to comparator provided."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @param comparator"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void sortExpenses(Comparator\u003cExpense\u003e comparator) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        internalList.setAll(new SortedList\u003cExpense\u003e(this.internalList, comparator));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public FilteredList\u003cExpense\u003e getFilteredList() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return filteredList;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return filteredList.iterator();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                || (other instanceof UniqueExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                \u0026\u0026 internalList.equals(((UniqueExpenseList) other).internalList));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns true if {@code expenses} contains only unique expenses."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private boolean expensesAreUnique(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.size() - 1; i++) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            for (int j \u003d i + 1; j \u003c expenses.size(); j++) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                if (expenses.get(i).isSameExpense(expenses.get(j))) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 187,
      "maxxyh": 18,
      "lebencwb": 4
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/exceptions/CategoryNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Signals that the operation is unable to find the specified category (internal non-user-visible exception)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class CategoryNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public CategoryNotFoundException(Tag category) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(String.format(MESSAGE_INVALID_CATEGORY, category));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public CategoryNotFoundException(String message) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 12,
      "lebencwb": 6
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/exceptions/DuplicateExpenseException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Signals that the operation will result in duplicate Expenses"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * (Expenses are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class DuplicateExpenseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public DuplicateExpenseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(\"Operation would result in duplicate expenses\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 11
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/expense/exceptions/ExpenseNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Signals that the operation is unable to find the specified expense."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ExpenseNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseNotFoundException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(\"The given Expense does not exist in expense book\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 10
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/tag/Tag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Represents a Tag in the expense book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (!tagName.isBlank()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            checkArgument(isValidTagName(tagName), MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            this.tagName \u003d \"Default\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 50,
      "lebencwb": 5
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/tag/UniqueTagList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.ExpenseBook.DEFAULT_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.exceptions.DefaultTagException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * A list of tags that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * A tag is considered unique by comparing using {@code Tag#equals(Tag)}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * As such, adding and updating of tags uses Tag#equals(Tag) for equality so as"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * to ensure that the tag being added or updated is unique in terms of identity in the UniqueTagList."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * \u003cp\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * @see Tag#equals(Object)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalUnmodifiableList \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns true if the list contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return toCheck.equals(DEFAULT_TAG) || internalList.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Adds a tag to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The tag must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void add(Tag toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (toAdd.equals(DEFAULT_TAG)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new DefaultTagException();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Replaces the tag {@code target} in the list with {@code editedTag}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The tag identity of {@code editedTag} must not be the same as another existing tag in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (target.equals(DEFAULT_TAG)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new DefaultTagException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (editedTag.equals(DEFAULT_TAG)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new DefaultTagException();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!target.equals(editedTag) \u0026\u0026 contains(editedTag)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        internalList.set(index, editedTag);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Removes the equivalent tag from the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * The tag must exist in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void remove(Tag toRemove) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (toRemove.equals(DEFAULT_TAG)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new DefaultTagException();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public List\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return internalList;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Replaces the contents of this list with {@code tags}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (tags.contains(DEFAULT_TAG)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new DefaultTagException();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!tagsAreUnique(tags)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return internalUnmodifiableList;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            || (other instanceof UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            \u0026\u0026 internalList.equals(((UniqueTagList) other).internalList));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns true if {@code tags} contains only unique tags."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private boolean tagsAreUnique(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size() - 1; i++) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                if (tags.get(i).equals(tags.get(j))) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 134,
      "lebencwb": 30
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/tag/exceptions/DefaultTagException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Signals that the operation attempts to edit, delete or duplicate the default tag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class DefaultTagException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public DefaultTagException() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(\"The DEFAULT tag is fixed and cannot be edited, deleted or duplicated.\");"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 10
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/tag/exceptions/DuplicateTagException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Signals that the operation will result in duplicate Tags"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * (Tags are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 11
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/tag/exceptions/TagNotFoundException.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Signals that the operation is unable to find the specified tag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class TagNotFoundException extends RuntimeException {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 7
    }
  },
  {
    "path": "src/main/java/seedu/expense/model/util/SampleDataUtil.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.ExpenseBook.DEFAULT_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.Description;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Contains utility methods for populating {@code ExpenseBook} with sample data."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final Remark EMPTY_REMARK \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final Tag TAG_GIRLFRIEND \u003d new Tag(\"Girlfriend\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final Tag TAG_FOOD \u003d new Tag(\"Food\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final Tag TAG_TRANSPORT \u003d new Tag(\"Transport\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final Tag TAG_SHOPPING \u003d new Tag(\"Shopping\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static Expense[] getSampleExpenses() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new Expense[]{"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new Expense(new Description(\"Felicia\u0027s Birthday\"), new Amount(\"140.00\"), new Date(\"02-07-2020\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new Remark(\"Birthday surprise with friends + birthday presents + birthday dinner\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                TAG_GIRLFRIEND),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new Expense(new Description(\"Lunch with Hostel Mates\"), new Amount(\"13\"), new Date(\"01-07-2020\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                EMPTY_REMARK, TAG_FOOD),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new Expense(new Description(\"Grab Home\"), new Amount(\"15\"), new Date(\"01-07-2020\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                new Remark(\"Need to stop grabbing so much!\"), TAG_TRANSPORT),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new Expense(new Description(\"ZARA Jacket\"), new Amount(\"80\"), new Date(\"30-06-2020\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                EMPTY_REMARK, TAG_SHOPPING),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new Expense(new Description(\"Ramen with Tyler\"), new Amount(\"18.50\"), new Date(\"29-06-2020\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                new Remark(\"Tori King @ Tanjong Pagar\"), TAG_FOOD),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new Expense(new Description(\"Phone Bill Payment\"), new Amount(\"35.90\"), new Date(\"29-06-2020\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                EMPTY_REMARK, DEFAULT_TAG),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new Expense(new Description(\"Grab to Supper\"), new Amount(\"5\"), new Date(\"28-06-2020\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                EMPTY_REMARK, TAG_FOOD),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new Expense(new Description(\"Movie with Felicia\"), new Amount(\"14\"), new Date(\"26-06-2020\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                new Remark(\"Tenet was so confusing...\"), TAG_GIRLFRIEND),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new Expense(new Description(\"Top-up Ez-Link\"), new Amount(\"20\"), new Date(\"25-06-2020\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                EMPTY_REMARK, TAG_TRANSPORT),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new Expense(new Description(\"Caifan\"), new Amount(\"3.80\"), new Date(\"25-06-2020\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                EMPTY_REMARK, TAG_FOOD)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static ReadOnlyExpenseBook getSampleExpenseBook() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ExpenseBook sampleEb \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        sampleEb.addCategory(TAG_GIRLFRIEND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        sampleEb.addCategory(TAG_SHOPPING);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        sampleEb.addCategory(TAG_FOOD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        sampleEb.addCategory(TAG_TRANSPORT);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        sampleEb.getBudgets().topupBudget(new Amount(\"40\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        sampleEb.topupCategoryBudget(TAG_FOOD, new Amount(\"30\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        sampleEb.topupCategoryBudget(TAG_GIRLFRIEND, new Amount(\"150\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        sampleEb.topupCategoryBudget(TAG_SHOPPING, new Amount(\"120\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        sampleEb.topupCategoryBudget(TAG_TRANSPORT, new Amount(\"40\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            sampleEb.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return sampleEb;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static AliasMap getSampleAliasMap() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        AliasMap sampleMap \u003d new AliasMap();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        sampleMap.addAlias(new AliasEntry(\"get\", \"find\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return sampleMap;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * @Deprecated since v1.3"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 20,
      "marcus2k": 18,
      "-": 21,
      "lebencwb": 36
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/ExpenseBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Represents a storage for {@link ExpenseBook}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public interface ExpenseBookStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Path getExpenseBookFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns ExpenseBook data as a {@link ReadOnlyExpenseBook}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @see #getExpenseBookFilePath()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Saves the given {@link ReadOnlyExpenseBook} to the storage."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param expenseBook cannot be null."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void saveExpenseBook(ReadOnlyExpenseBook expenseBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @see #saveExpenseBook(ReadOnlyExpenseBook)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void saveExpenseBook(ReadOnlyExpenseBook expenseBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 48
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/JsonAdaptedAliasEntry.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " * Jackson-friendly version of {@link AliasEntry}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "class JsonAdaptedAliasEntry {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"AliasEntry\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final String customisedCommandWord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final String defaultCommandWord;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Constructs a {@code JsonAdaptedAliasEntry} with the given expense details."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public JsonAdaptedAliasEntry(@JsonProperty(\"customisedCommandWord\") String customisedCommandWord,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                              @JsonProperty(\"defaultCommandWord\") String defaultCommandWord) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.customisedCommandWord \u003d customisedCommandWord;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.defaultCommandWord \u003d defaultCommandWord;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public JsonAdaptedAliasEntry(AliasEntry entry) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        customisedCommandWord \u003d entry.getKey();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        defaultCommandWord \u003d entry.getValue();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Converts this Jackson-friendly adapted alias entry into the model\u0027s {@code AliasEntry} object."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted alias entry."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public AliasEntry toModelType() { // throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(customisedCommandWord);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(defaultCommandWord);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assert !customisedCommandWord.isEmpty() : \"Custom keyword cannot be empty!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assert !defaultCommandWord.isEmpty() : \"Default keyword cannot be empty!\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return new AliasEntry(customisedCommandWord, defaultCommandWord);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 55
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/JsonAdaptedBudget.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Jackson-friendly version of {@link Budget}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class JsonAdaptedBudget {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final JsonAdaptedTag tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given amount."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public JsonAdaptedBudget(@JsonProperty(\"tag\") JsonAdaptedTag tag, @JsonProperty(\"amount\") String amount) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.tag \u003d tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Converts a given {@code Budget} into this class for Jackson use."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public JsonAdaptedBudget(CategoryBudget categoryBudget) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        tag \u003d new JsonAdaptedTag(categoryBudget.getTag());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        amount \u003d categoryBudget.getAmount().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Converts this Jackson-friendly adapted budget object into the model\u0027s {@code Budget} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public CategoryBudget toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CategoryBudget categoryBudget \u003d new CategoryBudget(tag.toModelType());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        categoryBudget.topupBudget(new Amount(amount));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return categoryBudget;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "lebencwb": 41
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/JsonAdaptedBudgetList.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.UniqueCategoryBudgetList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Jackson-friendly version of {@link UniqueCategoryBudgetList}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class JsonAdaptedBudgetList {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY_BUDGET \u003d \"Budgets list contains duplicate\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            + \" category-budgets.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final JsonAdaptedBudget defaultCategory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final List\u003cJsonAdaptedBudget\u003e categoryBudgets \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Constructs a {@code JsonAdaptedBudget} with the given amount."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public JsonAdaptedBudgetList(@JsonProperty(\"defaultCategory\") JsonAdaptedBudget defaultCategory,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                                 @JsonProperty(\"categoryBudgets\") List\u003cJsonAdaptedBudget\u003e categoryBudgets) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.defaultCategory \u003d defaultCategory;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.categoryBudgets.addAll(categoryBudgets);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Converts a given {@code UniqueCategoryBudgetList} into this class for Jackson use."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public JsonAdaptedBudgetList(UniqueCategoryBudgetList budgets) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        defaultCategory \u003d new JsonAdaptedBudget(budgets.getDefaultCategory());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.categoryBudgets.addAll(budgets.getCategoryBudgets().stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .map(JsonAdaptedBudget::new)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .collect(Collectors.toList()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Converts this Jackson-friendly adapted budget object into the model\u0027s {@code UniqueCategoryBudgetList} object."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public UniqueCategoryBudgetList toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        UniqueCategoryBudgetList budgetList \u003d new UniqueCategoryBudgetList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        budgetList.topupBudget(defaultCategory.toModelType().getAmount());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        for (JsonAdaptedBudget jsonAdaptedBudget : categoryBudgets) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            CategoryBudget categoryBudget \u003d jsonAdaptedBudget.toModelType();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (budgetList.contains(categoryBudget)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CATEGORY_BUDGET);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            budgetList.add(categoryBudget);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return budgetList;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 60
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/JsonAdaptedExpense.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Description;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Jackson-friendly version of {@link Expense}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "class JsonAdaptedExpense {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private final String description;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private final String amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private final String date;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final String remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final JsonAdaptedTag tagged;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructs a {@code JsonAdaptedExpense} with the given expense details."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public JsonAdaptedExpense(@JsonProperty(\"description\") String description, @JsonProperty(\"amount\") String amount,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                              @JsonProperty(\"date\") String date,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                              @JsonProperty(\"remark\") String remark,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                              @JsonProperty(\"tagged\") JsonAdaptedTag tagged) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.description \u003d description;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.amount \u003d amount;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.tagged \u003d tagged;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Converts a given {@code Expense} into this class for Jackson use."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public JsonAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        description \u003d source.getDescription().fullDescription;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        amount \u003d source.getAmount().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        tagged \u003d new JsonAdaptedTag(source.getTag());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Converts this Jackson-friendly adapted expense object into the model\u0027s {@code Expense} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (description \u003d\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                    Description.class.getSimpleName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!Description.isValidDescription(description)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new IllegalValueException(Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        final Description modelDescription \u003d new Description(description);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (amount \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!Amount.isValidAmount(amount)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new IllegalValueException(Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        final Amount modelAmount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new IllegalValueException(Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (remark \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Remark.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        final Remark modelRemark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (tagged \u003d\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Tag.class.getSimpleName()));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        final Tag modelTag \u003d tagged.toModelType();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return new Expense(modelDescription, modelAmount, modelDate, modelRemark, modelTag);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 18,
      "maxxyh": 25,
      "-": 34,
      "lebencwb": 19
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/JsonAdaptedTag.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonValue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Jackson-friendly version of {@link Tag}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "class JsonAdaptedTag {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code JsonAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given {@code Tag} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonValue"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getTagName() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this Jackson-friendly adapted tag object into the model\u0027s {@code Tag} object."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted tag."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/JsonAliasMapStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " * A class to access AliasMap data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class JsonAliasMapStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonAliasMapStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public JsonAliasMapStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public Path getAliasMapFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public Optional\u003cAliasMap\u003e readAliasMap() throws DataConversionException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return readAliasMap(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Read and create an Optional of AliasMap from JSON at specified filepath."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public Optional\u003cAliasMap\u003e readAliasMap(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Optional\u003cJsonSerializableAliasMap\u003e jsonAliasMap \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                filePath, JsonSerializableAliasMap.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        if (!jsonAliasMap.isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return Optional.of(jsonAliasMap.get().toModelType());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void saveAliasMap(AliasMap aliasMap) throws IOException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        saveAliasMap(aliasMap, filePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Save AliasMap as JSON in specified filepath."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void saveAliasMap(AliasMap aliasMap, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(aliasMap);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableAliasMap(aliasMap), filePath);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 78
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/JsonExpenseBookStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * A class to access ExpenseBook data stored as a json file on the hard disk."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class JsonExpenseBookStorage implements ExpenseBookStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(JsonExpenseBookStorage.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public JsonExpenseBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook() throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return readExpenseBook(filePath);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Similar to {@link #readExpenseBook()}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook(Path filePath) throws DataConversionException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Optional\u003cJsonSerializableExpenseBook\u003e jsonExpenseBook \u003d JsonUtil.readJsonFile("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                filePath, JsonSerializableExpenseBook.class);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!jsonExpenseBook.isPresent()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return Optional.of(jsonExpenseBook.get().toModelType());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void saveExpenseBook(ReadOnlyExpenseBook expenseBook) throws IOException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        saveExpenseBook(expenseBook, filePath);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Similar to {@link #saveExpenseBook(ReadOnlyExpenseBook)}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param filePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void saveExpenseBook(ReadOnlyExpenseBook expenseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(expenseBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonUtil.saveJsonFile(new JsonSerializableExpenseBook(expenseBook), filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 80
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/JsonSerializableAliasMap.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class JsonSerializableAliasMap {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ALIAS \u003d \"Alias list contains duplicate alias(es).\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private final List\u003cJsonAdaptedAliasEntry\u003e aliases \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Constructs a {@code JsonSerializableAliasMap} with the given alias entries."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public JsonSerializableAliasMap(@JsonProperty(\"aliases\") List\u003cJsonAdaptedAliasEntry\u003e entries) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.aliases.addAll(entries);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Converts a given {@code AliasMap} into this class for Jackson use."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableAliasMap}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public JsonSerializableAliasMap(AliasMap source) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        aliases.addAll(source.getAliasList().stream().map(JsonAdaptedAliasEntry::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * Converts this alias map into the model\u0027s {@code AliasMap} object."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public AliasMap toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        AliasMap aliasMap \u003d new AliasMap();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        for (JsonAdaptedAliasEntry jsonAdaptedAliasEntry : aliases) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            AliasEntry alias \u003d jsonAdaptedAliasEntry.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            if (aliasMap.hasAlias(alias)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_ALIAS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            aliasMap.addAlias(alias);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return aliasMap;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 49
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/JsonSerializableExpenseBook.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonCreator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.fasterxml.jackson.annotation.JsonRootName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * An Immutable ExpenseBook that is serializable to JSON format."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "@JsonRootName(value \u003d \"expensebook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "class JsonSerializableExpenseBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CATEGORY \u003d \"Tags list contains duplicate tags.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"Expenses list contains duplicate expense(s).\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String MESSAGE_INVALID_CATEGORY \u003d \"Trying to add an expense to the \\\"%s\\\" category which does\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            + \" not exist in the expense book.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final List\u003cJsonAdaptedExpense\u003e expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final JsonAdaptedBudgetList budgets;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final List\u003cJsonAdaptedTag\u003e categories \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Constructs a {@code JsonSerializableExpenseBook} with the given expenses and budget."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @JsonCreator"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public JsonSerializableExpenseBook(@JsonProperty(\"expenses\") List\u003cJsonAdaptedExpense\u003e expenses,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                                       @JsonProperty(\"budget\") JsonAdaptedBudgetList budgets,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                                       @JsonProperty(\"categories\") List\u003cJsonAdaptedTag\u003e categories) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.expenses.addAll(expenses);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.budgets \u003d budgets;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.categories.addAll(categories);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Converts a given {@code ReadOnlyExpenseBook} into this class for Jackson use."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param source future changes to this will not affect the created {@code JsonSerializableExpenseBook}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public JsonSerializableExpenseBook(ReadOnlyExpenseBook source) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenses.addAll(source.getExpenseList().stream().map(JsonAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        budgets \u003d new JsonAdaptedBudgetList(source.getBudgets());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        categories.addAll(source.getTags().stream().map(JsonAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Converts this expense book into the model\u0027s {@code ExpenseBook} object."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBook expenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        for (JsonAdaptedTag jsonAdaptedTag : categories) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Tag category \u003d jsonAdaptedTag.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            if (expenseBook.containsCategory(category)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CATEGORY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            expenseBook.addCategory(category);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        for (JsonAdaptedExpense jsonAdaptedExpense : expenses) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            Expense expense \u003d jsonAdaptedExpense.toModelType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (expenseBook.hasExpense(expense)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            if (!expenseBook.containsCategory(expense.getTag())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                throw new IllegalValueException(String.format(MESSAGE_INVALID_CATEGORY, expense.getTag()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            expenseBook.addExpense(expense);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        expenseBook.setBudgets(budgets.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenseBook;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 26,
      "maxxyh": 5,
      "-": 34,
      "lebencwb": 20
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/JsonUserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access UserPrefs stored in the hard disk as a json file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorage implements UserPrefsStorage {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public JsonUserPrefsStorage(Path filePath) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return readUserPrefs(filePath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readUserPrefs()}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefsFilePath location of the data. Cannot be null."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file format is not as expected."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs(Path prefsFilePath) throws DataConversionException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return JsonUtil.readJsonFile(prefsFilePath, UserPrefs.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.saveJsonFile(userPrefs, filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 5,
      "maxxyh": 1,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/Storage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public interface Storage extends ExpenseBookStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Path getExpenseBookFilePath();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void saveExpenseBook(ReadOnlyExpenseBook expenseBook) throws IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    Path getAliasMapFilePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    Optional\u003cAliasMap\u003e readAliasMap() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    Optional\u003cAliasMap\u003e readAliasMap(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    void saveAliasMap(AliasMap aliasMap) throws IOException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    void saveAliasMap(AliasMap aliasMap, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 27,
      "marcus2k": 15
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/StorageManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Manages storage of ExpenseBook data in local storage."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager implements Storage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private ExpenseBookStorage expenseBookStorage;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private JsonAliasMapStorage aliasMapStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Creates a {@code StorageManager} with the given {@code ExpenseBookStorage} and {@code UserPrefStorage}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public StorageManager(ExpenseBookStorage expenseBookStorage, UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                          JsonAliasMapStorage aliasMapStorage) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.expenseBookStorage \u003d expenseBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        this.aliasMapStorage \u003d aliasMapStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d ExpenseBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenseBookStorage.getExpenseBookFilePath();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return readExpenseBook(expenseBookStorage.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenseBookStorage.readExpenseBook(filePath);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void saveExpenseBook(ReadOnlyExpenseBook expenseBook) throws IOException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        saveExpenseBook(expenseBook, expenseBookStorage.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void saveExpenseBook(ReadOnlyExpenseBook expenseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBookStorage.saveExpenseBook(expenseBook, filePath);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AliasMap methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public Path getAliasMapFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return aliasMapStorage.getAliasMapFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public Optional\u003cAliasMap\u003e readAliasMap() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return readAliasMap(aliasMapStorage.getAliasMapFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public Optional\u003cAliasMap\u003e readAliasMap(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return aliasMapStorage.readAliasMap(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void saveAliasMap(AliasMap aliasMap) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        saveAliasMap(aliasMap, aliasMapStorage.getAliasMapFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void saveAliasMap(AliasMap aliasMap, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        aliasMapStorage.saveAliasMap(aliasMap, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 21,
      "marcus2k": 39,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/expense/storage/UserPrefsStorage.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Represents a storage for {@link seedu.expense.model.UserPrefs}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface UserPrefsStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the UserPrefs data file."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getUserPrefsFilePath();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns UserPrefs data from storage."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException             if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Saves the given {@link seedu.expense.model.ReadOnlyUserPrefs} to the storage."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userPrefs cannot be null."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(ReadOnlyUserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 6,
      "maxxyh": 2,
      "-": 30
    }
  },
  {
    "path": "src/main/java/seedu/expense/ui/BudgetDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Statistics;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * A ui for the budget balance to be displayed to the user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class BudgetDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String FXML \u003d \"BudgetDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String BUDGET_BALANCE \u003d \"$%s / $%s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static final String DEFAULT_HEADER_MESSAGE \u003d \"Total Budget Balance:\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static final String HEADER_MESSAGE_SUFFIX \u003d \" Budget Balance:\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static final String GREEN_BAR_STYLE_CLASS \u003d \"green-bar\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static final String ORANGE_BAR_STYLE_CLASS \u003d \"orange-bar\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static final String RED_BAR_STYLE_CLASS \u003d \"red-bar\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final Statistics statistics;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private HBox budgetPlaceHolder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private Label budgetHeader;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private StackPane budgetBarHolder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private ProgressBar progressBar;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private Label budgetDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Constructor for {@code BudgetDisplay}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param statistics expenseBook to be stored."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public BudgetDisplay(Statistics statistics) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        requireNonNull(statistics);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.statistics \u003d statistics;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        budgetHeader.setText(DEFAULT_HEADER_MESSAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        progressBar.setProgress(getProgress());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        setBarStyle();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        budgetDisplay.setText(budgetBalance());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        budgetBarHolder.getChildren().setAll(progressBar, budgetDisplay);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        budgetPlaceHolder.getChildren().setAll(budgetHeader, budgetBarHolder);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns the progress of budget balance."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Progress as double."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private double getProgress() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Amount budgetAmount \u003d statistics.tallyBudgets();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assert budgetAmount.greaterThanEquals(Amount.zeroAmount());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Amount expensesSum \u003d statistics.tallyExpenses();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assert expensesSum.greaterThanEquals(Amount.zeroAmount());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (budgetAmount.equals(new Amount(0))) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return -1 / 0.0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return 1 - (expensesSum.getDollarAsDoubleValue() / budgetAmount.getDollarAsDoubleValue());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns budget balance after deducting expenses, as a fraction of total budget."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @return Formatted budget balance as String."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private String budgetBalance() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Amount budgetAmount \u003d statistics.tallyBudgets();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Amount balance \u003d statistics.tallyBalance();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return String.format(BUDGET_BALANCE, balance, budgetAmount);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Sets bar colour as green if progress \u003e 0.5, orange if 0.25 \u003c progress \u003c 0.5"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * and red if progress \u003c 0.25"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private void setBarStyle() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        resetBarStyle();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (getProgress() \u003e 0.5) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            this.progressBar.getStyleClass().add(GREEN_BAR_STYLE_CLASS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else if (getProgress() \u003e 0.25) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            this.progressBar.getStyleClass().add(ORANGE_BAR_STYLE_CLASS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            this.progressBar.getStyleClass().add(RED_BAR_STYLE_CLASS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Resets the style class of progressBar in order to update colours accordingly."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private void resetBarStyle() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.progressBar.getStyleClass().remove(GREEN_BAR_STYLE_CLASS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.progressBar.getStyleClass().remove(ORANGE_BAR_STYLE_CLASS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.progressBar.getStyleClass().remove(RED_BAR_STYLE_CLASS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Sets text display to the user and updates the progress bar."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void setFeedbackToUser() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        assert getProgress() \u003c\u003d 1;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        double initialProgress \u003d progressBar.getProgress();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        double finalProgress \u003d getProgress();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (initialProgress !\u003d finalProgress) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            budgetHeader.setText(statistics.getBudgetBarLabel()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    + HEADER_MESSAGE_SUFFIX);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            budgetDisplay.setText(budgetBalance());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            progressBar.setProgress(getProgress());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            setBarStyle();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            logger.info(\"Progress bar updated. Current progress: \""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    + String.format(\"%.02f\", getProgress()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Shows the budget display"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        logger.fine(\"Showing budget display bar.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        getRoot().setVisible(true);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Hides the budget display."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        getRoot().setVisible(false);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the visibility of budget display"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @return visibility of budget display"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public boolean isVisible() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return getRoot().isVisible();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 30,
      "hakiem526": 88,
      "maxxyh": 22,
      "lebencwb": 25
    }
  },
  {
    "path": "src/main/java/seedu/expense/ui/CommandBox.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final int MAX_CHARACTERS \u003d 450;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandExecutor commandExecutor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code CommandBox} with the given {@code CommandExecutor}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(CommandExecutor commandExecutor) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.commandExecutor \u003d commandExecutor;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // calls #handleTextFieldLength() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        commandTextField.lengthProperty().addListener((observable, oldValue, newValue) -\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            handleTextFieldLength(oldValue, newValue));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            commandExecutor.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Manages the length of {@code commandTextField}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param oldValue length of previous TextField"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @param newValue length of current TextField"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private void handleTextFieldLength(Number oldValue, Number newValue) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (newValue.intValue() \u003e oldValue.intValue()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (commandTextField.getText().length() \u003e\u003d MAX_CHARACTERS) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                commandTextField.setText(commandTextField.getText().substring(0, MAX_CHARACTERS));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a function that can execute commands."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @FunctionalInterface"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface CommandExecutor {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         * Executes the command and returns the result."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "         * @see seedu.expense.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 24,
      "-": 75
    }
  },
  {
    "path": "src/main/java/seedu/expense/ui/ExpenseCard.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private GridPane cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private Label description;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private Label amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Creates a {@code ExpenseCode} with the given {@code Expense} and index to display."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        description.setText(expense.getDescription().fullDescription);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        amount.setText(\"$\" + expense.getAmount().toString());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        date.setText(expense.getDate().toString());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        remark.setText(expense.getRemark().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        tags.getChildren().add(new Label(expense.getTag().tagName));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 16,
      "hakiem526": 3,
      "maxxyh": 3,
      "-": 48,
      "lebencwb": 3
    }
  },
  {
    "path": "src/main/java/seedu/expense/ui/ExpenseListPanel.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ExpenseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListPanel.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenseListPanel.class);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Creates a {@code ExpenseListPanel} with the given {@code ObservableList}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseListPanel(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expense} using a {@code ExpenseCard}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 49
    }
  },
  {
    "path": "src/main/java/seedu/expense/ui/GraphicalDisplayWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.scene.chart.PieChart;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import seedu.expense.model.ChartDataCollector;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import seedu.expense.model.PieChartData;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " * Controller for graph page."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "public class GraphicalDisplayWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(GraphicalDisplayWindow.class);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static final String FXML \u003d \"GraphicalDisplayWindow.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public final ChartDataCollector chartDataCollector;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private StackPane placeHolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private PieChart pieChart;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Creates a new GraphDisplayWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @param expenseBook Data of expenses and tags used to initialise charts."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public GraphicalDisplayWindow(ReadOnlyExpenseBook expenseBook) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        super(FXML, new Stage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.chartDataCollector \u003d new PieChartData(expenseBook);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.pieChart.setTitle(\"Expenditure by Category\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.pieChart.setData(chartDataCollector.retrieveData());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                       if this method is called on a thread other than the JavaFX Application"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                       Thread."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                       if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                       if this method is called on the primary stage."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                       if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        logger.fine(\"Showing graph page of expenses and categories\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        logger.info(chartDataCollector.getDataAsString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        updatePieChart();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     *  Updates data values of PieChart."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void updatePieChart() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        pieChart.getData().clear();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        this.pieChart.setData(chartDataCollector.retrieveData());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Hides the graph window."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Focuses on the graph window."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        updatePieChart();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 100
    }
  },
  {
    "path": "src/main/java/seedu/expense/ui/HelpWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Button;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.Clipboard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.ClipboardContent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String USERGUIDE_URL \u003d \"https://ay2021s1-cs2103-w14-3.github.io/tp/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String HELP_MESSAGE \u003d \"Refer to the user guide: \" + USERGUIDE_URL;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Button copyButton;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label helpMessage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root Stage to use as the root of the HelpWindow."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow(Stage root) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        helpMessage.setText(HELP_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new HelpWindow."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * @throws IllegalStateException \u003cul\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *                                       if this method is called on a thread other than the JavaFX Application"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *                                       Thread."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                       if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                       if this method is called on the primary stage."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003cli\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                       if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *                                   \u003c/li\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *                               \u003c/ul\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().centerOnScreen();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the help window is currently being shown."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Hides the help window."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hide() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().hide();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Focuses on the help window."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Copies the URL to the user guide to the clipboard."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void copyUrl() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        final Clipboard clipboard \u003d Clipboard.getSystemClipboard();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        final ClipboardContent url \u003d new ClipboardContent();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        url.putString(USERGUIDE_URL);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        clipboard.setContent(url);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "maxxyh": 4,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/expense/ui/MainWindow.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.Logic;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private ExpenseListPanel expenseListPanel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplay resultDisplay;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private BudgetDisplay budgetDisplay;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private GraphicalDisplayWindow graphWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private StackPane expenseListPanelPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private StackPane budgetDisplayPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code MainWindow} with the given {@code Stage} and {@code Logic}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Logic logic) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(logic.getGuiSettings());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        graphWindow \u003d new GraphicalDisplayWindow(logic.getExpenseBook());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanel(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseListPanelPlaceholder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(logic.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(this::executeCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        budgetDisplay \u003d new BudgetDisplay(logic.getStatistics());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        budgetDisplayPlaceholder.getChildren().add(budgetDisplay.getRoot());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on {@code guiSettings}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(guiSettings.getWindowHeight());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(guiSettings.getWindowWidth());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (guiSettings.getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(guiSettings.getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(guiSettings.getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.hide();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        graphWindow.hide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     * Opens the graph window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private void handleGraph() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        if (!graphWindow.isShowing()) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            graphWindow.show();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            graphWindow.focus();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseListPanel getExpenseListPanel() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * @see seedu.expense.logic.Logic#execute(String)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private CommandResult executeCommand(String commandText) throws CommandException, ParseException, RuntimeException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandText);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            budgetDisplay.setFeedbackToUser();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isShowHelp()) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                handleHelp();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (commandResult.isExit()) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                handleExit();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (!commandResult.isShowBudgetDisplay() || ((commandResult.isShowHelp()"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    || commandResult.isShowGraph()) \u0026\u0026 !budgetDisplay.isVisible())) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                budgetDisplay.hide();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                budgetDisplay.show();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            if (commandResult.isShowGraph()) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                handleGraph();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            return commandResult;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (CommandException | ParseException | RuntimeException e) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandText);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            resultDisplay.setFeedbackToUser(e.getMessage());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            throw e;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 23,
      "hakiem526": 20,
      "maxxyh": 1,
      "-": 179,
      "lebencwb": 7
    }
  },
  {
    "path": "src/main/java/seedu/expense/ui/ResultDisplay.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setFeedbackToUser(String feedbackToUser) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(feedbackToUser);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.setText(feedbackToUser);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/expense/ui/StatusBarFooter.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label saveLocationStatus;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code StatusBarFooter} with the given {@code Path}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(Path saveLocation) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        saveLocationStatus.setText(Paths.get(\".\").resolve(saveLocation).toString());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/expense/ui/Ui.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * API of UI component"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Ui {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Starts the UI (and the App)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    void start(Stage primaryStage);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "maxxyh": 3,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/expense/ui/UiManager.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.MainApp;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.util.StringUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager implements Ui {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/bamboo_resized.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a {@code UiManager} with the given {@code Logic}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, logic);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 5,
      "hakiem526": 1,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/expense/ui/UiPart.java",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXMLLoader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.MainApp;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * It contains a scene graph with a root node of type {@code T}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     * Resource folder where FXML files are stored."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file URL and root object."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * The FXML file must not specify the {@code fx:controller} attribute."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        loadFxmlFile(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #UiPart(URL, T)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this(getFxmlFileUrl(fxmlFileName), root);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the root object of the scene graph of this UiPart."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public T getRoot() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return fxmlLoader.getRoot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads the object hierarchy from a FXML document."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "     *"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param location Location of the FXML document."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param root     Specifies the root of the object hierarchy."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadFxmlFile(URL location, T root) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(location);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setLocation(location);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setController(this);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        fxmlLoader.setRoot(root);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            fxmlLoader.load();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private static URL getFxmlFileUrl(String fxmlFileName) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(fxmlFileName);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return requireNonNull(fxmlFileUrl);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "maxxyh": 6,
      "-": 85
    }
  },
  {
    "path": "src/main/resources/view/BudgetDisplay.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003cHBox fx:id\u003d\"budgetPlaceHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  \u003cpadding\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cInsets top\u003d\"15\" right\u003d\"50\" bottom\u003d\"15\" left\u003d\"50\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  \u003c/padding\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  \u003cLabel fx:id\u003d\"budgetHeader\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cpadding\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "      \u003cInsets top\u003d\"0\" right\u003d\"30\" bottom\u003d\"0\" left\u003d\"0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003c/padding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  \u003c/Label\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "  \u003cStackPane fx:id\u003d\"budgetBarHolder\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cLabel fx:id\u003d\"budgetDisplay\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cProgressBar fx:id\u003d\"progressBar\" prefHeight\u003d\"30\" prefWidth\u003d\"500\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 16,
      "marcus2k": 2,
      "lebencwb": 4
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-base: #1d1d1d;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-control-inner-background: #1d1d1d;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: transparent transparent transparent #4d4d4d;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3c3e3f;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #424d5f;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-color: derive(#1d1d1d, 10%);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ".budget-display {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ".budget-display .label {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 4px;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-pref-height: 30px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 30%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 50%);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #F70D1A;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent #383838 transparent #383838;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #383838 #383838 #ffffff #383838;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "#filterField, #expenseListPanel, #expenseWebpage {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "#budgetDisplay .content {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    -fx-background-color: transparent, #383838, transparent, #383838;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "#budgetPlaceHolder #budgetHeader {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-font-size: 16;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "#budgetPlaceHolder #budgetDisplay {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-font-size: 14;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-font-family: sans-serif;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ".green-bar {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-accent: #3CB371;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ".orange-bar {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-accent: #FFDAB9;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ".red-bar {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-accent: #F08080;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-vgap: 7;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-padding: 4 0 4 0;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ".chart-legend {"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-background-color: #515658;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ".chart-legend-item {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ".chart-title {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-font-size: 20;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ".chart-pie-label {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "hakiem526": 47,
      "-": 350,
      "lebencwb": 16
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListCard.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003cGridPane id\u003d\"cardPane\" fx:id\u003d\"cardPane\" hgap\u003d\"30\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"NEVER\" prefWidth\u003d\"50\"/\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"NEVER\" prefWidth\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" prefWidth\u003d\"150\" halignment\u003d\"LEFT\"/\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" prefWidth\u003d\"100\"/\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \u003cColumnConstraints hgrow\u003d\"ALWAYS\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \u003cRowConstraints valignment\u003d\"CENTER\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cLabel fx:id\u003d\"id\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"0\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        wrapText\u003d\"true\"/\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cLabel fx:id\u003d\"amount\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"1\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "           wrapText\u003d\"true\" text\u003d\"\\$amount\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cLabel fx:id\u003d\"description\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"2\" text\u003d\"\\$first\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "           wrapText\u003d\"true\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cFlowPane fx:id\u003d\"tags\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"3\" alignment\u003d\"CENTER\"\u003e\u003c/FlowPane\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cLabel fx:id\u003d\"date\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"4\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cLabel fx:id\u003d\"remark\" GridPane.rowIndex\u003d\"0\" GridPane.columnIndex\u003d\"5\" styleClass\u003d\"cell_big_label\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "           wrapText\u003d\"true\" text\u003d\"\\$remark\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpadding\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"5\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/padding\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Label\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 22,
      "-": 13
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListPanel.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  \u003cListView fx:id\u003d\"expenseListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 6
    }
  },
  {
    "path": "src/main/resources/view/GraphicalDisplayWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c?import javafx.scene.chart.PieChart?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Graph\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \u003cImage url\u003d\"@/images/bamboo_resized.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            \u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                \u003cpadding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                    \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                \u003c/padding\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                \u003cPieChart fx:id\u003d\"pieChart\"/\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "hakiem526": 27
    }
  },
  {
    "path": "src/main/resources/view/HelpWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Button?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root resizable\u003d\"false\" title\u003d\"Help\" type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/11\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/help_icon.png\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003cHBox alignment\u003d\"CENTER\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cchildren\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cLabel fx:id\u003d\"helpMessage\" text\u003d\"Label\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets right\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Label\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cButton fx:id\u003d\"copyButton\" mnemonicParsing\u003d\"false\" onAction\u003d\"#copyUrl\" text\u003d\"Copy URL\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003cHBox.margin\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u003cInsets left\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                  \u003c/HBox.margin\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003c/Button\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003copaqueInsets\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/opaqueInsets\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "               \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"10.0\" top\u003d\"5.0\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "         \u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "fileType": "functional-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "\u003c?import javafx.stage.Stage?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "         title\u003d\"Bamboo\" minWidth\u003d\"450\" minHeight\u003d\"600\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003c!--Need credits for image?--\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "    \u003cImage url\u003d\"@/images/bamboo_resized.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        \u003cVBox fx:id\u003d\"expenseList\" styleClass\u003d\"pane-with-border\" minWidth\u003d\"340\" prefWidth\u003d\"340\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "          \u003cStackPane fx:id\u003d\"expenseListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"budgetDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "hakiem526": 4,
      "marcus2k": 2,
      "-": 52,
      "lebencwb": 6
    }
  },
  {
    "path": "src/test/data/JsonExpenseBookStorageTest/invalidAndValidExpenseLedger.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  \"expenses\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"description\": \"Valid Expense\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\": \"12.00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"date\": \"04-10-2020\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"description\": \"Expense With Invalid Amount Field\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\": \"67s\","
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"date\": \"04-10-2020\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  \"budget\": {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"defaultCategory\": {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Default\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"10.00\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    },"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"categoryBudgets\": ["
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"tag\": \"Food\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"amount\": \"100.00\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      },"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"tag\": \"Transport\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"amount\": \"50.00\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "maxxyh": 4,
      "-": 3,
      "lebencwb": 19
    }
  },
  {
    "path": "src/test/data/JsonExpenseBookStorageTest/invalidExpenseLedger.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  \"expenses\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"description\": \"Expense with invalid Description field: Ha!ns R@star#unt\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\": \"3.00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"date\": \"04-10-2020\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  \"budget\": {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"defaultCategory\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Default\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"10.00\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"categoryBudgets\": ["
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"tag\": \"Food\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"amount\": \"100.00\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"tag\": \"Transport\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"amount\": \"50.00\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "maxxyh": 3,
      "lebencwb": 18
    }
  },
  {
    "path": "src/test/data/JsonSerializableAddressBookTest/typicalExpensesLedger.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  \"_comment\": \"Ledger save file which contains the same Expense values as in TypicalExpenses#getTypicalExpenseBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  \"expenses\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"description\" : \"Felicia\u0027s Birthday\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\" : \"140\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"date\" : \"02-07-2020\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"remark\" : \"Birthday surprise with friends + birthday presents + birthday dinner\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Girlfriend\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"description\" : \"Grab Home\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\" : \"15\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"date\" : \"01-07-2020\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"remark\" : \"Need to stop grabbing so much!\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Transport\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"description\" : \"ZARA Jacket\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\" : \"80\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"date\" : \"30-06-2020\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"remark\" : \"\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Shopping\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"description\" : \"Ramen with Tyler\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\" : \"18.50\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"date\" : \"29-06-2020\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"remark\" : \"\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Food\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"description\" : \"Phone Bill Payment\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\" : \"35.90\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"date\" : \"29-06-2020\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"remark\" : \"\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Default\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"description\" : \"Grab to Supper\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\" : \"5\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"date\" : \"28-06-2020\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"remark\" : \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Default\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"description\" : \"Swee Choon Supper\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\" : \"12.40\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"date\" : \"28-06-2020\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"remark\" : \"\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Default\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  \"budget\": {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"defaultCategory\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Default\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"10.00\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    },"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"categoryBudgets\": [ {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Transport\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"50.00\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Food\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"70.00\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Shopping\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"20.00\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Girlfriend\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"200.00\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  },"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  \"categories\": [ \"Transport\", \"Food\", \"Shopping\", \"Girlfriend\" ]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "maxxyh": 23,
      "-": 8,
      "lebencwb": 33
    }
  },
  {
    "path": "src/test/data/JsonSerializableExpenseBookTest/duplicateExpenseLedger.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  \"expenses\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"description\": \"Lunch Bak Chor Mee\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\": \"3.00\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"date\": \"04-10-2020\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"remark\" : \"\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\": \"friends\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"description\": \"Lunch Bak Chor Mee\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\": \"3.00\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"date\": \"04-10-2020\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"remark\" : \"\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\": \"Default\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  \"budget\": {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"defaultCategory\": {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Default\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"10.00\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    },"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"categoryBudgets\": ["
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"tag\": \"Food\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"amount\": \"100.00\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      },"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"tag\": \"Transport\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"amount\": \"50.00\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      },"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"tag\": \"friends\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"amount\": \"20.00\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  },"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  \"categories\": [ \"Food\", \"Transport\", \"friends\" ]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "maxxyh": 6,
      "-": 3,
      "lebencwb": 26
    }
  },
  {
    "path": "src/test/data/JsonSerializableExpenseBookTest/invalidExpenseLedger.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  \"expenses\": [ {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"description\": \"Sauna\","
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    \"amount\": \"4.60\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"date\": \"04-10-2020\""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  \"budget\": {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"defaultCategory\": {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Default\","
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"10.00\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"categoryBudgets\": ["
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"tag\": \"Food\","
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"amount\": \"100.00\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      },"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"tag\": \"Transport\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        \"amount\": \"50.00\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  },"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  \"categories\": [ \"Food\", \"Transport\" ]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "maxxyh": 2,
      "-": 2,
      "lebencwb": 19
    }
  },
  {
    "path": "src/test/data/JsonSerializableExpenseBookTest/typicalExpensesLedger.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  \"_comment\": \"Ledger save file which contains the same Expense values as in TypicalExpenses#getTypicalExpenseBook()\","
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  \"expenses\" : [ {"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"description\" : \"Felicia\u0027s Birthday\","
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"amount\" : \"140\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"date\" : \"02-07-2020\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"remark\" : \"Birthday surprise with friends + birthday presents + birthday dinner\","
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Girlfriend\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"description\" : \"Grab Home\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"amount\" : \"15\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"date\" : \"01-07-2020\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"remark\" : \"Need to stop grabbing so much!\","
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Transport\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"description\" : \"ZARA Jacket\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"amount\" : \"80\","
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"date\" : \"30-06-2020\","
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"remark\" : \"\","
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Shopping\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"description\" : \"Ramen with Tyler\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"amount\" : \"18.50\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"date\" : \"29-06-2020\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"remark\" : \"\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Food\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"description\" : \"Phone Bill Payment\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"amount\" : \"35.90\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"date\" : \"29-06-2020\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"remark\" : \"\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Default\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"description\" : \"Grab to Supper\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"amount\" : \"5\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"date\" : \"28-06-2020\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"remark\" : \"\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Default\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  }, {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"description\" : \"Swee Choon Supper\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"amount\" : \"12.40\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    \"date\" : \"28-06-2020\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"remark\" : \"\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"tagged\" : \"Default\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  } ],"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  \"budget\": {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"defaultCategory\": {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Default\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"10.00\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    },"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    \"categoryBudgets\": [ {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Transport\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"50.00\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Food\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"70.00\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Shopping\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"20.00\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }, {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"tag\": \"Girlfriend\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "      \"amount\": \"200.00\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    } ]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  },"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "  \"categories\": [ \"Transport\", \"Food\", \"Shopping\", \"Girlfriend\" ]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 25,
      "-": 8,
      "lebencwb": 33
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  \"expenseBookFilePath\" : \"expensebook.json\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "  \"expenseBookFilePath\" : \"expensebook.json\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/expense/AppParametersTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppParametersTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ParametersStub parametersStub \u003d new ParametersStub();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AppParameters expected \u003d new AppParameters();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validConfigPath_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"config.json\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(Paths.get(\"config.json\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_nullConfigPath_success() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", null);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidConfigPath_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        parametersStub.namedParameters.put(\"config\", \"a\\0\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expected.setConfigPath(null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, AppParameters.parse(parametersStub));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class ParametersStub extends Application.Parameters {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private Map\u003cString, String\u003e namedParameters \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getRaw() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cString\u003e getUnnamed() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"should not be called\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public Map\u003cString, String\u003e getNamed() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Collections.unmodifiableMap(namedParameters);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/expense/commons/core/ConfigTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        String defaultConfigAsString \u003d \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/expense/commons/core/VersionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_acceptableVersionString_parsedVersionCorrectly() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V0.0.0ea\", 0, 0, 0, true);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V3.10.2\", 3, 10, 2, false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        verifyVersionParsedCorrectly(\"V100.100.100ea\", 100, 100, 100, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionParsing_wrongVersionString_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e Version.fromString(\"This is not a version string\"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionConstructor_correctParameter_valueAsExpected() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(19, 10, 20, true);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(19, version.getMajor());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(10, version.getMinor());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(20, version.getPatch());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(true, version.isEarlyAccess());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionToString_validVersion_correctStringRepresentation() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // boundary at 0"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V0.0.0ea\", version.toString());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // normal values"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(4, 10, 5, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V4.10.5\", version.toString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // big numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"V100.100.100ea\", version.toString());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_compareToIsCorrect() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests equality"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(11, 12, 13, false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003d\u003d 0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different patch"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 5, false);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different minor"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 5, 0, false);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests different major"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, true);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high major vs low minor"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(10, 0, 0, true);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, true);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003e 0);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests high patch vs low minor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 10, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 1, 0, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests same major minor different patch"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access vs not early access on same version number"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access lower version vs not early access higher version compare by version number first"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, true);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, false);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Tests early access higher version vs not early access lower version compare by version number first"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(2, 15, 0, false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(2, 15, 5, true);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.compareTo(another) \u003c 0);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_hashCodeIsCorrect() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Version version \u003d new Version(100, 100, 100, true);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(100100100, version.hashCode());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        version \u003d new Version(10, 10, 10, false);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1010010010, version.hashCode());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void versionComparable_validVersion_equalIsCorrect() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Version one;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Version another;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(0, 0, 0, false);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        one \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        another \u003d new Version(100, 191, 275, true);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(one.equals(another));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void verifyVersionParsedCorrectly(String versionString,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            int major, int minor, int patch, boolean isEarlyAccess) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Version(major, minor, patch, isEarlyAccess), Version.fromString(versionString));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/expense/commons/core/index/IndexTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromOneBased(0));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IndexOutOfBoundsException.class, () -\u003e Index.fromZeroBased(-1));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        final Index fifthExpenseIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(fifthExpenseIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(5.0f));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 9,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/expense/commons/util/AppUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/bamboo_resized.png\"));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e AppUtil.getImage(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e AppUtil.checkArgument(false));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, errorMessage, () -\u003e AppUtil.checkArgument(false, errorMessage));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "hakiem526": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/expense/commons/util/CollectionUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class CollectionUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullVarargs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // no arguments"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // any non-empty argument list"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(new Object(), new Object());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"test\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with just one null at the beginning"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object) null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, \"\", new Object());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(null, new Object(), new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with nulls in the middle"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), null, null, \"test\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", null, new Object());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // argument lists with one null as the last argument"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(\"\", new Object(), null);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(new Object(), new Object(), null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Object[]) null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside lists in the argument list are not considered"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(containingNull, new Object());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void requireAllNonNullCollection() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the front"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList((Object) null));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(null, new Object(), \"\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls in the middle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, new Object()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", null, \"eggs\", null, new Object()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // lists containing nulls at the end"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(\"spam\", new Object(), null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown(Arrays.asList(new Object(), null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null reference"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionThrown((Collection\u003cObject\u003e) null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty list"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Collections.emptyList());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // list with all non-null elements"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object(), \"ham\", Integer.valueOf(1)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // confirms nulls inside nested lists are not considered"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cObject\u003e containingNull \u003d Arrays.asList((Object) null);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNullPointerExceptionNotThrown(Arrays.asList(containingNull, new Object()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isAnyNonNull() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object) null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(CollectionUtil.isAnyNonNull((Object[]) null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(CollectionUtil.isAnyNonNull(new Object(), null));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Object...)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code objects} or any element of {@code objects} is null."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Object... objects) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(objects));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code CollectionUtil#requireAllNonNull(Collection\u003c?\u003e)} throw {@code NullPointerException}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code collection} or any element of {@code collection} is null."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e requireAllNonNull(collection));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Object... objects) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(objects);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNullPointerExceptionNotThrown(Collection\u003c?\u003e collection) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(collection);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/expense/commons/util/ConfigUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigUtilTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"ConfigUtilTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path tempDir;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e read(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(read(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e read(\"NotJsonFormatConfig.json\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"TypicalConfig.json\").get();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"EmptyConfig.json\").get();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new Config(), actual);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Config expected \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Config actual \u003d read(\"ExtraValuesConfig.json\").get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config getTypicalConfig() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d new Config();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setLogLevel(Level.INFO);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(Paths.get(\"preferences.json\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cConfig\u003e read(String configFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return ConfigUtil.readConfig(configFilePath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullConfig_throwsNullPointerException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void save_nullFile_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e save(new Config(), null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveConfig_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Config original \u003d getTypicalConfig();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d tempDir.resolve(\"TempConfig.json\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Config readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setLogLevel(Level.FINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(original, configFilePath);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d ConfigUtil.readConfig(configFilePath).get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void save(Config config, String configFileInTestDataFolder) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePath \u003d addToTestDataPathIfNotNull(configFileInTestDataFolder);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        ConfigUtil.saveConfig(config, configFilePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String configFileInTestDataFolder) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return configFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                                  ? TEST_DATA_FOLDER.resolve(configFileInTestDataFolder)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                  : null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 4,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/expense/commons/util/FileUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPath() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid path"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(FileUtil.isValidPath(\"valid/file/path\"));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid path"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(FileUtil.isValidPath(\"a\\0\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // null path -\u003e throws NullPointerException"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e FileUtil.isValidPath(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/expense/commons/util/JsonUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.SerializableTestClass;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.TestUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests JSON Read and Write"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUtilTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SERIALIZATION_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"serialize.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void serializeObjectToJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d new SerializableTestClass();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        serializableTestClass.setTestValues();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUtil.serializeObjectToJsonFile(SERIALIZATION_FILE, serializableTestClass);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(FileUtil.readFromFile(SERIALIZATION_FILE), SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deserializeObjectFromJsonFile_noExceptionThrown() throws IOException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.writeToFile(SERIALIZATION_FILE, SerializableTestClass.JSON_STRING_REPRESENTATION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        SerializableTestClass serializableTestClass \u003d JsonUtil"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                .deserializeObjectFromJsonFile(SERIALIZATION_FILE, SerializableTestClass.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getName(), SerializableTestClass.getNameTestValue());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getListOfLocalDateTimes(), SerializableTestClass.getListTestValues());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(serializableTestClass.getMapOfIntegerToString(), SerializableTestClass.getHashMapTestValues());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_readJsonStringToObjectInstance_correctObject()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    //TODO: @Test jsonUtil_writeThenReadObjectToJson_correctObject()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/expense/commons/util/StringUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isNonZeroUnsignedInteger --------------------------------------"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isNonZeroUnsignedInteger() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\")); // Spaces in the middle"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter cannot be empty\", ()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"  \"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_multipleWords_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, \"Word parameter should be a single word\", ()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e StringUtil.containsWordIgnoreCase(\"typical sentence\", \"aaa BBB\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.containsWordIgnoreCase(null, \"abc\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches first word in sentence"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - last word in sentence"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - middle word in sentence"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - matches multiple words"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        // Matches a partial word only, should return true for Bamboo"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc\", \"Bbb\")); // First word (boundary case)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bBb ccc@1\", \"CCc@1\")); // Last word (boundary case)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"  AAA   bBb   ccc  \", \"aaa\")); // Sentence has extra spaces"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Aaa\", \"aaa\")); // Only one word in sentence (boundary case)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"  ccc  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // Matches multiple words in sentence"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"AAA bBb ccc  bbb\", \"bbB\"));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.getDetails(new FileNotFoundException(\"file not found\"))"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            .contains(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e StringUtil.getDetails(null));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "marcus2k": 2,
      "-": 139
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/LogicManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.AMOUNT_DESC_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DATE_DESC_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DESCRIPTION_DESC_FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.FOOD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.storage.JsonAliasMapStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.storage.JsonExpenseBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.storage.StorageManager;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final IOException DUMMY_IO_EXCEPTION \u003d new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path temporaryFolder;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonExpenseBookStorage expenseBookStorage \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new JsonExpenseBookStorage(temporaryFolder.resolve(\"expenseBook.json\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(temporaryFolder.resolve(\"userPrefs.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        JsonAliasMapStorage aliasMapStorage \u003d new JsonAliasMapStorage(temporaryFolder.resolve(\"aliasMap.json\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        StorageManager storage \u003d new StorageManager(expenseBookStorage, userPrefsStorage, aliasMapStorage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_storageThrowsIoException_throwsCommandException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // Setup LogicManager with JsonExpenseBookIoExceptionThrowingStub"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonExpenseBookStorage expenseBookStorage \u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new JsonExpenseBookIoExceptionThrowingStub(temporaryFolder.resolve(\"ioExceptionExpenseBook.json\"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                new JsonUserPrefsStorage(temporaryFolder.resolve(\"ioExceptionUserPrefs.json\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        JsonAliasMapStorage aliasMapStorage \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new JsonAliasMapStorage(temporaryFolder.resolve(\"ioExceptionAliasMap.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        StorageManager storage \u003d new StorageManager(expenseBookStorage, userPrefsStorage, aliasMapStorage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model, storage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Execute add command"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String addCommand \u003d AddCommand.COMMAND_WORD + DESCRIPTION_DESC_FOOD + AMOUNT_DESC_FOOD"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                + DATE_DESC_FOOD + TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(FOOD).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        expectedModel.addCategory(expectedExpense.getTag());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedModel.addExpense(expectedExpense);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d LogicManager.FILE_OPS_ERROR_MESSAGE + DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(addCommand, CommandException.class, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e logic.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * - no exceptions are thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the feedback message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, result.getFeedbackToUser());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandFailure(String, Class, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, expectedException, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and confirms that"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code expectedException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the resulting error message is equal to {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager state is the same as that in {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c? extends Throwable\u003e expectedException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(expectedException, expectedMessage, () -\u003e logic.execute(inputCommand));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub class to throw an {@code IOException} when the save method is called."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static class JsonExpenseBookIoExceptionThrowingStub extends JsonExpenseBookStorage {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        private JsonExpenseBookIoExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void saveExpenseBook(ReadOnlyExpenseBook expenseBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            throw DUMMY_IO_EXCEPTION;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 27,
      "marcus2k": 15,
      "maxxyh": 1,
      "-": 121,
      "lebencwb": 4
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/AddCategoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Statistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.Budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class AddCategoryCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void constructor_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCategoryCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void execute_categoryAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStubAcceptingTagAdded modelStub \u003d new ModelStubAcceptingTagAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag validTag \u003d new Tag(\"Valid\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CommandResult commandResult \u003d new AddCategoryCommand(validTag).execute(modelStub);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(String.format(AddCategoryCommand.MESSAGE_SUCCESS, validTag), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(Arrays.asList(validTag), modelStub.tagsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void execute_duplicateTag_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag validTag \u003d new Tag(\"Valid\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        AddCategoryCommand addCategoryCommand \u003d new AddCategoryCommand(validTag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithTag(validTag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertThrows(CommandException.class,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                AddCategoryCommand.MESSAGE_DUPLICATE_CATEGORY, () -\u003e addCategoryCommand.execute(modelStub));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag aTag \u003d new Tag(\"A\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag bTag \u003d new Tag(\"B\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        AddCategoryCommand addACommand \u003d new AddCategoryCommand(aTag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        AddCategoryCommand addBCommand \u003d new AddCategoryCommand(bTag);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertTrue(addACommand.equals(addACommand));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        AddCategoryCommand addACopy \u003d new AddCategoryCommand(aTag);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertTrue(addACommand.equals(addACopy));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(addACommand.equals(1));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(addACommand.equals(null));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(addACommand.equals(addBCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setExpenseBook(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cCategoryBudget\u003e predicate) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void updateExpenseBookCategory(Tag category) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public Budget getTotalBudget() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public CategoryBudget getCategoryBudget(Tag category) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void topupBudget(Amount amount) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void topupCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean categoryBudgetHasAmount(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void reduceCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void addCategory(Tag tag) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void deleteCategory(Tag tag) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setAlias(AliasEntry prev, AliasEntry curr) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public void sortExpenseList(Comparator\u003cExpense\u003e expenseComparator) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void switchCategory(Tag category) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setAliasMap(AliasMap map) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void addAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public AliasMap getAliasMap() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean hasAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void deleteAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * A Model stub that contains a single tag."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private class ModelStubWithTag extends ModelStub {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        private final Tag tag;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStubWithTag(Tag tag) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            this.tag \u003d tag;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return this.tag.equals(toCheck);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * A Model stub that always accept the expense being added."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private class ModelStubAcceptingTagAdded extends ModelStub {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        final ArrayList\u003cTag\u003e tagsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            requireNonNull(toCheck);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return tagsAdded.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void addCategory(Tag tag) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tagsAdded.add(tag);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return new ExpenseBook();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 8,
      "maxxyh": 11,
      "lebencwb": 287
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/AddCommandIntegrationTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        model \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_newExpense_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandSuccess(new AddCommand(validExpense), model,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validExpense), expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_duplicateExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense expenseInList \u003d model.getExpenseBook().getExpenseList().get(0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandFailure(new AddCommand(expenseInList), model, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 14,
      "marcus2k": 8,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/AddCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.ExpenseBook.DEFAULT_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Statistics;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.Budget;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AddCommand(null));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ModelStubAcceptingExpenseAdded modelStub \u003d new ModelStubAcceptingExpenseAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validExpense).execute(modelStub);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validExpense), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(Arrays.asList(validExpense), modelStub.expensesAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_duplicateExpense_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validExpense);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithExpense(validExpense);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(CommandException.class, AddCommand.MESSAGE_DUPLICATE_EXPENSE, () -\u003e addCommand.execute(modelStub));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void execute_sumExpensesTooLarge_failure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Expense largeExpense \u003d new ExpenseBuilder().withAmount(Amount.MAX_VALUE.toPlainString()).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(largeExpense);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertCommandFailure(addCommand, model, AddCommand.MESSAGE_SUM_OVER_LIMIT);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense alice \u003d new ExpenseBuilder().withDescription(\"Alice\").build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense bob \u003d new ExpenseBuilder().withDescription(\"Bob\").build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setExpenseBook(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cCategoryBudget\u003e predicate) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void updateExpenseBookCategory(Tag category) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public Budget getTotalBudget() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public CategoryBudget getCategoryBudget(Tag category) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void topupBudget(Amount amount) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void topupCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean categoryBudgetHasAmount(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void reduceCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void addCategory(Tag tag) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void deleteCategory(Tag tag) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setAlias(AliasEntry prev, AliasEntry curr) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public void sortExpenseList(Comparator\u003cExpense\u003e expenseComparator) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void switchCategory(Tag category) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setAliasMap(AliasMap map) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void addAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public AliasMap getAliasMap() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public boolean hasAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void deleteAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * A Model stub that contains a single expense."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private class ModelStubWithExpense extends ModelStub {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        private final Expense expense;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ModelStubWithExpense(Expense expense) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.expense \u003d expense;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return this.expense.isSameExpense(expense);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * A Model stub that always accept the expense being added."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private class ModelStubAcceptingExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        final ArrayList\u003cExpense\u003e expensesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        final Tag tag \u003d DEFAULT_TAG;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return expensesAdded.stream().anyMatch(expense::isSameExpense);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            expensesAdded.add(expense);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            return Amount.zeroAmount();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return toCheck.equals(tag);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return new ExpenseBook();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 91,
      "marcus2k": 31,
      "maxxyh": 28,
      "-": 139,
      "lebencwb": 42
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/AliasCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.Statistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.budget.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.budget.exceptions.CategoryBudgetNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class AliasCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void constructor_nullStrings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new AliasCommand(null, null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void execute_nonAlphabetical_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        ModelStubWithAliasMap modelStub \u003d new ModelStubWithAliasMap();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AliasCommand(\"get\", \"-$\").execute(modelStub));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void execute_fromDefaultInsteadOfCustomisedAlias_throwCommandException() throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        ModelStubWithAliasMap modelStub \u003d new ModelStubWithAliasMap();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new AliasCommand(\"find\", \"f\").execute(modelStub));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void execute_fromDefaultWithNoCustomisedAliasYet_leestBecomesAliasForListCommand()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        ModelStubWithAliasMap modelStub \u003d new ModelStubWithAliasMap();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        new AliasCommand(\"list\", \"leest\").execute(modelStub);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertTrue(modelStub.getAliasMap().hasAlias(new AliasEntry(\"leest\", \"list\")));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void equals_sameStrings_true() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertEquals(new AliasCommand(\"a\", \"b\"), new AliasCommand(\"a\", \"b\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void execute_duplicateKeywords_throwIllegalArgumentException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        ModelStubWithAliasMap modelStub \u003d new ModelStubWithAliasMap();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new AliasCommand(\"get\", \"switch\").execute(modelStub)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void execute_removeSingleAlias_revertBack() throws CommandException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        ModelStubWithAliasMap modelStub \u003d new ModelStubWithAliasMap();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new CommandResult(\"Removed alias. [get] is no longer alias for [find]. \"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new AliasCommand(\"get\", \"find\").execute(modelStub)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        );"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private class ModelStubWithAliasMap implements Model {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        private AliasMap am;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        ModelStubWithAliasMap() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            am \u003d new AliasMap();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            am.addAlias(new AliasEntry(\"get\", \"find\"));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            am.addAlias(new AliasEntry(\"d\", \"delete\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setExpenseBook(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cCategoryBudget\u003e predicate) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void updateExpenseBookCategory(Tag category) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public Budget getTotalBudget() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void topupBudget(Amount amount) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void topupCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean categoryBudgetHasAmount(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void reduceCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void addCategory(Tag tag) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void deleteCategory(Tag tag) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setAlias(AliasEntry prev, AliasEntry curr) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            this.am.setAlias(prev, curr);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void sortExpenseList(Comparator\u003cExpense\u003e expenseComparator) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void switchCategory(Tag category) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public CategoryBudget getCategoryBudget(Tag category) throws CategoryBudgetNotFoundException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setAliasMap(AliasMap map) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            this.am \u003d new AliasMap(map);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void addAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            this.am.addAlias(entry);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public AliasMap getAliasMap() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return this.am;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public boolean hasAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return this.am.hasAlias(entry);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void deleteAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            this.am.removeAlias(entry);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 249,
      "maxxyh": 5,
      "lebencwb": 10
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/ClearCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_emptyExpenseBook_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_nonEmptyExpenseBook_success() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedModel.setExpenseBook(new ExpenseBook());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 25,
      "marcus2k": 8
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/CommandResultTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandResultTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\")));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        assertTrue(commandResult.equals(new CommandResult(\"feedback\", false, false, true, false)));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(commandResult.equals(commandResult));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(0.5f));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"different\")));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", true, false, true, false)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, true, true, false)));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        //different shoBudgetDisplay value -\u003e return false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        assertFalse(commandResult.equals(new CommandResult(\"feedback\", false, false, false, false)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void hashcode() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new CommandResult(\"feedback\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns same hashcode"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(commandResult.hashCode(), new CommandResult(\"feedback\").hashCode());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different feedbackToUser value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"different\").hashCode());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // different showHelp value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", true, false, true, false).hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different exit value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, true, true, false).hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        //different showBudgetDisplay value -\u003e returns different hashcode"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        assertNotEquals(commandResult.hashCode(), new CommandResult(\"feedback\", false, false, false, false).hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 5,
      "hakiem526": 8,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/CommandTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String VALID_DESCRIPTION_FOOD \u003d \"Caifan lunch\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String VALID_DESCRIPTION_BUS \u003d \"Coach ride to Malacca\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String VALID_DESCRIPTION_MISC \u003d \"Miscellaneous\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String VALID_AMOUNT_FOOD \u003d \"3.80\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String VALID_AMOUNT_BUS \u003d \"63\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String VALID_AMOUNT_MISC \u003d \"4.20\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String VALID_DATE_FOOD \u003d \"04-10-2020\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String VALID_DATE_BUS \u003d \"09-11-2020\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String VALID_DATE_MISC \u003d \"15-12-2020\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String VALID_REMARK_FOOD \u003d \"The usual: Steamed egg, ladies finger, sweet n sour pork.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String VALID_REMARK_BUS \u003d \"We\u0027re going on a trip??\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String VALID_TAG_FOOD \u003d \"Food\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String VALID_TAG_TRANSPORT \u003d \"Transport\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String DESCRIPTION_DESC_FOOD \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_FOOD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String DESCRIPTION_DESC_BUS \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_BUS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String DESCRIPTION_DESC_MISC \u003d \" \" + PREFIX_DESCRIPTION + VALID_DESCRIPTION_MISC;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String AMOUNT_DESC_FOOD \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_FOOD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String AMOUNT_DESC_BUS \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final String AMOUNT_DESC_MISC \u003d \" \" + PREFIX_AMOUNT + VALID_AMOUNT_MISC;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String DATE_DESC_FOOD \u003d \" \" + PREFIX_DATE + VALID_DATE_FOOD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String DATE_DESC_BUS \u003d \" \" + PREFIX_DATE + VALID_DATE_BUS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String TAG_DESC_FOOD \u003d \" \" + PREFIX_TAG + VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String TAG_DESC_TRANSPORT \u003d \" \" + PREFIX_TAG + VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String INVALID_DESCRIPTION_DESC \u003d \" \" + PREFIX_DESCRIPTION + \" \"; // empty string not allowed"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String INVALID_AMOUNT_DESC \u003d \" \" + PREFIX_AMOUNT + \"11a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"24 Jun 2020\"; // not in dd-MM-yyyy format"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"friend*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final EditCommand.EditExpenseDescriptor DESC_FOOD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final EditCommand.EditExpenseDescriptor DESC_BUS;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DESC_FOOD \u003d new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_FOOD)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .withAmount(VALID_AMOUNT_FOOD).withDate(VALID_DATE_FOOD)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .withTag(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DESC_BUS \u003d new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_BUS)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUS).withDate(VALID_DATE_BUS)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the returned {@link CommandResult} matches {@code expectedCommandResult} \u003cbr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandResult expectedCommandResult,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandResult, result);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Convenience wrapper to {@link #assertCommandSuccess(Command, Model, CommandResult, Model)}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * that takes a string {@code expectedMessage}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, actualModel, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * - the expense book, filtered expense list and selected expense in {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBook expectedExpenseBook \u003d new ExpenseBook(actualModel.getExpenseBook());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003cExpense\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(CommandException.class, expectedMessage, () -\u003e command.execute(actualModel));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(expectedExpenseBook, actualModel.getExpenseBook());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(expectedFilteredList, actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * {@code model}\u0027s expense book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static void showExpenseAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense expense \u003d model.getFilteredExpenseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        final String[] splitName \u003d expense.getDescription().fullDescription.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        model.updateFilteredExpenseList(new DescriptionContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(1, model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 49,
      "marcus2k": 2,
      "maxxyh": 3,
      "-": 68,
      "lebencwb": 7
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/DeleteCategoryCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Statistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.Budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "class DeleteCategoryCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void constructor_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new DeleteCategoryCommand(null));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_categoryAcceptedByModel_deleteSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DeleteCategoryCommandTest.ModelStubAcceptingTagDeleted modelStub \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new DeleteCategoryCommandTest.ModelStubAcceptingTagDeleted();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag validTag \u003d new Tag(\"Valid\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        CommandResult commandResult \u003d new DeleteCategoryCommand(validTag).execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(String.format(DeleteCategoryCommand.MESSAGE_SUCCESS, validTag), commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(Arrays.asList(), modelStub.tags);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_invalidTag_throwsCommandException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag validTag \u003d new Tag(\"Valid\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag invalidTag \u003d new Tag(\"Invalid\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DeleteCategoryCommand deleteCategoryCommand \u003d new DeleteCategoryCommand(invalidTag);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DeleteCategoryCommandTest.ModelStub modelStub \u003d new DeleteCategoryCommandTest.ModelStubWithTag(validTag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(CommandException.class, String.format(DeleteCategoryCommand.MESSAGE_INVALID_CATEGORY,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                invalidTag), () -\u003e deleteCategoryCommand.execute(modelStub));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag aTag \u003d new Tag(\"A\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag bTag \u003d new Tag(\"B\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DeleteCategoryCommand deleteACommand \u003d new DeleteCategoryCommand(aTag);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DeleteCategoryCommand deleteBCommand \u003d new DeleteCategoryCommand(bTag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(deleteACommand.equals(deleteACommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DeleteCategoryCommand deleteACopy \u003d new DeleteCategoryCommand(aTag);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(deleteACommand.equals(deleteACopy));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(deleteACommand.equals(1));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(deleteACommand.equals(null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(deleteACommand.equals(deleteBCommand));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setExpenseBook(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cCategoryBudget\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void updateExpenseBookCategory(Tag category) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public Budget getTotalBudget() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public CategoryBudget getCategoryBudget(Tag category) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void topupBudget(Amount amount) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void topupCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean categoryBudgetHasAmount(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void reduceCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void addCategory(Tag tag) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void deleteCategory(Tag tag) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setAlias(AliasEntry prev, AliasEntry curr) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public void sortExpenseList(Comparator\u003cExpense\u003e expenseComparator) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void switchCategory(Tag category) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setAliasMap(AliasMap map) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void addAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public AliasMap getAliasMap() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void deleteAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * A Model stub that contains a single tag."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private class ModelStubWithTag extends DeleteCategoryCommandTest.ModelStub {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        private final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ModelStubWithTag(Tag tag) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.tags.add(tag);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return this.tags.contains(toCheck);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * A Model stub that always accept the expense being deleted."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private class ModelStubAcceptingTagDeleted extends DeleteCategoryCommandTest.ModelStub {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        final ArrayList\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ModelStubAcceptingTagDeleted() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            tags.add(new Tag(\"Valid\"));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            requireNonNull(toCheck);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return tags.stream().anyMatch(toCheck::equals);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void deleteCategory(Tag tag) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            requireNonNull(tag);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            tags.remove(tag);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return new ExpenseBook();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 279,
      "maxxyh": 13,
      "lebencwb": 20
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/DeleteCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        showNoExpense(expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of expense book list"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExpenseBook().getExpenseList().size());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private void showNoExpense(Model model) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        model.updateFilteredExpenseList(p -\u003e false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(model.getFilteredExpenseList().isEmpty());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 31,
      "marcus2k": 14,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/EditCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DESC_BUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DESC_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .withRemark(model.getFilteredExpenseList().get(0).getRemark().toString())"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .build(); // make sure remark starts the same as the other one, since no change to remark"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseBook(model.getExpenseBook()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index indexLastExpense \u003d Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense lastExpense \u003d model.getFilteredExpenseList().get(indexLastExpense.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBuilder expenseInList \u003d new ExpenseBuilder(lastExpense);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense editedExpense \u003d expenseInList.withDescription(VALID_DESCRIPTION_BUS).withAmount(VALID_AMOUNT_BUS)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BUS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUS).withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastExpense, descriptor);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseBook(model.getExpenseBook()),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedModel.setExpense(lastExpense, editedExpense);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, new EditExpenseDescriptor());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense editedExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseBook(model.getExpenseBook()),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense expenseInFilteredList \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(expenseInFilteredList)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BUS).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_BUS).build());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseBook(model.getExpenseBook()),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedModel.setExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_duplicateExpenseUnfilteredList_failure() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(firstExpense).build();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_duplicateExpenseFilteredList_failure() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // edit expense in filtered list into a duplicate in expense book"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense expenseInList \u003d model.getExpenseBook().getExpenseList().get(INDEX_SECOND_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new EditExpenseDescriptorBuilder(expenseInList).build());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_invalidExpenseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BUS).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void execute_sumExpensesTooLarge_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Expense expenseInFilteredList \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(expenseInFilteredList)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                .withAmount(Amount.MAX_VALUE.toPlainString()).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new EditExpenseDescriptorBuilder().withAmount(Amount.MAX_VALUE.toPlainString()).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_SUM_OVER_LIMIT);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * but smaller than size of expense book"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_invalidExpenseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of expense book list"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExpenseBook().getExpenseList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_BUS).build());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, DESC_FOOD);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditExpenseDescriptor copyDescriptor \u003d new EditCommand.EditExpenseDescriptor(DESC_FOOD);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_EXPENSE, copyDescriptor);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_EXPENSE, DESC_FOOD)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_EXPENSE, DESC_BUS)));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 68,
      "marcus2k": 25,
      "maxxyh": 11,
      "-": 88,
      "lebencwb": 2
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/EditExpenseDescriptorTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DESC_BUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DESC_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DATE_BUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class EditExpenseDescriptorTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptorWithSameValues \u003d new EditCommand.EditExpenseDescriptor(DESC_FOOD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(DESC_FOOD.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(DESC_FOOD.equals(DESC_FOOD));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(DESC_FOOD.equals(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(DESC_FOOD.equals(5));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(DESC_FOOD.equals(DESC_BUS));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand.EditExpenseDescriptor editedFood \u003d new EditExpenseDescriptorBuilder(DESC_FOOD)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .withDescription(VALID_DESCRIPTION_BUS).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(DESC_FOOD.equals(editedFood));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        editedFood \u003d new EditExpenseDescriptorBuilder(DESC_FOOD).withAmount(VALID_AMOUNT_BUS).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(DESC_FOOD.equals(editedFood));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        editedFood \u003d new EditExpenseDescriptorBuilder(DESC_FOOD).withDate(VALID_DATE_BUS).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(DESC_FOOD.equals(editedFood));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        editedFood \u003d new EditExpenseDescriptorBuilder(DESC_FOOD).withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(DESC_FOOD.equals(editedFood));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 26,
      "-": 26,
      "lebencwb": 1
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/ExitCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.ExitCommand.MESSAGE_EXIT_ACKNOWLEDGEMENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_exit_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT, false, true,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "                false, false);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ExitCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 5,
      "hakiem526": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/FindCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.PHONE_BILL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.SWEE_CHOON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.ZARA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.DateMatchesPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DateMatchesPredicate firstDatePredicate \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DateMatchesPredicate(Arrays.asList(\"09-08-2020\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DateMatchesPredicate secondDatePredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DateMatchesPredicate(Arrays.asList(\"09-08-2020\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                firstPredicate, firstDatePredicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand("
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                secondPredicate, secondDatePredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                firstPredicate, firstDatePredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void execute_noMatchingKeywords_noExpenseFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DateMatchesPredicate datePredicate \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DateMatchesPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DescriptionContainsKeywordsPredicate namePredicate \u003d preparePredicate(\"CannotBeNotFound\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        FindCommand command \u003d new FindCommand(namePredicate, datePredicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        expectedModel.updateFilteredExpenseList(namePredicate);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false, false, false);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandSuccess(command, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_multipleKeywords_multipleExpensesFound() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DateMatchesPredicate datePredicate \u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DateMatchesPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DescriptionContainsKeywordsPredicate namePredicate \u003d preparePredicate(\"ZARA Phone Swee\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        FindCommand command \u003d new FindCommand(namePredicate, datePredicate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        expectedModel.updateFilteredExpenseList(namePredicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(expectedMessage, false, false, false, false);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandSuccess(command, model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(Arrays.asList(ZARA, PHONE_BILL, SWEE_CHOON), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private DescriptionContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        return new DescriptionContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 13,
      "hakiem526": 2,
      "marcus2k": 45,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/HelpCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        CommandResult expectedCommandResult \u003d new CommandResult(SHOWING_HELP_MESSAGE, true, false, true, false);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, expectedCommandResult, expectedModel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 5,
      "hakiem526": 1,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/ListCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        model \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 5,
      "marcus2k": 10,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/ReduceCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.ExpenseBook.DEFAULT_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.Statistics;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.Budget;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.UniqueCategoryBudgetList;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class ReduceCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void constructor_nullAmount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ReduceCommand(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void execute_nonNegativeAmountReducedFromModel_success() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount validAmount0 \u003d new Amount(\"0\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount validAmount1 \u003d new Amount(\"1\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount validAmount2 \u003d new Amount(\"2\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount validAmount3 \u003d new Amount(\"3\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        modelStub.topupBudget(validAmount3);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CommandResult commandResult0 \u003d new ReduceCommand(validAmount0).execute(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(String.format(ReduceCommand.MESSAGE_SUCCESS, DEFAULT_TAG.tagName, validAmount3),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                commandResult0.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(validAmount3, modelStub.budgets.getAmount());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CommandResult commandResult1 \u003d new ReduceCommand(validAmount1).execute(modelStub);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(String.format(ReduceCommand.MESSAGE_SUCCESS, DEFAULT_TAG.tagName, validAmount2),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                commandResult1.getFeedbackToUser());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(validAmount2, modelStub.budgets.getAmount());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CommandResult commandResult2 \u003d new ReduceCommand(validAmount2).execute(modelStub);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(String.format(ReduceCommand.MESSAGE_SUCCESS, DEFAULT_TAG.tagName, validAmount0),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                commandResult2.getFeedbackToUser());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(validAmount0, modelStub.budgets.getAmount());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CommandResult commandResult3 \u003d new ReduceCommand(validAmount3).execute(modelStub);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(String.format(ReduceCommand.MESSAGE_INSUFFICIENT_BUDGET, DEFAULT_TAG.tagName),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                commandResult3.getFeedbackToUser());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(validAmount0, modelStub.budgets.getAmount());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void execute_negativeAmountReducedFromModel_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ReduceCommand(new Amount(\"-0.01\")).execute(modelStub));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void execute_validAmountReducedFromCategoryBudget_success() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag validTag \u003d new Tag(VALID_TAG_FOOD);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount validAmount1 \u003d new Amount(\"1\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount validAmount2 \u003d new Amount(\"2\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        modelStub.addCategory(validTag);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        modelStub.topupCategoryBudget(validTag, validAmount2);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CommandResult commandResult \u003d new ReduceCommand(validAmount1, validTag).execute(modelStub);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(String.format(ReduceCommand.MESSAGE_SUCCESS, VALID_TAG_FOOD, validAmount1),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(validAmount1, modelStub.budgets.getCategoryBudget(validTag).getAmount());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void execute_validAmountReducedFromNonExistentCategoryBudget_throwsCommandException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ReduceCommand(new Amount(\"1\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                new Tag(VALID_TAG_FOOD)).execute(modelStub));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount toReduceOne \u003d new Amount(\"1\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount toReduceTwo \u003d new Amount(\"2\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ReduceCommand reduceCommandOne \u003d new ReduceCommand(toReduceOne);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ReduceCommand reduceCommandTwo \u003d new ReduceCommand(toReduceTwo);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag foodTag \u003d new Tag(VALID_TAG_FOOD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag transportTag \u003d new Tag(VALID_TAG_TRANSPORT);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ReduceCommand reduceFood \u003d new ReduceCommand(toReduceOne, foodTag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ReduceCommand reduceTransport \u003d new ReduceCommand(toReduceOne, transportTag);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertTrue(reduceCommandOne.equals(reduceCommandOne));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ReduceCommand reduceOneCopy \u003d new ReduceCommand(toReduceOne);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertTrue(reduceCommandOne.equals(reduceOneCopy));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(reduceCommandOne.equals(1));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(reduceCommandOne.equals(null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(reduceCommandOne.equals(reduceCommandTwo));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different categories -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(reduceFood.equals(reduceTransport));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * A Model stub with a budget that can be topped up."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        final UniqueCategoryBudgetList budgets;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        final UniqueTagList tags;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStub() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            budgets \u003d new UniqueCategoryBudgetList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setExpenseBook(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cCategoryBudget\u003e predicate) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void updateExpenseBookCategory(Tag category) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public Budget getTotalBudget() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return budgets;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public CategoryBudget getCategoryBudget(Tag category) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return budgets.getCategoryBudget(category);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void topupBudget(Amount amount) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            budgets.topupBudget(amount);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void topupCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            budgets.topupCategoryBudget(category, amount);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean categoryBudgetHasAmount(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return budgets.categoryBudgetHasAmount(category, amount);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void reduceCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            budgets.reduceCategoryBudget(category, amount);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void addCategory(Tag tag) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tags.add(tag);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            budgets.add(new CategoryBudget(tag));"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void deleteCategory(Tag tag) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return tags.contains(toCheck);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void switchCategory(Tag category) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setAlias(AliasEntry prev, AliasEntry next) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void sortExpenseList(Comparator\u003cExpense\u003e expenseComparator) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setAliasMap(AliasMap map) {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public AliasMap getAliasMap() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void addAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean hasAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void deleteAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 6,
      "lebencwb": 314
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/RemarkCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_REMARK_BUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_REMARK_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class RemarkCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String REMARK_STUB \u003d \"Some remark\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void execute_addRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(firstExpense).withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new Remark(editedExpense.getRemark().value));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseBook(model.getExpenseBook()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedModel.setExpense(firstExpense, editedExpense);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void execute_deleteRemarkUnfilteredList_success() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(firstExpense).withRemark(\"\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new Remark(editedExpense.getRemark().toString()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseBook(model.getExpenseBook()),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedModel.setExpense(firstExpense, editedExpense);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(model.getFilteredExpenseList()"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .get(INDEX_FIRST_EXPENSE.getZeroBased()))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .withRemark(REMARK_STUB).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new Remark(editedExpense.getRemark().value));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new ExpenseBook(model.getExpenseBook()),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedModel.setExpense(firstExpense, editedExpense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_invalidExpenseIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BUS));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * but smaller than size of expense book"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void execute_invalidExpenseIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of expense book list"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getExpenseBook().getExpenseList().size());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(outOfBoundIndex, new Remark(VALID_REMARK_BUS));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        final RemarkCommand standardCommand \u003d new RemarkCommand(INDEX_FIRST_EXPENSE, new Remark(VALID_REMARK_FOOD));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        RemarkCommand commandWithSameValues \u003d new RemarkCommand(INDEX_FIRST_EXPENSE, new Remark(VALID_REMARK_FOOD));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_SECOND_EXPENSE, new Remark(VALID_REMARK_FOOD))));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(standardCommand.equals(new RemarkCommand(INDEX_FIRST_EXPENSE, new Remark(VALID_REMARK_BUS))));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 46,
      "marcus2k": 20,
      "lebencwb": 73
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/ResetAliasCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.Statistics;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.budget.Budget;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.budget.exceptions.CategoryBudgetNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class ResetAliasCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void execute_nullObject_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new ResetAliasCommand().execute(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void execute_emptyAliasMap_throwsCommandException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        ModelStubWithAliasMap modelStub \u003d new ModelStubWithAliasMap();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        modelStub.getAliasMap().removeAllAliases();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new ResetAliasCommand().execute(modelStub));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void execute_nonEmptyAliasMap_aliasMapBecomesEmpty() throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        ModelStubWithAliasMap modelStub \u003d new ModelStubWithAliasMap();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        new ResetAliasCommand().execute(modelStub);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertTrue(modelStub.getAliasMap().isEmpty());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void equals_anyTwoResetAliasCommand_true() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertEquals(new ResetAliasCommand(), new ResetAliasCommand());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private class ModelStubWithAliasMap implements Model {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        private AliasMap am;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        ModelStubWithAliasMap() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            am \u003d new AliasMap();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            am.addAlias(new AliasEntry(\"get\", \"find\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            am.addAlias(new AliasEntry(\"d\", \"delete\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setExpenseBook(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public CategoryBudget getCategoryBudget(Tag category) throws CategoryBudgetNotFoundException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cCategoryBudget\u003e predicate) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void updateExpenseBookCategory(Tag category) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public Budget getTotalBudget() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void topupBudget(Amount amount) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void topupCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean categoryBudgetHasAmount(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void reduceCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void addCategory(Tag tag) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void deleteCategory(Tag tag) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setAlias(AliasEntry prev, AliasEntry curr) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            this.am.setAlias(prev, curr);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void sortExpenseList(Comparator\u003cExpense\u003e expenseComparator) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void switchCategory(Tag category) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setAliasMap(AliasMap map) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            this.am \u003d new AliasMap(map);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void addAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            this.am.addAlias(entry);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public AliasMap getAliasMap() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return this.am;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public boolean hasAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            return this.am.hasAlias(entry);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void deleteAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            this.am.removeAlias(entry);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 225,
      "maxxyh": 5,
      "lebencwb": 10
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/SortCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.AmountComparator;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.DateComparator;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.DateMatchesPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.DescriptionComparator;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SortCommand}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class SortCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void constructor_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SwitchCommand(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void execute_singleKeyword_sortedExpenses() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        DateComparator dateComparator \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new DateComparator(false, false, -1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        AmountComparator amountComparator \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new AmountComparator(false, false, -1);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        DescriptionComparator descriptionComparator \u003d new DescriptionComparator(true, true, 0);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, \"[\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                + descriptionComparator.toString() + \"]\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        SortCommand command \u003d new SortCommand(dateComparator, amountComparator, descriptionComparator);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        expectedModel.sortExpenseList(descriptionComparator.reversed());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedModel.getFilteredExpenseList().size(); i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            assertEquals(expectedModel.getFilteredExpenseList().get(i), model.getFilteredExpenseList().get(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void execute_multipleKeywords_expensesSortedByPriority() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        DateComparator dateComparator \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new DateComparator(true, false, 0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        AmountComparator amountComparator \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new AmountComparator(false, false, -1);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        DescriptionComparator descriptionComparator \u003d new DescriptionComparator(true, true, 1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                \"[\" + dateComparator.toString() + \", \" + descriptionComparator.toString() + \"]\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        SortCommand command \u003d new SortCommand(dateComparator, amountComparator, descriptionComparator);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        expectedModel.sortExpenseList(dateComparator.thenComparing(descriptionComparator.reversed()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedModel.getFilteredExpenseList().size(); i++) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            assertEquals(expectedModel.getFilteredExpenseList().get(i), model.getFilteredExpenseList().get(i));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void execute_singleKeywordAfterFilter_sortedFilteredExpenses() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        model.updateFilteredExpenseList(new DateMatchesPredicate(Collections.singletonList(\"29-06-2020\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        expectedModel.updateFilteredExpenseList(new DateMatchesPredicate(Collections.singletonList(\"29-06-2020\")));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        DateComparator dateComparator \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new DateComparator(false, false, -1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        AmountComparator amountComparator \u003d"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new AmountComparator(false, false, -1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        DescriptionComparator descriptionComparator \u003d new DescriptionComparator(true, true, 0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String expectedMessage \u003d String.format(SortCommand.MESSAGE_SUCCESS, \"[\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                + descriptionComparator.toString() + \"]\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        SortCommand command \u003d new SortCommand(dateComparator, amountComparator, descriptionComparator);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        expectedModel.sortExpenseList(descriptionComparator.reversed());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertCommandSuccess(command, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedModel.getFilteredExpenseList().size(); i++) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            assertEquals(expectedModel.getFilteredExpenseList().get(i), model.getFilteredExpenseList().get(i));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 86
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/SwitchCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Statistics;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.Budget;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SwitchCommand}."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "class SwitchCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void constructor_nullTag_throwsNullPointerException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new SwitchCommand(null));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void execute_noMatchingKeywords_noCategoryFound() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag foodTag \u003d new Tag(\"Potato\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        SwitchCommand command \u003d new SwitchCommand(foodTag);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(CommandException.class, String.format(SwitchCommand.MESSAGE_INVALID_CATEGORY,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            foodTag), () -\u003e command.execute(modelStub));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag foodTag \u003d new Tag(VALID_TAG_FOOD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag transportTag \u003d new Tag(VALID_TAG_TRANSPORT);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        SwitchCommand switchFirstCommand \u003d new SwitchCommand(foodTag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        SwitchCommand switchSecondCommand \u003d new SwitchCommand(transportTag);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(switchFirstCommand.equals(switchFirstCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        SwitchCommand switchFirstCommandCopy \u003d new SwitchCommand(foodTag);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(switchFirstCommand.equals(switchFirstCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(switchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(switchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(switchFirstCommand.equals(switchSecondCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * A Model stub with a budget that can be topped up."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        final ExpenseBook expenseBook;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ModelStub() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            expenseBook \u003d new ExpenseBook(getTypicalExpenseBook());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setExpenseBook(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            expenseBook.updateFilteredExpenses(predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cCategoryBudget\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            requireNonNull(predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            expenseBook.updateFilteredBudgets(predicate);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void updateExpenseBookCategory(Tag category) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            requireNonNull(category);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (category.equals(ExpenseBook.DEFAULT_TAG)) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                updateFilteredBudgetList(PREDICATE_SHOW_ALL_BUDGETS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                updateFilteredBudgetList(budget -\u003e budget.getTag().equals(category));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                updateFilteredExpenseList(expense -\u003e expense.getTag().equals(category));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public Budget getTotalBudget() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public CategoryBudget getCategoryBudget(Tag category) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void topupBudget(Amount amount) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void topupCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean categoryBudgetHasAmount(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void reduceCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void addCategory(Tag tag) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void deleteCategory(Tag tag) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return expenseBook.containsCategory(toCheck);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void switchCategory(Tag category) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            requireNonNull(category);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            if (hasCategory(category)) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                updateExpenseBookCategory(category);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setAlias(AliasEntry prev, AliasEntry next) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public void sortExpenseList(Comparator\u003cExpense\u003e expenseComparator) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setAliasMap(AliasMap map) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public AliasMap getAliasMap() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void addAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void deleteAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 238,
      "maxxyh": 11,
      "lebencwb": 27
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/commands/TopupCommandTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.ExpenseBook.DEFAULT_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyUserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Statistics;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasEntry;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.Budget;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.UniqueCategoryBudgetList;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class TopupCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void constructor_nullAmount_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TopupCommand(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void execute_nonNegativeAmountAddedToModel_success() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount validAmount0 \u003d new Amount(\"0\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CommandResult commandResult0 \u003d new TopupCommand(validAmount0).execute(modelStub);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(String.format(TopupCommand.MESSAGE_SUCCESS, DEFAULT_TAG.tagName, validAmount0),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                commandResult0.getFeedbackToUser());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(validAmount0, modelStub.budgets.getAmount());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount validAmount1 \u003d new Amount(\"1\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CommandResult commandResult1 \u003d new TopupCommand(validAmount1).execute(modelStub);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(String.format(TopupCommand.MESSAGE_SUCCESS, DEFAULT_TAG.tagName, validAmount1),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                commandResult1.getFeedbackToUser());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(validAmount1, modelStub.budgets.getAmount());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void execute_negativeAmountAddedToModel_throwsCommandException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new TopupCommand(new Amount(\"-0.01\")).execute(modelStub));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void execute_validAmountAddedToCategoryBudget_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag validTag \u003d new Tag(VALID_TAG_FOOD);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount validAmount \u003d new Amount(\"1\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        modelStub.addCategory(validTag);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CommandResult commandResult \u003d new TopupCommand(validAmount, validTag).execute(modelStub);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(String.format(TopupCommand.MESSAGE_SUCCESS, VALID_TAG_FOOD, validAmount),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                commandResult.getFeedbackToUser());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(validAmount, modelStub.budgets.getCategoryBudget(validTag).getAmount());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void execute_validAmountAddedToNonExistentCategoryBudget_throwsCommandException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStub modelStub \u003d new ModelStub();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertThrows(CommandException.class, () -\u003e new TopupCommand(new Amount(\"1\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                new Tag(VALID_TAG_FOOD)).execute(modelStub));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void execute_sumExpensesTooLarge_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Amount largeAmount \u003d new Amount(Amount.MAX_VALUE.toPlainString());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        TopupCommand topupCommand \u003d new TopupCommand(largeAmount);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalExpenseBook(), new UserPrefs(), new AliasMap());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        model.topupBudget(new Amount(\"1\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertCommandFailure(topupCommand, model, TopupCommand.MESSAGE_SUM_OVER_LIMIT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount toAddOne \u003d new Amount(\"1\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount toAddTwo \u003d new Amount(\"2\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        TopupCommand topupCommandOne \u003d new TopupCommand(toAddOne);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        TopupCommand topupCommandTwo \u003d new TopupCommand(toAddTwo);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag foodTag \u003d new Tag(VALID_TAG_FOOD);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag transportTag \u003d new Tag(VALID_TAG_TRANSPORT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        TopupCommand topupFood \u003d new TopupCommand(toAddOne, foodTag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        TopupCommand topupTransport \u003d new TopupCommand(toAddOne, transportTag);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertTrue(topupCommandOne.equals(topupCommandOne));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        TopupCommand topupOneCopy \u003d new TopupCommand(toAddOne);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertTrue(topupCommandOne.equals(topupOneCopy));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(topupCommandOne.equals(1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(topupCommandOne.equals(null));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(topupCommandOne.equals(topupCommandTwo));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different categories -\u003e return false"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(topupFood.equals(topupTransport));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * A Model stub with a budget that can be topped up."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        final UniqueCategoryBudgetList budgets;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        final UniqueTagList tags;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ModelStub() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            budgets \u003d new UniqueCategoryBudgetList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setUserPrefs(ReadOnlyUserPrefs userPrefs) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public ReadOnlyUserPrefs getUserPrefs() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setGuiSettings(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public Path getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setExpenseBookFilePath(Path expenseBookFilePath) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void addExpense(Expense expense) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void setExpenseBook(ReadOnlyExpenseBook newData) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ReadOnlyExpenseBook getExpenseBook() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public Statistics getStatistics() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void updateFilteredBudgetList(Predicate\u003cCategoryBudget\u003e predicate) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void updateExpenseBookCategory(Tag category) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public Budget getTotalBudget() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return budgets;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public CategoryBudget getCategoryBudget(Tag category) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return budgets.getCategoryBudget(category);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void topupBudget(Amount amount) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            budgets.topupBudget(amount);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void topupCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            budgets.topupCategoryBudget(category, amount);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public boolean categoryBudgetHasAmount(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void reduceCategoryBudget(Tag category, Amount amount) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public void addCategory(Tag tag) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            tags.add(tag);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            budgets.add(new CategoryBudget(tag));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void deleteCategory(Tag tag) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public boolean hasCategory(Tag toCheck) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return tags.contains(toCheck);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public void switchCategory(Tag category) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setAlias(AliasEntry prev, AliasEntry next) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public void sortExpenseList(Comparator\u003cExpense\u003e expenseComparator) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void setAliasMap(AliasMap map) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public AliasMap getAliasMap() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void addAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public boolean hasAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        public void deleteAlias(AliasEntry entry) {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 45,
      "marcus2k": 32,
      "maxxyh": 25,
      "lebencwb": 216
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/AddCategoryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.AddCategoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class AddCategoryCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private AddCategoryCommandParser parser \u003d new AddCategoryCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_validTagFieldPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_FOOD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_FOOD, new AddCategoryCommand(expectedTag));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_tagFieldMissing_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCategoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_FOOD, expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_invalidTag_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseFailure(parser, INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_nonEmptyPreamble_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TAG_DESC_FOOD,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 44
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/AddCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.AMOUNT_DESC_FOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.AMOUNT_DESC_MISC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DATE_DESC_BUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DATE_DESC_FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DESCRIPTION_DESC_BUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DESCRIPTION_DESC_FOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DESCRIPTION_DESC_MISC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.TAG_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BUS;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.BUS;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.MISC;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.LocalDate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Description;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(BUS).withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + DESCRIPTION_DESC_BUS + AMOUNT_DESC_BUS + DATE_DESC_BUS"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + TAG_DESC_TRANSPORT, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // multiple descriptions - last descriptions accepted"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_FOOD + DESCRIPTION_DESC_BUS + AMOUNT_DESC_BUS + DATE_DESC_BUS"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + TAG_DESC_TRANSPORT, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // multiple amounts - last amount accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_BUS + AMOUNT_DESC_FOOD + AMOUNT_DESC_BUS + DATE_DESC_BUS"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + TAG_DESC_TRANSPORT, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // multiple dates - last date accepted"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_BUS + AMOUNT_DESC_BUS + DATE_DESC_FOOD + DATE_DESC_BUS"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + TAG_DESC_TRANSPORT, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // multiple tags - last tag accepted"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_BUS + AMOUNT_DESC_BUS + DATE_DESC_BUS"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                + TAG_DESC_FOOD + TAG_DESC_TRANSPORT, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(MISC).withDate(LocalDate.now()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                .format(DateTimeFormatter.ofPattern(\"dd-MM-yyyy\"))).build(); // date set to today."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseSuccess(parser, DESCRIPTION_DESC_MISC + AMOUNT_DESC_MISC,"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_BUS + AMOUNT_DESC_BUS,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_BUS + VALID_AMOUNT_BUS,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_BUS + VALID_AMOUNT_BUS,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // invalid description"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + AMOUNT_DESC_BUS"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + TAG_DESC_FOOD + TAG_DESC_TRANSPORT, Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // invalid amount"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_BUS + INVALID_AMOUNT_DESC"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + TAG_DESC_FOOD + TAG_DESC_TRANSPORT, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_BUS + AMOUNT_DESC_BUS + INVALID_DATE_DESC"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + TAG_DESC_FOOD + TAG_DESC_TRANSPORT, Date.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, DESCRIPTION_DESC_BUS + AMOUNT_DESC_BUS"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FOOD, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseFailure(parser, INVALID_DESCRIPTION_DESC + AMOUNT_DESC_BUS + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + DESCRIPTION_DESC_BUS + AMOUNT_DESC_BUS"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + TAG_DESC_FOOD + TAG_DESC_TRANSPORT,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 61,
      "maxxyh": 6,
      "-": 47,
      "lebencwb": 9
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/AliasCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.AliasCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class AliasCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private AliasCommandParser parser \u003d new AliasCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void parse_tooManyArguments_throwParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertParseFailure(parser, \"A B     C\", expectedMessage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AliasCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        // missing description prefix"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertParseFailure(parser, \"find\", expectedMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        // missing amount prefix"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertParseFailure(parser, \"get\", expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertParseFailure(parser, \"chow\", expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void parse_twoWords_success() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        // parse-able does not guarantee executable"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertParseSuccess(parser, \"abc def\", new AliasCommand(\"abc\", \"def\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 40
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/ArgumentTokenizerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizerTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix unknownPrefix \u003d new Prefix(\"--u\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix pSlash \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix dashT \u003d new Prefix(\"-t\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Prefix hatQ \u003d new Prefix(\"^Q\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_emptyArgsString_noValues() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreamblePresent(ArgumentMultimap argMultimap, String expectedPreamble) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPreamble, argMultimap.getPreamble());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreambleEmpty(ArgumentMultimap argMultimap) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(argMultimap.getPreamble().isEmpty());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts all the arguments in {@code argMultimap} with {@code prefix} match the {@code expectedValues}"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * and only the last value is returned upon calling {@code ArgumentMultimap#getValue(Prefix)}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentPresent(ArgumentMultimap argMultimap, Prefix prefix, String... expectedValues) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the last value is returned"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues[expectedValues.length - 1], argMultimap.getValue(prefix).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify the number of values returned is as expected"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedValues.length, argMultimap.getAllValues(prefix).size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // Verify all values returned are as expected and in order"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c expectedValues.length; i++) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedValues[i], argMultimap.getAllValues(prefix).get(i));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertArgumentAbsent(ArgumentMultimap argMultimap, Prefix prefix) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(argMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_noPrefixes_allTakenAsPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  some random string /t tag with leading and trailing spaces \";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // Same string expected as preamble, but leading/trailing spaces should be trimmed"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString.trim());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_oneArgument() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // Preamble present"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"  Some preamble string p/ Argument value \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Some preamble string\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No preamble"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \" p/   Argument value \";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"Argument value\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArguments() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only two arguments are present"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // All three arguments are present"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"Different Preamble String ^Q111 -t dashT-Value p/pSlash value\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"Different Preamble String\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"111\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: Reusing of the tokenizer multiple times */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // Reuse tokenizer on an empty string to ensure ArgumentMultimap is correctly reset"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // (i.e. no stale values from the previous tokenizing remain)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d \"\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreambleEmpty(argMultimap);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Also covers: testing for prefixes not specified as a prefix */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prefixes not previously given to the tokenizer should not return any values"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        argsString \u003d unknownPrefix + \"some value\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, unknownPrefix);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, argsString); // Unknown prefix is taken as part of preamble"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsWithRepeats() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // Two arguments repeated, some have empty values"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleString -t dashT-Value ^Q ^Q -t another dashT value p/ pSlash value -t\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleString\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, pSlash, \"pSlash value\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"dashT-Value\", \"another dashT value\", \"\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, hatQ, \"\", \"\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tokenize_multipleArgumentsJoined() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        String argsString \u003d \"SomePreambleStringp/ pSlash joined-tjoined -t not joined^Qjoined\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(argsString, pSlash, dashT, hatQ);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreamblePresent(argMultimap, \"SomePreambleStringp/ pSlash joined-tjoined\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, pSlash);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentPresent(argMultimap, dashT, \"not joined^Qjoined\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertArgumentAbsent(argMultimap, hatQ);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix aaa \u003d new Prefix(\"aaa\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, aaa);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(aaa, new Prefix(\"aaa\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, \"aaa\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(aaa, new Prefix(\"aab\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 149
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/CommandParserTestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 35
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/DeleteCategoryCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class DeleteCategoryCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private DeleteCategoryCommandParser parser \u003d new DeleteCategoryCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void parse_validTagFieldPresent_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_FOOD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseSuccess(parser, TAG_DESC_FOOD, new DeleteCategoryCommand(expectedTag));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void parse_tagFieldMissing_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCategoryCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, VALID_TAG_FOOD, expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void parse_invalidTag_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void parse_nonEmptyPreamble_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TAG_DESC_FOOD,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 44
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/DeleteCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 7,
      "-": 25
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/EditCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.AMOUNT_DESC_FOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DATE_DESC_BUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DATE_DESC_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.DESCRIPTION_DESC_FOOD;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.INVALID_AMOUNT_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.INVALID_DESCRIPTION_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.TAG_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_AMOUNT_FOOD;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DATE_BUS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DATE_FOOD;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DESCRIPTION_FOOD;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Date;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Description;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private final EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, VALID_DESCRIPTION_FOOD, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, \"-5\" + DESCRIPTION_DESC_FOOD, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, \"0\" + DESCRIPTION_DESC_FOOD, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DESCRIPTION_DESC, Description.MESSAGE_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_DATE_DESC, Date.MESSAGE_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // invalid amount followed by valid date"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_AMOUNT_DESC + DATE_DESC_FOOD, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // valid amount followed by invalid amount. The test case for invalid amount followed by valid amount"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, \"1\" + AMOUNT_DESC_BUS + INVALID_AMOUNT_DESC, Amount.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                \"1\" + INVALID_DESCRIPTION_DESC + INVALID_DATE_DESC + VALID_AMOUNT_FOOD,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                Description.MESSAGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_BUS + TAG_DESC_FOOD"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + DATE_DESC_FOOD + DESCRIPTION_DESC_FOOD + TAG_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_FOOD)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUS).withDate(VALID_DATE_FOOD)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_BUS + DATE_DESC_FOOD;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_BUS)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .withDate(VALID_DATE_FOOD).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // description"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + DESCRIPTION_DESC_FOOD;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new EditExpenseDescriptorBuilder().withDescription(VALID_DESCRIPTION_FOOD).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // amount"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_FOOD;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_FOOD).build();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // date"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_FOOD;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withDate(VALID_DATE_FOOD).build();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_TRANSPORT;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + AMOUNT_DESC_FOOD + DATE_DESC_FOOD"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + TAG_DESC_TRANSPORT + AMOUNT_DESC_FOOD + DATE_DESC_FOOD + TAG_DESC_TRANSPORT"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + AMOUNT_DESC_BUS + DATE_DESC_BUS + TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_BUS)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .withDate(VALID_DATE_BUS).withTag(VALID_TAG_FOOD)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_AMOUNT_DESC + AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_BUS).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + DATE_DESC_BUS + INVALID_AMOUNT_DESC"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + AMOUNT_DESC_BUS;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withAmount(VALID_AMOUNT_BUS).withDate(VALID_DATE_BUS)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_resetTags_success() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withTag(\"\").build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 76,
      "maxxyh": 6,
      "-": 105,
      "lebencwb": 6
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/ExpenseBookParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.AddCategoryCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.DeleteCategoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.DateMatchesPredicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Remark;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.testutil.CategoryUtil;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseUtil;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ExpenseBookParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final ExpenseBookParser parser \u003d new ExpenseBookParser();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ExpenseUtil.getAddCommand(expense));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(new AddCommand(expense), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + INDEX_FIRST_EXPENSE.getOneBased() + \" \" + ExpenseUtil.getEditExpenseDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_EXPENSE, descriptor), command);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        String dateString \u003d \"09-10-2020\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        List\u003cString\u003e dateStrings \u003d Arrays.asList(dateString);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        List\u003cString\u003e hs \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        hs.add(\"CS\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        hs.add(\"bee\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_DESCRIPTION + \" \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                        + keywords.stream().collect(Collectors.joining(\" \"))"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                        + \" \" + PREFIX_DATE + dateString + \" \""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(keywords),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DateMatchesPredicate(dateStrings));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertEquals(findCommand, command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parseCommand_remark() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        final Remark remark \u003d new Remark(\"Some remark.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                + INDEX_FIRST_EXPENSE.getOneBased() + \" \" + PREFIX_REMARK + remark.value);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(new RemarkCommand(INDEX_FIRST_EXPENSE, remark), command);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parseCommand_addCat() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag tag \u003d new Tag(VALID_TAG_FOOD);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        AddCategoryCommand command \u003d (AddCategoryCommand) parser.parseCommand(CategoryUtil.getAddCategoryCommand(tag));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(new AddCategoryCommand(tag), command);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void parseCommand_deleteCat() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag tag \u003d new Tag(VALID_TAG_FOOD);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        DeleteCategoryCommand command \u003d (DeleteCategoryCommand) parser.parseCommand("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            DeleteCategoryCommand.COMMAND_WORD + \" \" + PREFIX_TAG + \"Food\""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(new DeleteCategoryCommand(tag), command);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void parseCommand_switch() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag foodTag \u003d new Tag(\"Food\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        SwitchCommand command \u003d (SwitchCommand) parser.parseCommand("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            SwitchCommand.COMMAND_WORD + \" \" + PREFIX_TAG + \"Food\""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        );"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        SwitchCommand switchCommand \u003d new SwitchCommand(foodTag);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(switchCommand, command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE), ()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e parser.parseCommand(\"\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_UNKNOWN_COMMAND, () -\u003e parser.parseCommand(\"unknownCommand\"));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 61,
      "marcus2k": 17,
      "-": 62,
      "lebencwb": 16
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/FindCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.DateMatchesPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.expense.DescriptionContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void parse_emptyKeyword_throwsParseException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DESCRIPTION,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommandParser.MISSING_ARGUMENTS));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void parse_emptyDate_throwsParseException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_DATE,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommandParser.MISSING_ARGUMENTS));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        FindCommand expectedFindCommand \u003d new FindCommand("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DateMatchesPredicate(Arrays.asList(\"07-09-2020\"))"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        );"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        String x \u003d \" \" + PREFIX_DESCRIPTION + \"Alice Bob \" + PREFIX_DATE + \" 07-09-2020 \";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertParseSuccess(parser, x, expectedFindCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 8,
      "marcus2k": 23,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/ParserUtilTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Description;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"+3a\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String INVALID_DATE \u003d \"23 June 2020\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d \"Lunch Bak Chor Mee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String VALID_AMOUNT \u003d \"3.00\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String VALID_DATE \u003d \"04-10-2020\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String VALID_TAG_FRIEND \u003d \"Friend\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String VALID_TAG_FOOD \u003d \"Food\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseIndex(\"10 a\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, MESSAGE_INVALID_INDEX, ()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            -\u003e ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDescription((String) null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDescription(INVALID_DESCRIPTION));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(VALID_DESCRIPTION));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_DESCRIPTION + WHITESPACE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Description expectedDescription \u003d new Description(VALID_DESCRIPTION);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertEquals(expectedDescription, ParserUtil.parseDescription(nameWithWhitespace));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parseAmount_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAmount((String) null));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parseAmount_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseAmount(INVALID_AMOUNT));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parseAmount_validValueWithoutWhitespace_returnsAmount() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(VALID_AMOUNT));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parseAmount_validValueWithWhitespace_returnsTrimmedAmount() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_AMOUNT + WHITESPACE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Amount expectedAmount \u003d new Amount(VALID_AMOUNT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertEquals(expectedAmount, ParserUtil.parseAmount(phoneWithWhitespace));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parseDate_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseDate((String) null));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parseDate_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseDate(INVALID_DATE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parseDate_validValueWithoutWhitespace_returnsDate() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(VALID_DATE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parseDate_validValueWithWhitespace_returnsTrimmedDate() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_DATE + WHITESPACE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        Date expectedDate \u003d new Date(VALID_DATE);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertEquals(expectedDate, ParserUtil.parseDate(emailWithWhitespace));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTag(null));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTag(INVALID_TAG));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_FRIEND);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_FRIEND));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_FRIEND + WHITESPACE;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_FRIEND);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseTags(null));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(ParseException.class, () -\u003e ParserUtil.parseTags(Arrays.asList(VALID_TAG_FRIEND, INVALID_TAG)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_FRIEND, VALID_TAG_FOOD));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_FRIEND), new Tag(VALID_TAG_FOOD)));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 20,
      "maxxyh": 35,
      "-": 115
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/ReduceCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.ReduceCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "class ReduceCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, ReduceCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final ReduceCommandParser parser \u003d new ReduceCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void parse_validValue_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String amount \u003d \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_AMOUNT + amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ReduceCommand expectedCommand \u003d new ReduceCommand(new Amount(amount));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String userInput2 \u003d \" \" + PREFIX_AMOUNT + amount + TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ReduceCommand expectedCommand2 \u003d new ReduceCommand(new Amount(amount), new Tag(VALID_TAG_FOOD));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseSuccess(parser, userInput2, expectedCommand2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_AMOUNT + \"one\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void parse_missingAmountValue_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseFailure(parser, \" \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 46
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/RemarkCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class RemarkCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private RemarkCommandParser parser \u003d new RemarkCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final String nonEmptyRemark \u003d \"Some remark.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_indexSpecified_success() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // have remark"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK + nonEmptyRemark;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        RemarkCommand expectedCommand \u003d new RemarkCommand(INDEX_FIRST_EXPENSE, new Remark(nonEmptyRemark));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // no remark"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedCommand \u003d new RemarkCommand(INDEX_FIRST_EXPENSE, new Remark(\"\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void parse_missingCompulsoryField_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // no parameters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseFailure(parser, RemarkCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // no index"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseFailure(parser, RemarkCommand.COMMAND_WORD + \" \" + nonEmptyRemark, expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 12,
      "lebencwb": 32
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/ResetAliasCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.logic.commands.ResetAliasCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "public class ResetAliasCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    private ResetAliasCommandParser parser \u003d new ResetAliasCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void parse_nonEmptyArguments_throwParseException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                MESSAGE_INVALID_COMMAND_FORMAT, ResetAliasCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertParseFailure(parser, \"AC\", expectedMessage);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marcus2k"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    public void parse_emptyArguments_success() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertParseSuccess(parser, \"\", new ResetAliasCommand());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "marcus2k": 25
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/SortCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.logic.commands.SortCommand.REVERSE_KEYWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_SORT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.logic.commands.SortCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.AmountComparator;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.DateComparator;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.DescriptionComparator;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class SortCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private SortCommandParser parser \u003d new SortCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parse_emptyKeyword_throwsParseException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_SORT,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parse_invalidKeyword_throwsParseException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_SORT + \"dezzcription\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parse_nonEmptyPreamble_throwsParseException() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertParseFailure(parser, \"please \" + PREFIX_SORT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parse_singleKeyword_oneSuccess() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_SORT + DescriptionComparator.SORT_KEYWORD + REVERSE_KEYWORD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        DateComparator dateComparator \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new DateComparator(false, false, -1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        AmountComparator amountComparator \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new AmountComparator(false, false, -1);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        DescriptionComparator descriptionComparator \u003d new DescriptionComparator(true, true, 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        SortCommand expectedCommand \u003d new SortCommand(descriptionComparator);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void parse_multipleKeywords_multipleSuccess() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_SORT + DescriptionComparator.SORT_KEYWORD"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                + REVERSE_KEYWORD + \" \" + PREFIX_SORT + AmountComparator.SORT_KEYWORD;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        DateComparator dateComparator \u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new DateComparator(false, false, -1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        DescriptionComparator descriptionComparator \u003d new DescriptionComparator(true, true, 0);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        AmountComparator amountComparator \u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                new AmountComparator(true, false, 1);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        SortCommand expectedCommand \u003d new SortCommand(descriptionComparator, amountComparator);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "maxxyh": 68
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/SwitchCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.SwitchCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "class SwitchCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String.format(MESSAGE_INVALID_COMMAND_FORMAT, SwitchCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final SwitchCommandParser parser \u003d new SwitchCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void parse_validValue_success() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String category \u003d \"Food\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_TAG + category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        SwitchCommand expectedCommand \u003d new SwitchCommand(new Tag(category));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertParseFailure(parser, \" \" + \"Food\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 33
    }
  },
  {
    "path": "src/test/java/seedu/expense/logic/parser/TopupCommandParserTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.TopupCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "class TopupCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, TopupCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private final TopupCommandParser parser \u003d new TopupCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void parse_validValue_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String amount \u003d \"1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String userInput \u003d \" \" + PREFIX_AMOUNT + amount;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        TopupCommand expectedCommand \u003d new TopupCommand(new Amount(amount));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String userInput2 \u003d \" \" + PREFIX_AMOUNT + amount + TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        TopupCommand expectedCommand2 \u003d new TopupCommand(new Amount(amount), new Tag(VALID_TAG_FOOD));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseSuccess(parser, userInput2, expectedCommand2);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_AMOUNT + \"one\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void parse_missingAmountValue_failure() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertParseFailure(parser, \" \", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 7,
      "lebencwb": 39
    }
  },
  {
    "path": "src/test/java/seedu/expense/model/ExpenseBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.FEL_BDAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.UniqueCategoryBudgetList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ExpenseBookTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final ExpenseBook expenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(Collections.emptyList(), expenseBook.getExpenseList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseBook.resetData(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void resetData_withValidReadOnlyExpenseBook_replacesData() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBook newData \u003d getTypicalExpenseBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBook.resetData(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(newData, expenseBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void resetData_withDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // Two expenses with the same identity fields"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(FEL_BDAY).withTag(VALID_TAG_TRANSPORT)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003cExpense\u003e newExpenses \u003d Arrays.asList(FEL_BDAY, editedAlice);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBookStub newData \u003d new ExpenseBookStub(newExpenses);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e expenseBook.resetData(newData));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e expenseBook.hasExpense(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void hasExpense_expenseNotInExpenseBook_returnsFalse() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(expenseBook.hasExpense(FEL_BDAY));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void hasExpense_expenseInExpenseBook_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        expenseBook.addCategory(FEL_BDAY.getTag());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBook.addExpense(FEL_BDAY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(expenseBook.hasExpense(FEL_BDAY));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void hasExpense_expenseWithSameIdentityFieldsInExpenseBook_returnsTrue() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        expenseBook.addCategory(FEL_BDAY.getTag());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBook.addExpense(FEL_BDAY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        expenseBook.addCategory(new Tag(VALID_TAG_TRANSPORT));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(FEL_BDAY).withTag(VALID_TAG_TRANSPORT)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(expenseBook.hasExpense(editedAlice));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void getExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e expenseBook.getExpenseList().remove(0));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void getBudgetList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e expenseBook.getBudgetList().remove(0));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * A stub ReadOnlyExpenseBook whose expenses list can violate interface constraints."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static class ExpenseBookStub implements ReadOnlyExpenseBook, Statistics {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        private final ObservableList\u003cTag\u003e categories \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        private final UniqueCategoryBudgetList budgets \u003d new UniqueCategoryBudgetList();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBookStub(Collection\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            this.expenses.setAll(expenses);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public ObservableList\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return categories;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return expenses;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        public ObservableList\u003cCategoryBudget\u003e getBudgetList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            return budgets.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        public UniqueCategoryBudgetList getBudgets() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            return budgets;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Amount tallyExpenses() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Amount tallyBudgets() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        public Amount tallyBalance() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "hakiem526"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        public String getBudgetBarLabel() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "hakiem526"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 57,
      "hakiem526": 5,
      "maxxyh": 13,
      "-": 59,
      "lebencwb": 17
    }
  },
  {
    "path": "src/test/java/seedu/expense/model/ModelManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.FEL_BDAY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.GRAB_HOME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import seedu.expense.model.alias.AliasMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseBookBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ModelManager modelManager \u003d new ModelManager();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new GuiSettings(), modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(new ExpenseBook(), new ExpenseBook(modelManager.getExpenseBook()));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_nullUserPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setUserPrefs(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefs_validUserPrefs_copiesUserPrefs() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        userPrefs.setExpenseBookFilePath(Paths.get(\"expense/book/file/path\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1, 2, 3, 4));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(userPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Modifying userPrefs should not modify modelManager\u0027s userPrefs"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs oldUserPrefs \u003d new UserPrefs(userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        userPrefs.setExpenseBookFilePath(Paths.get(\"new/expense/book/file/path\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(oldUserPrefs, modelManager.getUserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setGuiSettings(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_validGuiSettings_setsGuiSettings() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        GuiSettings guiSettings \u003d new GuiSettings(1, 2, 3, 4);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager.setGuiSettings(guiSettings);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(guiSettings, modelManager.getGuiSettings());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenseBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.setExpenseBookFilePath(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenseBookFilePath_validPath_setsExpenseBookFilePath() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Path path \u003d Paths.get(\"expense/book/file/path\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        modelManager.setExpenseBookFilePath(path);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(path, modelManager.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e modelManager.hasExpense(null));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void hasExpense_expenseNotInExpenseBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(modelManager.hasExpense(FEL_BDAY));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void hasExpense_expenseInExpenseBook_returnsTrue() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        modelManager.addCategory(FEL_BDAY.getTag());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        modelManager.addExpense(FEL_BDAY);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(modelManager.hasExpense(FEL_BDAY));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, () -\u003e modelManager.getFilteredExpenseList().remove(0));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBook expenseBook \u003d new ExpenseBookBuilder().withExpense(FEL_BDAY).withExpense(GRAB_HOME).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBook differentExpenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        AliasMap aliasMap \u003d new AliasMap();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        modelManager \u003d new ModelManager(expenseBook, userPrefs, aliasMap);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(expenseBook, userPrefs, aliasMap);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different expenseBook -\u003e returns false"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentExpenseBook, userPrefs, aliasMap)));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        modelManager.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns false"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        differentUserPrefs.setExpenseBookFilePath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(expenseBook, differentUserPrefs, aliasMap)));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 30,
      "marcus2k": 6,
      "maxxyh": 1,
      "-": 91
    }
  },
  {
    "path": "src/test/java/seedu/expense/model/UserPrefsTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings_nullGuiSettings_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPref \u003d new UserPrefs();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPref.setGuiSettings(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenseBookFilePath_nullPath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e userPrefs.setExpenseBookFilePath(null));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 4,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/expense/model/budget/CategoryBudgetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "class CategoryBudgetTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void topupBudget_amount_changeByEqualAmount() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount amount \u003d new Amount(\"1\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CategoryBudget budget \u003d new CategoryBudget(new Tag(\"Category\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        budget.topupBudget(amount);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(budget.getAmount(), amount);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void getAmount_sameAmount_equalAmount() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Amount defaultAmount \u003d new Amount(\"0\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CategoryBudget budget \u003d new CategoryBudget(new Tag(\"Category\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(budget.getAmount(), defaultAmount);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        budget.topupBudget(new Amount(\"1\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(budget.getAmount(), new Amount(\"1\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "lebencwb": 27
    }
  },
  {
    "path": "src/test/java/seedu/expense/model/expense/AmountTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class AmountTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void constructor_invalidAmount_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String invalidAmount \u003d \"\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Amount(invalidAmount));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void isValidAmount() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // null amount"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Amount.isValidAmount(null));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // invalid amounts"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"\")); // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Amount.isValidAmount(\" \")); // spaces only"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"91.\")); // no cent values after \u0027.\u0027"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Amount.isValidAmount(\"42.123\")); // more than 2 cent digits"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // valid amounts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"91.42\")); // exactly 2 cent digits"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"93121534\")); // whole number"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertTrue(Amount.isValidAmount(\"12.3\")); // 1 cent digit"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "maxxyh": 34
    }
  },
  {
    "path": "src/test/java/seedu/expense/model/expense/DateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String invalidDate \u003d \"23 June 2020\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"04-2020\")); // missing day"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"04-12\")); // missing year"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"04121998\")); // missing dashes"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"24-1998\")); // missing month"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"1-02-1998\")); // only 1 digit for day"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"04-1-1998\")); // only 1 digit for month"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"04-10-20\")); // only 2 digits for year"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"04/10/2020\")); // \u0027/\u0027 symbol instead of \u0027-\u0027 symbol"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\" 04-10-2020\")); // leading space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"04-10-2020 \")); // trailing space"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"04-10--2020\")); // double \u0027-\u0027 symbol"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"4a-10-2020\")); // letters used"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"23 June 2020\")); // written format instead of dd-MM-yyyy"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Date.isValidDate(\"04-10-2020-\")); // extra trailing \u0027-\u0027 symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // valid date"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertTrue(Date.isValidDate(\"04-10-2020\"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "maxxyh": 51
    }
  },
  {
    "path": "src/test/java/seedu/expense/model/expense/DescriptionContainsKeywordsPredicateTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class DescriptionContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DescriptionContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DescriptionContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void test_descriptionDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        DescriptionContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                new DescriptionContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // Keywords match phone, email and expense, but does not match name"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        predicate \u003d new DescriptionContainsKeywordsPredicate("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "                Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDescription(\"Alice\").withAmount(\"23.00\")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .withDate(\"04-10-2020\").build()));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 11,
      "marcus2k": 16,
      "maxxyh": 2,
      "-": 51,
      "lebencwb": 1
    }
  },
  {
    "path": "src/test/java/seedu/expense/model/expense/DescriptionTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "public class DescriptionTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Description(null));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Description(invalidName));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void isValidDescription() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Description.isValidDescription(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Description.isValidDescription(\"\")); // empty string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(Description.isValidDescription(\" \")); // spaces only"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "maxxyh"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertTrue(Description.isValidDescription(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertTrue(Description.isValidDescription(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertTrue(Description.isValidDescription(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertTrue(Description.isValidDescription(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "maxxyh": 36
    }
  },
  {
    "path": "src/test/java/seedu/expense/model/expense/ExpenseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DATE_BUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BUS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.BUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.FEL_BDAY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void isSameExpense() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(FEL_BDAY.isSameExpense(FEL_BDAY));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(FEL_BDAY.isSameExpense(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different amount and date -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense editedFelBD \u003d new ExpenseBuilder(FEL_BDAY)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .withAmount(VALID_AMOUNT_BUS)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .withDate(VALID_DATE_BUS).build();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(FEL_BDAY.isSameExpense(editedFelBD));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        editedFelBD \u003d new ExpenseBuilder(FEL_BDAY).withDescription(VALID_DESCRIPTION_BUS).build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(FEL_BDAY.isSameExpense(editedFelBD));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // same description, same amount, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        editedFelBD \u003d new ExpenseBuilder(FEL_BDAY).withDate(VALID_DATE_BUS)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(FEL_BDAY.isSameExpense(editedFelBD));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        // same description, same date, different attributes -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        editedFelBD \u003d new ExpenseBuilder(FEL_BDAY).withAmount(VALID_AMOUNT_BUS)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                .withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        assertFalse(FEL_BDAY.isSameExpense(editedFelBD));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // same description, same amount, same date, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        editedFelBD \u003d new ExpenseBuilder(FEL_BDAY).withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(FEL_BDAY.isSameExpense(editedFelBD));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense aliceCopy \u003d new ExpenseBuilder(FEL_BDAY).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(FEL_BDAY.equals(aliceCopy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(FEL_BDAY.equals(FEL_BDAY));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(FEL_BDAY.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(FEL_BDAY.equals(5));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(FEL_BDAY.equals(BUS));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different description -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(FEL_BDAY).withDescription(VALID_DESCRIPTION_BUS).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(FEL_BDAY.equals(editedAlice));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different amount -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(FEL_BDAY).withAmount(VALID_AMOUNT_BUS).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(FEL_BDAY.equals(editedAlice));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // different date -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(FEL_BDAY).withDate(VALID_DATE_BUS).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(FEL_BDAY.equals(editedAlice));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 45,
      "maxxyh": 4,
      "-": 29,
      "lebencwb": 3
    }
  },
  {
    "path": "src/test/java/seedu/expense/model/expense/RemarkTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Remark remark \u003d new Remark(\"Hello\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertTrue(remark.equals(remark));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Remark remarkCopy \u003d new Remark(remark.value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertTrue(remark.equals(remarkCopy));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(remark.equals(1));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(remark.equals(null));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        // different remark -\u003e returns false"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Remark differentRemark \u003d new Remark(\"Bye\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertFalse(remark.equals(differentRemark));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "lebencwb": 31
    }
  },
  {
    "path": "src/test/java/seedu/expense/model/expense/UniqueExpenseListTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.BUS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.FEL_BDAY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class UniqueExpenseListTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private final UniqueExpenseList uniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void contains_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.contains(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void contains_expenseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(uniqueExpenseList.contains(FEL_BDAY));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void contains_expenseInList_returnsTrue() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.add(FEL_BDAY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(uniqueExpenseList.contains(FEL_BDAY));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void contains_expenseWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.add(FEL_BDAY);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(FEL_BDAY).withTag(VALID_TAG_TRANSPORT)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertTrue(uniqueExpenseList.contains(editedAlice));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void add_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.add(null));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void add_duplicateExpense_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.add(FEL_BDAY);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.add(FEL_BDAY));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpense_nullTargetExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpense(null, FEL_BDAY));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpense_nullEditedExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpense(FEL_BDAY, null));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpense_targetExpenseNotInList_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e uniqueExpenseList.setExpense(FEL_BDAY, FEL_BDAY));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpense_editedExpenseIsSameExpense_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.add(FEL_BDAY);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.setExpense(FEL_BDAY, FEL_BDAY);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedUniqueExpenseList.add(FEL_BDAY);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpense_editedExpenseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.add(FEL_BDAY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(FEL_BDAY).withTag(VALID_TAG_TRANSPORT)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.setExpense(FEL_BDAY, editedAlice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedUniqueExpenseList.add(editedAlice);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpense_editedExpenseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.add(FEL_BDAY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.setExpense(FEL_BDAY, BUS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedUniqueExpenseList.add(BUS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpense_editedExpenseHasNonUniqueIdentity_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.add(FEL_BDAY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.add(BUS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.setExpense(FEL_BDAY, BUS));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void remove_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.remove(null));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void remove_expenseDoesNotExist_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(ExpenseNotFoundException.class, () -\u003e uniqueExpenseList.remove(FEL_BDAY));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void remove_existingExpense_removesExpense() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.add(FEL_BDAY);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.remove(FEL_BDAY);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenses_nullUniqueExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpenses((UniqueExpenseList) null));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenses_uniqueExpenseList_replacesOwnListWithProvidedUniqueExpenseList() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.add(FEL_BDAY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedUniqueExpenseList.add(BUS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.setExpenses(expectedUniqueExpenseList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenses_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e uniqueExpenseList.setExpenses((List\u003cExpense\u003e) null));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenses_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.add(FEL_BDAY);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003cExpense\u003e expenseList \u003d Collections.singletonList(BUS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        uniqueExpenseList.setExpenses(expenseList);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expectedUniqueExpenseList.add(BUS);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void setExpenses_listWithDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        List\u003cExpense\u003e listWithDuplicateExpenses \u003d Arrays.asList(FEL_BDAY, FEL_BDAY);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(DuplicateExpenseException.class, () -\u003e uniqueExpenseList.setExpenses(listWithDuplicateExpenses));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(UnsupportedOperationException.class, ()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            -\u003e uniqueExpenseList.asUnmodifiableObservableList().remove(0));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 167,
      "lebencwb": 2
    }
  },
  {
    "path": "src/test/java/seedu/expense/model/tag/TagTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class TagTest {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new Tag(null));"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidTagName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        String invalidTagName \u003d \"friend*\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidTagName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // null tag name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "-": 23,
      "lebencwb": 1
    }
  },
  {
    "path": "src/test/java/seedu/expense/storage/JsonAdaptedBudgetTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.budget.CategoryBudget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "class JsonAdaptedBudgetTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    void toModelType_validAmount_returnsBudgetWithCorrectAmount() throws Exception {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        CategoryBudget expectedBudget \u003d new CategoryBudget(new Tag(\"Category\"));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        expectedBudget.topupBudget(new Amount(\"1.01\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        JsonAdaptedBudget budget \u003d new JsonAdaptedBudget(expectedBudget);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        assertEquals(expectedBudget.toString(), budget.toModelType().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 2,
      "lebencwb": 18
    }
  },
  {
    "path": "src/test/java/seedu/expense/storage/JsonAdaptedExpenseTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.storage.JsonAdaptedExpense.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.GRAB_HOME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Description;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class JsonAdaptedExpenseTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String INVALID_DESCRIPTION \u003d \" \";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String INVALID_AMOUNT \u003d \"+3a\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    private static final String INVALID_DATE \u003d \"23 June 2020\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String VALID_DESCRIPTION \u003d GRAB_HOME.getDescription().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String VALID_AMOUNT \u003d GRAB_HOME.getAmount().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String VALID_DATE \u003d GRAB_HOME.getDate().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final String VALID_REMARK \u003d GRAB_HOME.getRemark().toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private static final JsonAdaptedTag VALID_TAG \u003d new JsonAdaptedTag(GRAB_HOME.getTag());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonAdaptedExpense expense \u003d new JsonAdaptedExpense(GRAB_HOME);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(GRAB_HOME, expense.toModelType());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new JsonAdaptedExpense(INVALID_DESCRIPTION, VALID_AMOUNT, VALID_DATE, VALID_REMARK,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        VALID_TAG);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String expectedMessage \u003d Description.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new JsonAdaptedExpense(null, VALID_AMOUNT, VALID_DATE,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        VALID_REMARK, VALID_TAG);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Description.class.getSimpleName());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void toModelType_invalidAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, INVALID_AMOUNT, VALID_DATE, VALID_REMARK,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        VALID_TAG);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String expectedMessage \u003d Amount.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void toModelType_nullAmount_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, null, VALID_DATE,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        VALID_REMARK, VALID_TAG);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Amount.class.getSimpleName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_AMOUNT, INVALID_DATE, VALID_REMARK,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        VALID_TAG);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String expectedMessage \u003d Date.MESSAGE_CONSTRAINTS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_AMOUNT, null,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        VALID_REMARK, VALID_TAG);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public void toModelType_invalidTag_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        JsonAdaptedTag invalidTag \u003d new JsonAdaptedTag(INVALID_TAG);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                new JsonAdaptedExpense(VALID_DESCRIPTION, VALID_AMOUNT, VALID_DATE, VALID_REMARK,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "                        invalidTag);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(IllegalValueException.class, expense::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 37,
      "maxxyh": 13,
      "-": 36,
      "lebencwb": 10
    }
  },
  {
    "path": "src/test/java/seedu/expense/storage/JsonExpenseBookStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.EZ_LINK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.FEL_BDAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.MOVIE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class JsonExpenseBookStorageTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonExpenseBookStorageTest\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void readExpenseBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readExpenseBook(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private java.util.Optional\u003cReadOnlyExpenseBook\u003e readExpenseBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new JsonExpenseBookStorage(Paths.get(filePath)).readExpenseBook(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertFalse(readExpenseBook(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void read_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExpenseBook(\"notJsonFormatLedger.json\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void readExpenseBook_invalidExpenseExpenseBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExpenseBook(\"invalidExpenseLedger.json\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void readExpenseBook_invalidAndValidExpenseExpenseBook_throwDataConversionException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readExpenseBook(\"invalidAndValidExpenseLedger.json\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void readAndSaveExpenseBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        Path filePath \u003d testFolder.resolve(\"TempExpenseBook.json\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBook original \u003d getTypicalExpenseBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonExpenseBookStorage jsonExpenseBookStorage \u003d new JsonExpenseBookStorage(filePath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // Save in new file and read back"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        jsonExpenseBookStorage.saveExpenseBook(original, filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ReadOnlyExpenseBook readBack \u003d jsonExpenseBookStorage.readExpenseBook(filePath).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(original, new ExpenseBook(readBack));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        original.addExpense(MOVIE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        original.removeExpense(FEL_BDAY);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        jsonExpenseBookStorage.saveExpenseBook(original, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        readBack \u003d jsonExpenseBookStorage.readExpenseBook(filePath).get();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(original, new ExpenseBook(readBack));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        // Save and read without specifying file path"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        original.addExpense(EZ_LINK);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        jsonExpenseBookStorage.saveExpenseBook(original); // file path not specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        readBack \u003d jsonExpenseBookStorage.readExpenseBook().get(); // file path not specified"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(original, new ExpenseBook(readBack));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void saveExpenseBook_nullExpenseBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExpenseBook(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Saves {@code expenseBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private void saveExpenseBook(ReadOnlyExpenseBook expenseBook, String filePath) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            new JsonExpenseBookStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                    .saveExpenseBook(expenseBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void saveExpenseBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveExpenseBook(new ExpenseBook(), null));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 110
    }
  },
  {
    "path": "src/test/java/seedu/expense/storage/JsonSerializableExpenseBookTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.util.JsonUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class JsonSerializableExpenseBookTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonSerializableExpenseBookTest\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final Path TYPICAL_EXPENSES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalExpensesLedger.json\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final Path INVALID_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExpenseLedger.json\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private static final Path DUPLICATE_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateExpenseLedger.json\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void toModelType_typicalExpensesFile_success() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonSerializableExpenseBook dataFromFile \u003d JsonUtil.readJsonFile(TYPICAL_EXPENSES_FILE,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                JsonSerializableExpenseBook.class).get();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBook expenseBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBook typicalExpensesExpenseBook \u003d TypicalExpenses.getTypicalExpenseBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(expenseBookFromFile, typicalExpensesExpenseBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void toModelType_invalidExpenseFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonSerializableExpenseBook dataFromFile \u003d JsonUtil.readJsonFile(INVALID_EXPENSE_FILE,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                JsonSerializableExpenseBook.class).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(IllegalValueException.class, dataFromFile::toModelType);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void toModelType_duplicateExpenses_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonSerializableExpenseBook dataFromFile \u003d JsonUtil.readJsonFile(DUPLICATE_EXPENSE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "                JsonSerializableExpenseBook.class).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertThrows(IllegalValueException.class, JsonSerializableExpenseBook.MESSAGE_DUPLICATE_EXPENSE,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                dataFromFile::toModelType);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 24,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/expense/storage/JsonUserPrefsStorageTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e readUserPrefs(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(DataConversionException.class, () -\u003e readUserPrefs(\"NotJsonFormatUserPrefs.json\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(new GuiSettings(1000, 500, 300, 100));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        userPrefs.setExpenseBookFilePath(Paths.get(\"expensebook.json\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(null, \"SomeFile.json\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e saveUserPrefs(new UserPrefs(), null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(1200, 200, 0, 2));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(5, 5, 5, 5));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 6,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/expense/storage/StorageManagerTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "import static seedu.expense.testutil.TypicalExpenses.getTypicalExpenseBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ReadOnlyExpenseBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        JsonExpenseBookStorage expenseBookStorage \u003d new JsonExpenseBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        JsonAliasMapStorage aliasMapStorage \u003d new JsonAliasMapStorage(getTempFilePath(\"als\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "        storageManager \u003d new StorageManager(expenseBookStorage, userPrefsStorage, aliasMapStorage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.resolve(fileName);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(new GuiSettings(300, 600, 4, 6));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void expenseBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "         * {@link JsonExpenseBookStorage} class."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonExpenseBookStorageTest} class."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ExpenseBook original \u003d getTypicalExpenseBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        storageManager.saveExpenseBook(original);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        ReadOnlyExpenseBook retrieved \u003d storageManager.readExpenseBook().get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertEquals(original, new ExpenseBook(retrieved));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public void getExpenseBookFilePath() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        assertNotNull(storageManager.getExpenseBookFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 15,
      "marcus2k": 3,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/expense/testutil/Assert.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Assertions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.function.Executable;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing tests."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Assert {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is a wrapper method that invokes {@link Assertions#assertThrows(Class, Executable)}, to maintain consistency"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * with our custom {@link #assertThrows(Class, String, Executable)} method."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * To standardize API calls in this project, users should use this method instead of"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Assertions#assertThrows(Class, Executable)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, Executable executable) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code executable} throws the {@code expectedType} Exception with the {@code expectedMessage}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * If there\u0027s no need for the verification of the exception\u0027s error message, call"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link #assertThrows(Class, Executable)} instead."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertThrows(Class, Executable)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertThrows(Class\u003c? extends Throwable\u003e expectedType, String expectedMessage,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            Executable executable) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Throwable thrownException \u003d Assertions.assertThrows(expectedType, executable);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assertions.assertEquals(expectedMessage, thrownException.getMessage());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/expense/testutil/CategoryUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "package seedu.expense.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.logic.commands.AddCategoryCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " * A utility class for Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lebencwb"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "public class CategoryUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns an add-category command for adding the {@code tag}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static String getAddCategoryCommand(Tag tag) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return AddCategoryCommand.COMMAND_WORD + \" \" + getCategoryDetails(tag);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lebencwb"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Returns the part of the command string for the given {@code tag}\u0027s details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static String getCategoryDetails(Tag tag) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return PREFIX_TAG + tag.tagName;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lebencwb": 26
    }
  },
  {
    "path": "src/test/java/seedu/expense/testutil/EditExpenseDescriptorBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * A utility class to help with building EditExpenseDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class EditExpenseDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private EditCommand.EditExpenseDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public EditExpenseDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public EditExpenseDescriptorBuilder(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditExpenseDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns an {@code EditExpenseDescriptor} with fields containing {@code expense}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public EditExpenseDescriptorBuilder(Expense expense) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        descriptor \u003d new EditCommand.EditExpenseDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        descriptor.setDescription(expense.getDescription());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        descriptor.setAmount(expense.getAmount());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        descriptor.setDate(expense.getDate());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        descriptor.setTag(expense.getTag());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Sets the {@code Description} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public EditExpenseDescriptorBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        descriptor.setDescription(new Description(description));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Sets the {@code Amount} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public EditExpenseDescriptorBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        descriptor.setAmount(new Amount(amount));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Sets the {@code Date} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public EditExpenseDescriptorBuilder withDate(String date) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        descriptor.setDate(new Date(date));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditExpenseDescriptor}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public EditExpenseDescriptorBuilder withTag(String tagString) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        Tag tag \u003d new Tag(tagString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        descriptor.setTag(tag);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public EditExpenseDescriptor build() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 70,
      "lebencwb": 4
    }
  },
  {
    "path": "src/test/java/seedu/expense/testutil/ExpenseBookBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * A utility class to help with building ExpenseBook objects."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " *     {@code ExpenseBook ab \u003d new ExpenseBookBuilder().withExpense(expense).build();}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ExpenseBookBuilder {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private ExpenseBook expenseBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBookBuilder() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBook \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBookBuilder(ExpenseBook expenseBook) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.expenseBook \u003d expenseBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Adds a new {@code Expense} to the {@code ExpenseBook} that we are building."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBookBuilder withExpense(Expense expense) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        if (!expenseBook.containsCategory(expense.getTag())) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "            expenseBook.addCategory(expense.getTag());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        expenseBook.addExpense(expense);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBook build() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return expenseBook;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 34,
      "maxxyh": 3
    }
  },
  {
    "path": "src/test/java/seedu/expense/testutil/ExpenseBuilder.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.model.ExpenseBook.DEFAULT_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Description;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Remark;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * A utility class to help with building Expense objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String DEFAULT_DESCRIPTION \u003d \"Lunch Bak Chor Mee\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String DEFAULT_AMOUNT \u003d \"3.00\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"04-10-2020\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"Very expensive.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Description description;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Amount amount;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private Remark remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    private Tag tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Creates a {@code ExpenseBuilder} with the default details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        description \u003d new Description(DEFAULT_DESCRIPTION);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        amount \u003d new Amount(DEFAULT_AMOUNT);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        date \u003d new Date(DEFAULT_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        remark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        tag \u003d DEFAULT_TAG;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        description \u003d expenseToCopy.getDescription();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        amount \u003d expenseToCopy.getAmount();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        date \u003d expenseToCopy.getDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        remark \u003d expenseToCopy.getRemark();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        tag \u003d expenseToCopy.getTag();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Sets the {@code Description} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBuilder withDescription(String description) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.description \u003d new Description(description);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "     * Parses the {@code tag} into a {@code Tag} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public ExpenseBuilder withTag(String tag) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        this.tag \u003d new Tag(tag);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Sets the {@code Amount} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBuilder withAmount(String amount) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.amount \u003d new Amount(amount);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Sets the {@code Date} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Sets the {@code Remark} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public ExpenseBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        this.remark \u003d new Remark(remark);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return new Expense(description, amount, date, remark, tag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 86,
      "lebencwb": 8
    }
  },
  {
    "path": "src/test/java/seedu/expense/testutil/ExpenseUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_AMOUNT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_DESCRIPTION;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * A utility class for Expense."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class ExpenseUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns an add command string for adding the {@code expense}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static String getAddCommand(Expense expense) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the part of command string for the given {@code expense}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static String getExpenseDetails(Expense expense) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        sb.append(PREFIX_DESCRIPTION + expense.getDescription().fullDescription + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        sb.append(PREFIX_AMOUNT + expense.getAmount().toString() + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        sb.append(PREFIX_DATE + expense.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        sb.append(PREFIX_TAG + expense.getTag().tagName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static String getEditExpenseDescriptorDetails(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        descriptor.getDescription().ifPresent(description -\u003e sb.append(PREFIX_DESCRIPTION)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "                .append(description.fullDescription).append(\" \"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        descriptor.getAmount().ifPresent(amount -\u003e sb.append(PREFIX_AMOUNT).append(amount.toString()).append(\" \"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "maxxyh"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.toString()).append(\" \"));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        if (descriptor.getTag().isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            Tag tag \u003d descriptor.getTag().get();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            sb.append(PREFIX_TAG).append(tag.tagName).append(\" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 20,
      "maxxyh": 3,
      "-": 23,
      "lebencwb": 6
    }
  },
  {
    "path": "src/test/java/seedu/expense/testutil/SerializableTestClass.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A class used to test serialization and deserialization"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class SerializableTestClass {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String JSON_STRING_REPRESENTATION \u003d String.format(\"{%n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"name\\\" : \\\"This is a test class\\\",%n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"listOfLocalDateTimes\\\" : \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[ \\\"-999999999-01-01T00:00:00\\\", \\\"+999999999-12-31T23:59:59.999999999\\\", \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"\\\"0001-01-01T01:01:00\\\" ],%n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  \\\"mapOfIntegerToString\\\" : {%n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"1\\\" : \\\"One\\\",%n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"2\\\" : \\\"Two\\\",%n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    \\\"3\\\" : \\\"Three\\\"%n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"  }%n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"}\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_TEST_VALUE \u003d \"This is a test class\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cLocalDateTime\u003e listOfLocalDateTimes;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private HashMap\u003cInteger, String\u003e mapOfIntegerToString;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getNameTestValue() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return NAME_TEST_VALUE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cLocalDateTime\u003e getListTestValues() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cLocalDateTime\u003e listOfLocalDateTimes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MIN);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.MAX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes.add(LocalDateTime.of(1, 1, 1, 1, 1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static HashMap\u003cInteger, String\u003e getHashMapTestValues() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        HashMap\u003cInteger, String\u003e mapOfIntegerToString \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(1, \"One\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(2, \"Two\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString.put(3, \"Three\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTestValues() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d getNameTestValue();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        listOfLocalDateTimes \u003d getListTestValues();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        mapOfIntegerToString \u003d getHashMapTestValues();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cLocalDateTime\u003e getListOfLocalDateTimes() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return listOfLocalDateTimes;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public HashMap\u003cInteger, String\u003e getMapOfIntegerToString() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return mapOfIntegerToString;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/expense/testutil/TestUtil.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the middle index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size() / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the last index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns the expense in the {@code model}\u0027s expense list at {@code index}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static Expense getExpense(Model model, Index index) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return model.getFilteredExpenseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 11,
      "-": 44
    }
  },
  {
    "path": "src/test/java/seedu/expense/testutil/TypicalExpenses.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_AMOUNT_BUS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_AMOUNT_FOOD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_AMOUNT_MISC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DATE_BUS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DATE_FOOD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DATE_MISC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DESCRIPTION_BUS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DESCRIPTION_FOOD;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_DESCRIPTION_MISC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.logic.commands.CommandTestUtil.VALID_TAG_TRANSPORT;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.ExpenseBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Amount;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.model.expense.Expense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "import seedu.expense.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": " * A utility class containing a list of {@code Expense} objects to be used in tests."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "public class TypicalExpenses {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Expense FEL_BDAY \u003d new ExpenseBuilder().withDescription(\"Felicia\u0027s Birthday\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDate(\"02-07-2020\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withAmount(\"140.00\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withRemark(\"Birthday surprise with friends + birthday presents + birthday dinner\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            .withTag(\"Girlfriend\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Expense GRAB_HOME \u003d new ExpenseBuilder().withDescription(\"Grab Home\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withRemark(\"Need to stop grabbing so much!\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDate(\"01-07-2020\").withAmount(\"15.00\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            .withTag(\"Transport\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Expense ZARA \u003d new ExpenseBuilder().withDescription(\"ZARA Jacket\").withAmount(\"80.00\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDate(\"30-06-2020\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            .withTag(\"Shopping\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Expense RAMEN \u003d new ExpenseBuilder().withDescription(\"Ramen with Tyler\").withAmount(\"18.50\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDate(\"29-06-2020\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            .withTag(\"Food\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Expense PHONE_BILL \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDescription(\"Phone Bill Payment\").withAmount(\"35.90\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDate(\"29-06-2020\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Expense GRAB_SUPPER \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDescription(\"Grab to Supper\").withAmount(\"5.00\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDate(\"28-06-2020\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Expense SWEE_CHOON \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDescription(\"Swee Choon Supper\").withAmount(\"12.40\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDate(\"28-06-2020\").build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Expense MOVIE \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDescription(\"Movie with Felicia\").withAmount(\"14.00\")"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDate(\"26-06-2020\").build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Expense EZ_LINK \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDescription(\"Top-up Ez-Link\").withAmount(\"20\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withDate(\"25-06-2020\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    // Manually added - Expense\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Expense FOOD \u003d new ExpenseBuilder().withDescription(VALID_DESCRIPTION_FOOD)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withAmount(VALID_AMOUNT_FOOD).withDate(VALID_DATE_FOOD)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            .withTag(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Expense BUS \u003d new ExpenseBuilder().withDescription(VALID_DESCRIPTION_BUS)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "            .withAmount(VALID_AMOUNT_BUS).withDate(VALID_DATE_BUS)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            .withTag(VALID_TAG_TRANSPORT).build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "    public static final Expense MISC \u003d new ExpenseBuilder().withDescription(VALID_DESCRIPTION_MISC)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            .withAmount(VALID_AMOUNT_MISC).withDate(VALID_DATE_MISC).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    private TypicalExpenses() {} // prevents instantiation"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "     * Returns an {@code ExpenseBook} with all the typical expenses."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static ExpenseBook getTypicalExpenseBook() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        ExpenseBook eb \u003d new ExpenseBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        eb.addCategory(new Tag(\"Girlfriend\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        eb.addCategory(new Tag(\"Shopping\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        eb.addCategory(new Tag(VALID_TAG_FOOD));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        eb.addCategory(new Tag(VALID_TAG_TRANSPORT));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        eb.getBudgets().topupBudget(new Amount(\"10\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        for (Expense expense : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "            eb.addExpense(expense);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lebencwb"
        },
        "content": "        return eb;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(FEL_BDAY, GRAB_HOME, ZARA, RAMEN, PHONE_BILL, GRAB_SUPPER, SWEE_CHOON));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 50,
      "-": 23,
      "lebencwb": 22
    }
  },
  {
    "path": "src/test/java/seedu/expense/testutil/TypicalIndexes.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Index INDEX_FIRST_EXPENSE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Index INDEX_SECOND_EXPENSE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "    public static final Index INDEX_THIRD_EXPENSE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 5,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/expense/ui/TestFxmlObject.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.DefaultProperty;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A test object which can be constructed via an FXML file."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Unlike other JavaFX classes, this class can be constructed without the JavaFX toolkit being initialized."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "@DefaultProperty(\"text\")"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestFxmlObject {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private String text;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject() {}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestFxmlObject(String text) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        setText(text);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return text;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setText(String text) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.text \u003d text;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof TestFxmlObject // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 text.equals(((TestFxmlObject) other).getText()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/expense/ui/UiPartTest.java",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "package seedu.expense.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import static seedu.expense.testutil.Assert.assertThrows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.io.TempDir;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "import seedu.expense.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiPartTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MISSING_FILE_PATH \u003d \"UiPartTest/missingFile.fxml\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_FILE_PATH \u003d \"UiPartTest/invalidFile.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_PATH \u003d \"UiPartTest/validFile.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_FILE_WITH_FX_ROOT_PATH \u003d \"UiPartTest/validFileWithFxRoot.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final TestFxmlObject VALID_FILE_ROOT \u003d new TestFxmlObject(\"Hello World!\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @TempDir"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path testFolder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileUrl_throwsNullPointerException() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((URL) null, new Object()));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileUrl_throwsAssertionError() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        URL missingFileUrl \u003d new URL(testFolder.toUri().toURL(), MISSING_FILE_PATH);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(missingFileUrl, new Object()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileUrl_throwsAssertionError() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        URL invalidFileUrl \u003d getTestFileUrl(INVALID_FILE_PATH);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(invalidFileUrl, new Object()));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileUrl_loadsFile() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_PATH);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl).getRoot());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_validFileWithFxRootUrl_loadsFile() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL validFileUrl \u003d getTestFileUrl(VALID_FILE_WITH_FX_ROOT_PATH);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        TestFxmlObject root \u003d new TestFxmlObject();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(VALID_FILE_ROOT, new TestUiPart\u003cTestFxmlObject\u003e(validFileUrl, root).getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e((String) null, new Object()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_missingFileName_throwsNullPointerException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(NullPointerException.class, () -\u003e new TestUiPart\u003cObject\u003e(MISSING_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidFileName_throwsAssertionError() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(AssertionError.class, () -\u003e new TestUiPart\u003cObject\u003e(INVALID_FILE_PATH, new Object()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private URL getTestFileUrl(String testFilePath) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String testFilePathInView \u003d \"/view/\" + testFilePath;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        URL testFileUrl \u003d MainApp.class.getResource(testFilePathInView);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(testFileUrl, testFilePathInView + \" does not exist.\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFileUrl;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * UiPart used for testing."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * It should only be used with invalid FXML files or the valid file located at {@link VALID_FILE_PATH}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class TestUiPart\u003cT\u003e extends UiPart\u003cT\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        @FXML"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        private TestFxmlObject validFileRoot; // Check that @FXML annotations work"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl, T root) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl, root);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName, T root) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName, root);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(URL fxmlFileUrl) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileUrl);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        TestUiPart(String fxmlFileName) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super(fxmlFileName);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(VALID_FILE_ROOT, validFileRoot);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 3,
      "-": 111
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFile.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003c?import seedu.expense.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cTestFxmlObject xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:id\u003d\"validFileRoot\"\u003eHello World!\u003c/TestFxmlObject\u003e"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "-": 3
    }
  },
  {
    "path": "src/test/resources/view/UiPartTest/validFileWithFxRoot.fxml",
    "fileType": "test-code",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marcus2k"
        },
        "content": "\u003c?import seedu.expense.ui.TestFxmlObject?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Jaylenlee"
        },
        "content": "\u003cfx:root type\u003d\"seedu.expense.ui.TestFxmlObject\" xmlns\u003d\"http://javafx.com/javafx\""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "         xmlns:fx\u003d\"http://javafx.com/fxml\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctext\u003eHello World!\u003c/text\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Jaylenlee": 1,
      "marcus2k": 1,
      "-": 5
    }
  }
]
